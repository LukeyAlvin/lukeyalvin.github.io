<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PnP中的BA问题</title>
    <url>/2022/03/25/PnP%E4%B8%AD%E7%9A%84BA%E9%97%AE%E9%A2%98-md/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>$PnP（Perspective-n-Point）$是求解 $3D $到$ 2D $点对运动的方法。它描述了当我们知道$n $个$ 3D$ 空间点以及它们的投影位置时，如何估计相机所在的位姿。如果两张图像中，其中一张特征点的 $3D$ 位置已知，那么最少只需三个点对（需要至少一个额外点验证结果）就可以估计相机运动。特征点的$ 3D $位置可以由三角化，或者由 $RGB-D$ 相机的深度图确定。因此，在双目或$ RGB-D$ 的视觉里程计中，我们可以直接使用$ PnP$ 估计相机运动。而在单目视觉里程计中，必须先进行初始化，然后才能使用 $PnP$。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><img src="/2022/03/25/PnP%E4%B8%AD%E7%9A%84BA%E9%97%AE%E9%A2%98-md/image-20220325170738748.png" alt="image-20220325170738748"></p>
<p>$PnP $问题有很多种求解方法，例如用三对点估计位姿的 $P3P$，直接线性变换$(DLT)$，$EPnP(Efficient PnP)$，$UPnP$等等。此外，还能用非线性优化的方式，构建最小二乘问题并迭代求解，也就是万金油式的$ Bundle Adjustment$。</p>
<p>其中$P3P$利用了三角形相似性质，求解投影点 $a, b, c$ 在相机坐标系下的 3D 坐标，最后把问题转换成一个 3D 到 3D 的位姿估计问题($ICP$问题)。但是，$P3P$ 只利用三个点的信息。当给定的配对点多于 3 组时，难以利用更多的信息；而且，如果 3D 点或 2D 点受噪声影响，或者存在误匹配，则算法失效。</p>
<p>在 $SLAM$ 当中，通常的做法是先使用 $P3P/EPnP$ 等方法估计相机位姿，然后构建最小二乘优化问题对估计值进行调整$（Bundle Adjustment）$。</p>
<h2 id="Bundle-Adjustment"><a href="#Bundle-Adjustment" class="headerlink" title="Bundle Adjustment"></a>Bundle Adjustment</h2><p>我们可以把 $PnP $问题构建成一个定义于李代数上的非线性最小二乘问题。前面说的线性方法，往往是<strong>先求相</strong><br><strong>机位姿，再求空间点位置</strong>，而非线性优化则是把它们都看成优化变量，放在一起优化。这是一种非常通用的求解方式，我们可以用它对$ PnP $或$ ICP $给出的结果进行优化。</p>
<h3 id="PnP中的BA问题"><a href="#PnP中的BA问题" class="headerlink" title="PnP中的BA问题"></a>PnP中的BA问题</h3><p>在 $PnP $中，这个$ Bundle Adjustment $问题，是一个最小化重投影误差（Reprojection error）的问题。</p>
<p><img src="/2022/03/25/PnP%E4%B8%AD%E7%9A%84BA%E9%97%AE%E9%A2%98-md/image-20220325192454090.png" alt="image-20220325192454090"></p>
<p>该问题的误差项，是将像素坐标（观测到的投影位置）与 3D 点按照当前估计的位姿进行投影得到的位置相比较得到的误差，所以称之为重投影误差。如图，我们通过特征匹配，知道了 $p_1$和 $p_2$是同一个空间点$P$ 的投影，但是我们不知道相机的位姿。在初始值中，$P $的投影$\hat{p_2}$与实际的$ p_2$之间有一定的距离。于是我们调整相机的位姿，使得这个距离变小。不过，由于这个调整需要考虑很多个点，所以最后每个点的误差通常都不会精确为零。</p>
<p>考虑 $n$ 个三维空间点 $P $和它们的投影$ p$，我们希望计算相机的位姿 $R, t，$它的李代数表示为 $ξ$。假设某空间点坐标为$ P_i = [X_i , Y_i , Z_i ]^{T} $，其投影的像素坐标为 $u_i = [u_i , v_i ]^{T} $。<br>像素位置与空间点位置的关系如下：</p>
<script type="math/tex; mode=display">
s_i
\left[
\begin{matrix}
u_i\\v_i\\1
\end{matrix}
\right]=
Kexp(ξ^{\land})
\left[
\begin{matrix}
X_i\\Y_i\\Z_i\\1
\end{matrix}
\right]</script><p>写成矩阵形式：</p>
<script type="math/tex; mode=display">
s_iu_i=Kexp(ξ^{\land})P_i</script><p>由于相机位姿未知以及观测点的噪声，该等式存在一个误差，把误差求和，构建最小二乘问题，然后寻找最好的相机位姿，使它最小化:</p>
<script type="math/tex; mode=display">
ξ^{*}=arg \underset{ξ}{min}\frac{1}{2}\sum^n_{i=1}\parallel u_i-\frac{1} {s_i}Kexp(ξ^{\land})P_i\parallel^2_2</script><p>求每个误差项关于优化变量的导数，也就是线性化：</p>
<script type="math/tex; mode=display">
e(x+\Delta x)\approx e(x)+J\Delta x</script><p>$e $为像素坐标误差（2 维），$x$ 为相机位姿（6 维）时，$J$ 将是一个 2 × 6 的矩阵。</p>
<h3 id="优化位姿"><a href="#优化位姿" class="headerlink" title="优化位姿"></a>优化位姿</h3><p>记变换到相机坐标系下的空间点坐标为 $P^′$:</p>
<script type="math/tex; mode=display">
s
\left[
\begin{matrix}
u\\v\\1
\end{matrix}
\right]=
\left[
\begin{matrix}
f_x &0 &c_x\\0 &f_y &c_y\\0&0 &1
\end{matrix}
\right]
\left[
\begin{matrix}
X^{′}\\Y^{′}\\Z^{′}
\end{matrix}
\right]</script><p>利用第 3 行消去 $s$（实际上就是$ P^{′ }$的距离），得：</p>
<script type="math/tex; mode=display">
u=f_x\frac{X^′}{Z^′}+c_x\\
v=f_y\frac{Y^′}{Z^′}+c_y</script><p>对 $ξ^{\land} $左乘扰动量$ δξ$，然后考虑 $e$ 的变化关于扰动量的导数。利用链式法则:</p>
<script type="math/tex; mode=display">
\frac{\partial e}{\partial \delta \xi}=
\underset{\delta \xi \rightarrow0}{lim}
\frac{e(\delta \xi⊕\xi)}{\delta \xi}=
\frac{\partial e}{\partial P^′}
\frac{\partial P^′}{\partial \delta \xi}</script><p>其中：$\frac{\partial e}{\partial P^′}$</p>
<script type="math/tex; mode=display">
\frac{\partial e}{\partial P^′}=-
\begin{bmatrix}
\frac{\partial u}{\partial X^′}&
\frac{\partial u}{\partial Y^′}&
\frac{\partial u}{\partial Z^′}            \\ 
\frac{\partial v}{\partial X^′}&
\frac{\partial v}{\partial Y^′}&
\frac{\partial v}{\partial Z^′}
\end{bmatrix}=-
\begin{bmatrix}
\frac{f_x}{Z^′}&0&-\frac{f_xX^′}{Z^{′2}}\\
0&\frac{f_y}{Z^′}&-\frac{f_yY^′}{Z^{′2}}
\end{bmatrix}</script><p>$\frac{\partial P^′}{\partial \delta \xi}$为变换后的点关于李代数的导数：</p>
<script type="math/tex; mode=display">
\begin{align}
\frac{\partial P^′}{\partial \delta \xi}&=
\frac{\partial(TP)}{\partial \delta \xi} \\ &=
\underset{\delta \xi \rightarrow0}{lim}
\frac{exp(\delta \xi ^{\land})exp(\xi ^{\land})p-exp(\xi ^{\land})p}{\delta \xi}\\&\approx
\underset{\delta \xi \rightarrow0}{lim}
\frac{(I+\delta \xi ^{\land})exp(\xi ^{\land})p-exp(\xi ^{\land})p}{\delta \xi}\\&=
\underset{\delta \xi \rightarrow0}{lim}
\frac{\delta \xi ^{\land}exp(\xi ^{\land})p}{\delta \xi}\\&=
\underset{\delta \xi \rightarrow0}{lim}
\frac{\begin{bmatrix}
\delta \phi^{\land}&\delta \rho \\
0^T&0
\end{bmatrix}
\begin{bmatrix}
Rp+t \\
1
\end{bmatrix}
}{\delta \xi}\\&=
\underset{\delta \xi \rightarrow0}{lim}
\frac{\begin{bmatrix}
\delta \phi^{\land}(Rp+t)+\delta \rho  \\
0
\end{bmatrix}
}
{\delta \xi}\\&=
\begin{bmatrix}
I &-(RP+t)^{\land}\\
0^{T}&0^{T}
\end{bmatrix}\\&=
\begin{bmatrix}
I &-P^{′\land}\\
0^{T}&0^{T}
\end{bmatrix}\\&=
(TP)^⊙



\end{align}</script><p>两项相乘：</p>
<script type="math/tex; mode=display">
\begin{align}
\frac{\partial e}{\partial \delta \xi}&=
\frac{\partial e}{\partial P^′}
\frac{\partial P^′}{\partial \delta \xi}\\&=-
\begin{bmatrix}
\frac{f_x}{Z^′}&0&-\frac{f_xX^′}{Z^{′2}}
&-\frac{f_xX^′Y^′}{Z^{′2}}&f_x+\frac{f_xX^2}{Z^{′2}}&-\frac{f_xY^′}{Z^{′}}
\\
0&\frac{f_y}{Z^′}&-\frac{f_yY^′}{Z^{′2}}
&-f_y-\frac{f_yY^{′2}}{Z^{′2}}&\frac{f_yX^′Y^′}{Z^{′}}&-\frac{f_yX^′}{Z^{′}}
\end{bmatrix}\\&=
J
\end{align}</script><p>这个雅可比矩阵描述了重投影误差关于相机位姿李代数的一阶变化关系</p>
<h3 id="优化空间点位置"><a href="#优化空间点位置" class="headerlink" title="优化空间点位置"></a>优化空间点位置</h3><p>讨论 $e$关于空间点 $P $的导数</p>
<script type="math/tex; mode=display">
\frac{\partial e}{\partial P}=
\frac{\partial e}{\partial P^′}
\frac{\partial P^′}{\partial P}</script><p>由于：</p>
<script type="math/tex; mode=display">
\begin{align}
P^′&=exp(\xi ^{\land})P=RP+t\\
\frac{\partial P^′}{\partial P}&=R
\end{align}</script><p>所以：</p>
<script type="math/tex; mode=display">
\frac{\partial e}{\partial P}=-
\begin{bmatrix}
\frac{f_x}{Z^′}&0&-\frac{f_xX^′}{Z^{′2}}\\
0&\frac{f_y}{Z^′}&-\frac{f_yY^′}{Z^{′2}}
\end{bmatrix}R</script><p><strong>我们推导了观测相机方程关于相机位姿与特征点的两个导数矩阵。它们十分重要，能够在优化过程中提供重要的梯度方向，指导优化的迭代。</strong></p>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>求解PnP并使用BA优化</title>
    <url>/2022/03/25/%E6%B1%82%E8%A7%A3PnP%E5%B9%B6%E4%BD%BF%E7%94%A8BA%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>我们用 $OpenCV $提供的$ EPnP $求解 $PnP $问题，然后通过 $g2o $对结果进行优化。由于 $PnP$ 需要使用 $3D$ 点，为了避免初始化带来的麻烦，我们使用了 $RGB-D $相机中的深度图，作为特征点的 3D位置。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>在例程中，我们得到配对特征点后，在第一个图的深度图中寻找它们的深度，并求出空间位置。以此空间位置为 $3D $点，再以第二个图像的像素位置为$ 2D $点，调用 $EPnP$ 求解 $PnP $问题。</p>
<h2 id="1-特征点匹配"><a href="#1-特征点匹配" class="headerlink" title="1.特征点匹配"></a>1.特征点匹配</h2><h2 id="2-建立3D点"><a href="#2-建立3D点" class="headerlink" title="2.建立3D点"></a>2.建立3D点</h2><h2 id="3-求解PnP"><a href="#3-求解PnP" class="headerlink" title="3.求解PnP"></a>3.求解PnP</h2><h2 id="4-使用BA优化"><a href="#4-使用BA优化" class="headerlink" title="4.使用BA优化"></a>4.使用BA优化</h2>]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>md公式积累</title>
    <url>/2022/03/25/md%E5%85%AC%E5%BC%8F%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>Makedown常用符号。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<h1 id="矩阵："><a href="#矩阵：" class="headerlink" title="矩阵："></a>矩阵：</h1><ul>
<li>matrix</li>
</ul>
<script type="math/tex; mode=display">
\begin{matrix}
f_x &0 &c_x\\0 &f_y &c_y\\0&0 &1
\end{matrix}</script><ul>
<li>pmatrix</li>
</ul>
<script type="math/tex; mode=display">
\begin{pmatrix}
f_x &0 &c_x\\0 &f_y &c_y\\0&0 &1
\end{pmatrix}</script><ul>
<li>bmatrix</li>
</ul>
<script type="math/tex; mode=display">
\begin{bmatrix}
f_x &0 &c_x\\0 &f_y &c_y\\0&0 &1
\end{bmatrix}</script><ul>
<li>Bmatrix</li>
</ul>
<script type="math/tex; mode=display">
\begin{Bmatrix}
f_x &0 &c_x\\0 &f_y &c_y\\0&0 &1
\end{Bmatrix}</script><ul>
<li>vmatrix</li>
</ul>
<script type="math/tex; mode=display">
\begin{vmatrix}
f_x &0 &c_x\\0 &f_y &c_y\\0&0 &1
\end{vmatrix}</script><ul>
<li>Vmatrix</li>
</ul>
<script type="math/tex; mode=display">
\begin{Vmatrix}
f_x &0 &c_x\\0 &f_y &c_y\\0&0 &1
\end{Vmatrix}</script><h1 id="约等于，三角形"><a href="#约等于，三角形" class="headerlink" title="约等于，三角形"></a>约等于，三角形</h1><script type="math/tex; mode=display">
e(x+\Delta x)\approx e(x)+J\Delta x</script><h1 id="集合符号"><a href="#集合符号" class="headerlink" title="集合符号"></a>集合符号</h1><div class="table-container">
<table>
<thead>
<tr>
<th>\in</th>
<th>∈</th>
<th>属于</th>
</tr>
</thead>
<tbody>
<tr>
<td>\notin</td>
<td>∉</td>
<td>不属于</td>
</tr>
<tr>
<td>\subset</td>
<td>⊂</td>
<td>真子集</td>
</tr>
<tr>
<td>\not \subset</td>
<td>⊄</td>
<td>非子集</td>
</tr>
<tr>
<td>\subseteq</td>
<td>⊆</td>
<td>子集</td>
</tr>
<tr>
<td>\supset</td>
<td>⊃</td>
<td>超集</td>
</tr>
<tr>
<td>\supseteq</td>
<td>⊇</td>
<td>超集</td>
</tr>
<tr>
<td>\cup</td>
<td>∪</td>
<td>并集</td>
</tr>
<tr>
<td>\cap</td>
<td>∩</td>
<td>交集</td>
</tr>
<tr>
<td>\mathbb{R}</td>
<td>R</td>
<td>实数集</td>
</tr>
<tr>
<td>\emptyset</td>
<td>∅</td>
<td>空集</td>
</tr>
</tbody>
</table>
</div>
<h1 id="希腊符号"><a href="#希腊符号" class="headerlink" title="希腊符号"></a>希腊符号</h1><div class="table-container">
<table>
<thead>
<tr>
<th>\alpha</th>
<th>α</th>
</tr>
</thead>
<tbody>
<tr>
<td>\beta</td>
<td>β</td>
</tr>
<tr>
<td>\gamma</td>
<td>γ</td>
</tr>
<tr>
<td>\Gamma</td>
<td>Γ</td>
</tr>
<tr>
<td>\theta</td>
<td>θ</td>
</tr>
<tr>
<td>\Theta</td>
<td>Θ</td>
</tr>
<tr>
<td>\delta</td>
<td>δ</td>
</tr>
<tr>
<td>\Delta</td>
<td>Δ</td>
</tr>
<tr>
<td>\triangledown</td>
<td>▽</td>
</tr>
<tr>
<td>\epsilon</td>
<td>ϵ</td>
</tr>
<tr>
<td>\zeta</td>
<td>ζ</td>
</tr>
<tr>
<td>\eta</td>
<td>η</td>
</tr>
<tr>
<td>\kappa</td>
<td>κ</td>
</tr>
<tr>
<td>\lambda</td>
<td>λ</td>
</tr>
<tr>
<td>\mu</td>
<td>μ</td>
</tr>
<tr>
<td>\nu</td>
<td>ν</td>
</tr>
<tr>
<td>\xi</td>
<td>ξ</td>
</tr>
<tr>
<td>\pi</td>
<td>π</td>
</tr>
<tr>
<td>\sigma</td>
<td>σ</td>
</tr>
<tr>
<td>\tau</td>
<td>τ</td>
</tr>
<tr>
<td>\upsilon</td>
<td>υ</td>
</tr>
<tr>
<td>\phi</td>
<td>ϕ</td>
</tr>
<tr>
<td>\omega</td>
<td>ω</td>
</tr>
<tr>
<td>\rho</td>
<td>$\rho $</td>
</tr>
</tbody>
</table>
</div>
<p>极限</p>
<script type="math/tex; mode=display">
\lim\limits_{x\rightarrow\infty}\frac{1}{x}</script>]]></content>
      <categories>
        <category>Makedown</category>
      </categories>
      <tags>
        <tag>Makedown</tag>
      </tags>
  </entry>
  <entry>
    <title>对极约束求解相机运动</title>
    <url>/2022/03/24/%E5%AF%B9%E6%9E%81%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3%E7%9B%B8%E6%9C%BA%E8%BF%90%E5%8A%A8/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>我们从两张图像中，可以得到一对配对好的特征点。如果我们有若干对这样的匹配点，就可以通过这些二维图像点的对应关系，恢复出在两帧之间摄像机的运动。整个推导结果，使用好的匹配点得到本质矩阵$E$或者基础矩阵$F$抑或单应矩阵$H$，然后通过将他们分解成$R,t$，就可以推算相机的位姿。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><img src="/2022/03/24/%E5%AF%B9%E6%9E%81%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3%E7%9B%B8%E6%9C%BA%E8%BF%90%E5%8A%A8/image-20220325110120640.png" alt="image-20220325110120640"></p>
<p>设 $P$ 的空间位置为：</p>
<script type="math/tex; mode=display">
P=[X,Y,Z]^{T}</script><p>由于像素坐标与世界坐标的关系为：</p>
<script type="math/tex; mode=display">
Z \left(
\begin{matrix}
u\\ v\\ 1
\end{matrix}
\right)=
\left(
\begin{matrix}
f_x &0 &c_x\\
0   &f_y &c_y\\
0 &0 &1\\
\end{matrix}
\right)
\left(
\begin{matrix}
X\\ Y\\ Z
\end{matrix}
\right)=KP</script><p>两个像素点 $p_1 , p_2 $的像素位置为:</p>
<script type="math/tex; mode=display">
s_1p_1=KP，s_2p_2=K(RP+t)</script><p>使用齐次坐标：</p>
<script type="math/tex; mode=display">
p_1=KP，p_2=K(RP+t)</script><p>取：$x_1=K^{-1}p_1,x_2=K^{-1}p_2$,这里的$ x_1 , x_2 $是两个像素点的归一化平面上的坐标。</p>
<p>代入上式:</p>
<script type="math/tex; mode=display">
x_2=Rx_1+t</script><p>两边同时左乘$t^{\land}$:</p>
<script type="math/tex; mode=display">
t^{\land}x_2=t^{\land}Rx_1</script><p>两侧同时左乘$x_2^{T}$，由$t^{\land}x_2$表示$t$与$x_2$的外积，外积的定义说明$t^{\land}x_2$与$t$、$x_2$都是垂直的，故而：</p>
<script type="math/tex; mode=display">
x_2^{T}t^{\land}x_2=x_2^{T}t^{\land}Rx_1=0\\
x_2^{T}Ex_1=0</script><p>带入$p_1,p_2$:</p>
<script type="math/tex; mode=display">
p_2^{T}K^{-T}t^{\land}RK^{-1}p_1=0\\
p_2^{T}Fp_1=0</script><p>因此验证对极约束：</p>
<script type="math/tex; mode=display">
x_2^{T}t^{\land}Rx_1=0</script><h1 id="对极约束求解相机运动"><a href="#对极约束求解相机运动" class="headerlink" title="对极约束求解相机运动"></a>对极约束求解相机运动</h1><h2 id="1-特征匹配"><a href="#1-特征匹配" class="headerlink" title="1.特征匹配"></a>1.特征匹配</h2><p>这一部分的实践是在<a href="https://lukeyalvin.top/2022/03/24/特征提取/#more">特征提取与匹配</a>的基础上进行的，和之前的特征匹配没有区别，只是这里把它封装成一个函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 寻找特征匹配</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_feature_matches</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> Mat &amp;img_1,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> Mat &amp;img_2,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::vector&lt;KeyPoint&gt; &amp;keypoints_1,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::vector&lt;KeyPoint&gt; &amp;keypoints_2,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::vector&lt;DMatch&gt; &amp;good_matches)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//-- 初始化</span></span><br><span class="line">    Mat descriptors_1, descriptors_2;                    <span class="comment">// 定义描述子</span></span><br><span class="line">    Ptr&lt;FeatureDetector&gt; detector = ORB::<span class="built_in">create</span>();       <span class="comment">//创建ORB特征检测器</span></span><br><span class="line">    Ptr&lt;DescriptorExtractor&gt; descriptor = ORB::<span class="built_in">create</span>(); <span class="comment">//创建ORB特征描述子提取.</span></span><br><span class="line">    Ptr&lt;DescriptorMatcher&gt; matcher = DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;BruteForce-Hamming&quot;</span>);</span><br><span class="line">    <span class="comment">//-- 第一步:检测 Oriented FAST 角点位置</span></span><br><span class="line">    detector-&gt;<span class="built_in">detect</span>(img_1, keypoints_1);</span><br><span class="line">    detector-&gt;<span class="built_in">detect</span>(img_2, keypoints_2);</span><br><span class="line">    <span class="comment">//-- 第二步:根据角点位置计算 BRIEF 描述子</span></span><br><span class="line">    descriptor-&gt;<span class="built_in">compute</span>(img_1, keypoints_1, descriptors_1);</span><br><span class="line">    descriptor-&gt;<span class="built_in">compute</span>(img_2, keypoints_2, descriptors_2);</span><br><span class="line">    <span class="comment">//-- 第三步:对两幅图像中的BRIEF描述子进行匹配，使用 Hamming 距离</span></span><br><span class="line">    vector&lt;DMatch&gt; matches;</span><br><span class="line">    matcher-&gt;<span class="built_in">match</span>(descriptors_1, descriptors_2, matches);</span><br><span class="line">    <span class="keyword">double</span> min_dist = <span class="number">10000</span>, max_dist = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> dist = matches[i].distance;</span><br><span class="line">        <span class="keyword">if</span> (dist &lt; min_dist)</span><br><span class="line">            min_dist = dist;</span><br><span class="line">        <span class="keyword">if</span> (dist &gt; max_dist)</span><br><span class="line">            max_dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当描述子之间的距离大于两倍的最小距离时,即认为匹配有误.但有时候最小距离会非常小,设置一个经验值30作为下限.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (matches[i].distance &lt;= <span class="built_in">max</span>(<span class="number">2</span> * min_dist, <span class="number">30.0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            good_matches.<span class="built_in">push_back</span>(matches[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Mat img_goodmatch;</span></span><br><span class="line">    <span class="comment">// drawMatches(img_1, keypoints_1, img_2, keypoints_2, good_matches, img_goodmatch);</span></span><br><span class="line">    <span class="comment">// imshow(&quot;优化后匹配点对&quot;, img_goodmatch);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-估计两张图像间运动"><a href="#2-估计两张图像间运动" class="headerlink" title="2.估计两张图像间运动"></a>2.估计两张图像间运动</h2><p>当我们确定两帧图像之间的特征点以及匹配，我们就可以根据良好的匹配点来估计相机的运动，这里也是封装成了一个函数。可以使用本质矩阵、基础矩阵抑或单应矩阵，它们都是封装好的函数，传参即可，不需要个人写实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相机位姿估计</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pose_estimation_2d2d</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    std::vector&lt;KeyPoint&gt; &amp;keypoints_1,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::vector&lt;KeyPoint&gt; &amp;keypoints_2,</span></span></span><br><span class="line"><span class="params"><span class="function">    std::vector&lt;DMatch&gt; &amp;good_matches,</span></span></span><br><span class="line"><span class="params"><span class="function">    Mat &amp;R, Mat &amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 相机内参,TUM Freiburg2</span></span><br><span class="line">    Mat K = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">520.9</span>, <span class="number">0</span>, <span class="number">325.1</span>, <span class="number">0</span>, <span class="number">521.0</span>, <span class="number">249.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 把匹配点转换为vector&lt;Point2f&gt;的形式</span></span><br><span class="line">    vector&lt;Point2f&gt; points1;</span><br><span class="line">    vector&lt;Point2f&gt; points2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)good_matches.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        points1.<span class="built_in">push_back</span>(keypoints_1[good_matches[i].queryIdx].pt);</span><br><span class="line">        points2.<span class="built_in">push_back</span>(keypoints_2[good_matches[i].trainIdx].pt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-- 计算基础矩阵</span></span><br><span class="line">    Mat fundamental_matrix;</span><br><span class="line">    fundamental_matrix = <span class="built_in">findFundamentalMat</span>(points1, points2, CV_FM_8POINT); <span class="comment">// 八点法求基础矩阵</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;基础矩阵F：\n&quot;</span></span><br><span class="line">         &lt;&lt; fundamental_matrix &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 计算本质矩阵</span></span><br><span class="line">    <span class="function">Point2d <span class="title">principal_point</span><span class="params">(<span class="number">325.1</span>, <span class="number">249.7</span>)</span></span>; <span class="comment">//相机光心(cx cy), TUM dataset标定值</span></span><br><span class="line">    <span class="keyword">double</span> focal_length = <span class="number">521</span>;             <span class="comment">//相机焦距(fx fy), TUM dataset标定值</span></span><br><span class="line">    Mat essential_matrix = <span class="built_in">findEssentialMat</span>(points1, points2, focal_length, principal_point);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;本质矩阵E：\n&quot;</span></span><br><span class="line">         &lt;&lt; essential_matrix &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 计算单应矩阵</span></span><br><span class="line">    <span class="comment">// RANSAC表示基于RANSAC的鲁棒算法</span></span><br><span class="line">    <span class="comment">// ransacReprojThreshold将点对视为内点的最大允许重投影错误阈值（仅用于RANSAC和RHO方法）一般1-10</span></span><br><span class="line">    Mat homography_matrix = <span class="built_in">findHomography</span>(points1, points2, RANSAC, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;单应矩阵H：\n&quot;</span></span><br><span class="line">         &lt;&lt; homography_matrix &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-- 从本质矩阵中恢复旋转和平移信息.</span></span><br><span class="line">    <span class="built_in">recoverPose</span>(essential_matrix, points1, points2, R, t, focal_length, principal_point);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;R: \n&quot;</span></span><br><span class="line">         &lt;&lt; R &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;t: \n&quot;</span></span><br><span class="line">         &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-验证对极约束"><a href="#3-验证对极约束" class="headerlink" title="3.验证对极约束"></a>3.验证对极约束</h2><p>上面可知：</p>
<script type="math/tex; mode=display">
x_2^{T}t^{\land}Rx_1=0</script><p>首先，要知道像素坐标转相机归一化坐标的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Point2d <span class="title">pixel2cam</span><span class="params">(<span class="keyword">const</span> Point2d &amp;p, <span class="keyword">const</span> Mat &amp;K)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 归一化坐标Pc(X/Z,Y/Z,1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point2d</span>(</span><br><span class="line">        (p.x - K.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">2</span>)) / K.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), <span class="comment">// (u-cx)/fx = X/Z</span></span><br><span class="line">        (p.y - K.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">2</span>)) / K.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">1</span>)  <span class="comment">// (v-cy)/fy = Y/Z</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此可以获得两个像素点的归一化坐标$(\frac{X}{Z},\frac{Y}{Z},1)$</p>
<p>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Point2d pt1 = <span class="built_in">pixel2cam</span>(keypoints_1[m.queryIdx].pt, K); <span class="comment">// keypoints_1[m.queryIdx].pt为像素坐标，K为相机内参矩阵</span></span><br><span class="line">Mat y1 = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">1</span>) &lt;&lt; pt1.x, pt1.y, <span class="number">1</span>);       <span class="comment">// y1=(X/Z, Y/Z, 1) 相机归一化坐标</span></span><br><span class="line">Point2d pt2 = <span class="built_in">pixel2cam</span>(keypoints_2[m.trainIdx].pt, K);</span><br><span class="line">Mat y2 = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">1</span>) &lt;&lt; pt2.x, pt2.y, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>获得两个像素的归一化坐标之后，使用$x_2^{T}t^{\land}Rx_1=0$，进行验证：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Mat d = y2.<span class="built_in">t</span>() * t_x * R * y1; <span class="comment">//  y2.t()表示y2的转置，t_x表示t^</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;epipolar constraint = &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>这仅仅是一对像素点，最终我们会发现良好的匹配点一共有79对，因此需要写一个循环</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************</span></span><br><span class="line"><span class="comment">* 3.验证对极约束</span></span><br><span class="line"><span class="comment">**************/</span></span><br><span class="line">Mat K = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">520.9</span>, <span class="number">0</span>, <span class="number">325.1</span>, <span class="number">0</span>, <span class="number">521.0</span>, <span class="number">249.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (DMatch m : good_matches)</span><br><span class="line">&#123;</span><br><span class="line">    Point2d pt1 = <span class="built_in">pixel2cam</span>(keypoints_1[m.queryIdx].pt, K); <span class="comment">// keypoints_1[m.queryIdx].pt为像素坐标，K为相机内参矩阵</span></span><br><span class="line">    Mat y1 = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">1</span>) &lt;&lt; pt1.x, pt1.y, <span class="number">1</span>);       <span class="comment">// y1=(X/Z, Y/Z, 1) 相机归一化坐标</span></span><br><span class="line">    Point2d pt2 = <span class="built_in">pixel2cam</span>(keypoints_2[m.trainIdx].pt, K);</span><br><span class="line">    Mat y2 = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">1</span>) &lt;&lt; pt2.x, pt2.y, <span class="number">1</span>);</span><br><span class="line">    Mat d = y2.<span class="built_in">t</span>() * t_x * R * y1; <span class="comment">//  y2.t()表示y2的转置，t_x表示t^</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;epipolar constraint = &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><p>主函数，其中调用的方法，前文已经列出</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/features2d/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/calib3d/calib3d.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入相邻两帧的图像&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读入图像</span></span><br><span class="line">    Mat img_1 = <span class="built_in">imread</span>(argv[<span class="number">1</span>], CV_LOAD_IMAGE_COLOR);</span><br><span class="line">    Mat img_2 = <span class="built_in">imread</span>(argv[<span class="number">2</span>], CV_LOAD_IMAGE_COLOR);</span><br><span class="line"></span><br><span class="line">    std::vector&lt;KeyPoint&gt; keypoints_1, keypoints_2;</span><br><span class="line">    vector&lt;DMatch&gt; good_matches;</span><br><span class="line">    <span class="comment">/**************</span></span><br><span class="line"><span class="comment">     * 1.特征匹配</span></span><br><span class="line"><span class="comment">     **************/</span></span><br><span class="line">    <span class="built_in">find_feature_matches</span>(img_1, img_2, keypoints_1, keypoints_2, good_matches);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一共找到了&quot;</span> &lt;&lt; good_matches.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;对匹配点&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">/**************</span></span><br><span class="line"><span class="comment">     * 2.估计两张图像间运动</span></span><br><span class="line"><span class="comment">     **************/</span></span><br><span class="line">    Mat R, t;</span><br><span class="line">    <span class="built_in">pose_estimation_2d2d</span>(keypoints_1, keypoints_2, good_matches, R, t);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证E=t^R*scale</span></span><br><span class="line">    Mat t_x = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">0</span>, -t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2.0</span>), t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">               t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>, <span class="number">0</span>), <span class="number">0</span>, -t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>) - t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">0</span>), t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;t^R: \n&quot;</span></span><br><span class="line">         &lt;&lt; t_x * R &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**************</span></span><br><span class="line"><span class="comment">     * 3.验证对极约束</span></span><br><span class="line"><span class="comment">     **************/</span></span><br><span class="line">    Mat K = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">520.9</span>, <span class="number">0</span>, <span class="number">325.1</span>, <span class="number">0</span>, <span class="number">521.0</span>, <span class="number">249.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (DMatch m : good_matches)</span><br><span class="line">    &#123;</span><br><span class="line">        Point2d pt1 = <span class="built_in">pixel2cam</span>(keypoints_1[m.queryIdx].pt, K); <span class="comment">// keypoints_1[m.queryIdx].pt为像素坐标，K为相机内参矩阵</span></span><br><span class="line">        Mat y1 = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">1</span>) &lt;&lt; pt1.x, pt1.y, <span class="number">1</span>);       <span class="comment">// y1=(X/Z, Y/Z, 1) 相机归一化坐标</span></span><br><span class="line">        Point2d pt2 = <span class="built_in">pixel2cam</span>(keypoints_2[m.trainIdx].pt, K);</span><br><span class="line">        Mat y2 = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">1</span>) &lt;&lt; pt2.x, pt2.y, <span class="number">1</span>);</span><br><span class="line">        Mat d = y2.<span class="built_in">t</span>() * t_x * R * y1; <span class="comment">//  y2.t()表示y2的转置，t_x表示t^</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;epipolar constraint = &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( pose_estimation_2d2d )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span> )</span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14 -O3&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>( OpenCV <span class="number">3.1</span> REQUIRED )</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>( </span><br><span class="line">    <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> </span><br><span class="line">    <span class="string">&quot;/usr/include/eigen3/&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add_executable( pose_estimation_2d2d pose_estimation_2d2d.cpp extra.cpp ) # use this if in OpenCV2 </span></span><br><span class="line"><span class="keyword">add_executable</span>( pose_estimation_2d2d pose_estimation_2d2d.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( pose_estimation_2d2d <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>
<h3 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一共找到了79对匹配点</span><br><span class="line">基础矩阵F：</span><br><span class="line">[4.544437503937326e-06, 0.0001333855576988952, -0.01798499246457619;</span><br><span class="line"> -0.0001275657012959839, 2.266794804637672e-05, -0.01416678429258694;</span><br><span class="line"> 0.01814994639952877, 0.004146055871509035, 1]</span><br><span class="line">本质矩阵E：</span><br><span class="line">[0.01097677480088526, 0.2483720528258777, 0.03167429207291153;</span><br><span class="line"> -0.2088833206039177, 0.02908423961781584, -0.6744658838357441;</span><br><span class="line"> 0.008286777636447118, 0.6614041624098427, 0.01676523772725936]</span><br><span class="line">单应矩阵H：</span><br><span class="line">[0.9261214281175537, -0.1445322024509824, 33.26921085699328;</span><br><span class="line"> 0.04535424464910424, 0.9386696693816731, 8.570979966717406;</span><br><span class="line"> -1.006197561051869e-05, -3.008140280167741e-05, 0.9999999999999999]</span><br><span class="line">R: </span><br><span class="line">[0.9969387384754708, -0.05155574188737422, 0.05878058527591362;</span><br><span class="line"> 0.05000441581290405, 0.998368531736214, 0.02756507279306545;</span><br><span class="line"> -0.06010582439453526, -0.02454140006844053, 0.9978902793175882]</span><br><span class="line">t: </span><br><span class="line">[-0.9350802885437915;</span><br><span class="line"> -0.03514646275858852;</span><br><span class="line"> 0.3526890700495534]</span><br><span class="line">t^R: </span><br><span class="line">[-0.01552350379276751, -0.3512511256212342, -0.04479421342842761;</span><br><span class="line"> 0.2932931178326273, -0.04199386952278789, 0.9889111138164588;</span><br><span class="line"> -0.992323587628662, 0.0236673579316946, 0.942925712677014]</span><br><span class="line">epipolar constraint = [0.6796225931993222]</span><br><span class="line">epipolar constraint = [1.041980822107436]</span><br><span class="line">........</span><br><span class="line">epipolar constraint = [1.014767775015567]</span><br><span class="line">epipolar constraint = [1.257231546320262]</span><br><span class="line">epipolar constraint = [1.000924219722595]</span><br><span class="line">epipolar constraint = [0.8732996303495971]</span><br></pre></td></tr></table></figure>
<h1 id="使用三角测量"><a href="#使用三角测量" class="headerlink" title="使用三角测量"></a>使用三角测量</h1><p>上文的对极约束求解相机运动存在尺度不确定性：</p>
<blockquote>
<p>由于 E 本身具有尺度等价性，它分解得到的 t, R 也有一个尺度等价性。而 R ∈ SO(3) 自身具有约束，所以我们认为 t 具有一个尺度。换言之，在分解过程中，对 t 乘以任意非零常数，分解都是成立的。因此，我们通常把 t 进行归一化，让它的长度等于 1。</p>
</blockquote>
<p>这也是由于单目相机本身的缺点，在单目 SLAM 中，仅通过单张图像无法获得像素的深度信息，我们需要通过三角测量（Triangulation）（或三角化）的方法来估计地图点的深度。</p>
<p><img src="/2022/03/24/%E5%AF%B9%E6%9E%81%E7%BA%A6%E6%9D%9F%E6%B1%82%E8%A7%A3%E7%9B%B8%E6%9C%BA%E8%BF%90%E5%8A%A8/image-20220325110908224.png" alt="image-20220325110908224"></p>
<p>按照对极几何中的定义，设 $x_1 , x_2 $为两个特征点的归一化坐标，满足：</p>
<script type="math/tex; mode=display">
\left\{
\begin{align}
s_1p_1&=KP,\\ s_2p_2&=K(RP+t) 
\end{align}
\right.</script><script type="math/tex; mode=display">
\left\{
\begin{align}
x_1 = K^{-1}p_1 \\
x_2 = K^{-1}p_2
\end{align}
\right.</script><p>将$p_1,p_2$换成$x_1,x_2$:</p>
<script type="math/tex; mode=display">
\left\{
\begin{align}
s_1Kx_1&=KP,\\ s_2Kx_2&=K(RP+t) 
\end{align}
\right.</script><p>因此，$x_1,x_2$的关系满足：</p>
<script type="math/tex; mode=display">
s_2x_2= s_1Rx_1+t</script><p>我们已经知道了 $R, t$，想要求解的是两个特征点的深度 $s_1 , s_2$ 。当然这两个深度是可以分开求的，比方说先来看 $s_1$ 。如果我要算 $s_1 $，那么先对上式两侧左乘一个 $x^{\land}_2$</p>
<script type="math/tex; mode=display">
s_2x^{\land}_2x_2= s_1x^{\land}_2Rx_1+x^{\land}_2t\\
s_1x^{\land}_2Rx_1+x^{\land}_2t=0 \tag{i}</script><p>这是一个关于$s_1$的方程，可以求得$s_1$的值，于是，我们就得到了两个帧下的点的深度，确定了它们的空间坐标。当然，由于噪声的存在，我们估得的 $R, t$，不一定精确使式$(i)$为零，所以更常见的做法求<strong>最小二乘解</strong>,而不是零解。</p>
<p>同样的，三角测量是在特征匹配以及估计两张图像间的运动的基础上进行的。之前我们已经获得了良好的匹配点，并通过本质矩阵求得相机的位姿$R,t$，在此基础上进行三角测量。</p>
<p>三角测量的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">triangulation</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> std::vector&lt;KeyPoint&gt; &amp;keypoints_1,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> std::vector&lt;KeyPoint&gt; &amp;keypoints_2,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> std::vector&lt;DMatch&gt; &amp;matches,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> Mat &amp;R, <span class="keyword">const</span> Mat &amp;t,</span></span></span><br><span class="line"><span class="params"><span class="function">    vector&lt;Point3d&gt; &amp;points)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    Mat T1 =</span><br><span class="line">        (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; </span><br><span class="line">         <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    Mat T2 =</span><br><span class="line">        (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; </span><br><span class="line">         R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">1</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">2</span>), t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">         R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">0</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">1</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">2</span>), t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">         R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>, <span class="number">0</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>, <span class="number">1</span>), R.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>, <span class="number">2</span>), t.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">    Mat K =</span><br><span class="line">        (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; </span><br><span class="line">         <span class="number">520.9</span>, <span class="number">0</span>,      <span class="number">325.1</span>,</span><br><span class="line">         <span class="number">0</span>,     <span class="number">521.0</span>,  <span class="number">249.7</span>,</span><br><span class="line">         <span class="number">0</span>,     <span class="number">0</span>,      <span class="number">1</span>);</span><br><span class="line">    vector&lt;Point2f&gt; pts_1, pts_2;</span><br><span class="line">    <span class="keyword">for</span> (DMatch m : matches)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将像素坐标转换至相机坐标</span></span><br><span class="line">        pts_1.<span class="built_in">push_back</span>( <span class="built_in">pixel2cam</span>(keypoints_1[m.queryIdx].pt,K) );</span><br><span class="line">        pts_2.<span class="built_in">push_back</span>( <span class="built_in">pixel2cam</span>(keypoints_2[m.trainIdx].pt,K) );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用三角化函数</span></span><br><span class="line">    Mat pts_4d;</span><br><span class="line">    cv::<span class="built_in">triangulatePoints</span>(T1, T2, pts_1, pts_2, pts_4d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换成非齐次坐标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pts_4d.cols; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat x = pts_4d.<span class="built_in">col</span>(i);</span><br><span class="line">        x /= x.at&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>,<span class="number">0</span>);<span class="comment">// 归一化</span></span><br><span class="line">        <span class="function">Point3d <span class="title">p</span><span class="params">(x.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>,<span class="number">0</span>), x.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>,<span class="number">0</span>), x.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line">        points.<span class="built_in">push_back</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入相邻两帧的图片！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读入图像</span></span><br><span class="line">    Mat img_1 = <span class="built_in">imread</span>(argv[<span class="number">1</span>], CV_LOAD_IMAGE_COLOR);</span><br><span class="line">    Mat img_2 = <span class="built_in">imread</span>(argv[<span class="number">2</span>], CV_LOAD_IMAGE_COLOR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.特征提取与匹配</span></span><br><span class="line">    vector&lt;KeyPoint&gt; keypoints_1, keypoints_2;</span><br><span class="line">    vector&lt;DMatch&gt; matches;</span><br><span class="line">    <span class="built_in">find_feature_matches</span>(img_1, img_2, keypoints_1, keypoints_2, matches);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一共找到了&quot;</span> &lt;&lt; matches.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;个良好的匹配点&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 2.估计两张图像间运动</span></span><br><span class="line">    Mat R, t;</span><br><span class="line">    <span class="built_in">pose_estimation_2d2d</span>(keypoints_1, keypoints_2, matches, R, t);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.三角化</span></span><br><span class="line">    vector&lt;Point3d&gt; points;</span><br><span class="line">    <span class="built_in">triangulation</span>(keypoints_1,keypoints_2,matches,R,t,points);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.验证三角化点与特征点的重投影关系</span></span><br><span class="line">    Mat K = ( Mat_&lt;<span class="keyword">double</span>&gt; ( <span class="number">3</span>,<span class="number">3</span> ) &lt;&lt; <span class="number">520.9</span>, <span class="number">0</span>, <span class="number">325.1</span>, <span class="number">0</span>, <span class="number">521.0</span>, <span class="number">249.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matches.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;--------第[&quot;</span>&lt;&lt; i+<span class="number">1</span> &lt;&lt;<span class="string">&quot;]个空间点-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        Point2d pt1_cam = <span class="built_in">pixel2cam</span>(keypoints_1[matches[i].queryIdx].pt, K);</span><br><span class="line">        <span class="function">Point2d <span class="title">pt1_cam_3d</span><span class="params">(points[i].x / points[i].z, points[i].y / points[i].z)</span></span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在第一帧时的像素坐标: &quot;</span> &lt;&lt; pt1_cam &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在第一帧时3D投影坐标：&quot;</span> &lt;&lt; pt1_cam_3d &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;深度d:&quot;</span> &lt;&lt; points[i].z &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 第二个图</span></span><br><span class="line">        Point2f pt2_cam = <span class="built_in">pixel2cam</span>(keypoints_2[matches[i].trainIdx].pt, K);</span><br><span class="line">        Mat pt2_trans = R*(Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>,<span class="number">1</span>) &lt;&lt; points[i].x, points[i].y, points[i].z) + t;</span><br><span class="line">        pt2_trans /= pt2_trans.at&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>,<span class="number">0</span>); <span class="comment">// 归一化</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在第二帧时的像素坐标: &quot;</span> &lt;&lt; pt2_cam &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;点在第二帧时3D投影坐标：&quot;</span> &lt;&lt; pt2_trans.<span class="built_in">t</span>() &lt;&lt; endl; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- Max dist : 94.000000 </span><br><span class="line">-- Min dist : 4.000000 </span><br><span class="line">一共找到了79个良好的匹配点</span><br><span class="line">基础矩阵F：</span><br><span class="line">[4.544437503937326e-06, 0.0001333855576988952, -0.01798499246457619;</span><br><span class="line"> -0.0001275657012959839, 2.266794804637672e-05, -0.01416678429258694;</span><br><span class="line"> 0.01814994639952877, 0.004146055871509035, 1]</span><br><span class="line">本质矩阵E：</span><br><span class="line">[0.01097677480088526, 0.2483720528258777, 0.03167429207291153;</span><br><span class="line"> -0.2088833206039177, 0.02908423961781584, -0.6744658838357441;</span><br><span class="line"> 0.008286777636447118, 0.6614041624098427, 0.01676523772725936]</span><br><span class="line">单应矩阵H：</span><br><span class="line">[0.9261214281175537, -0.1445322024509824, 33.26921085699328;</span><br><span class="line"> 0.04535424464910424, 0.9386696693816731, 8.570979966717406;</span><br><span class="line"> -1.006197561051869e-05, -3.008140280167741e-05, 0.9999999999999999]</span><br><span class="line">R: </span><br><span class="line">[0.9969387384754708, -0.05155574188737422, 0.05878058527591362;</span><br><span class="line"> 0.05000441581290405, 0.998368531736214, 0.02756507279306545;</span><br><span class="line"> -0.06010582439453526, -0.02454140006844053, 0.9978902793175882]</span><br><span class="line">t: </span><br><span class="line">[-0.9350802885437915;</span><br><span class="line"> -0.03514646275858852;</span><br><span class="line"> 0.3526890700495534]</span><br><span class="line">--------第[1]个空间点-----------</span><br><span class="line">点在第一帧时的像素坐标: [-0.0136303, -0.302687]</span><br><span class="line">点在第一帧时3D投影坐标：[-0.0136588, -0.302975]</span><br><span class="line">深度d:14.4036</span><br><span class="line">点在第二帧时的像素坐标: [-0.00403148, -0.270058]</span><br><span class="line">点在第二帧时3D投影坐标：[-0.004013293769641682, -0.2697748885145957, 1]</span><br><span class="line">--------第[2]个空间点-----------</span><br><span class="line">点在第一帧时的像素坐标: [-0.153772, -0.0742802]</span><br><span class="line">点在第一帧时3D投影坐标：[-0.153809, -0.0755175]</span><br><span class="line">深度d:9.63635</span><br><span class="line">点在第二帧时的像素坐标: [-0.179497, -0.0577735]</span><br><span class="line">点在第二帧时3D投影坐标：[-0.1795174494211173, -0.05658791842651693, 1]</span><br><span class="line">--------第[3]个空间点-----------</span><br><span class="line">点在第一帧时的像素坐标: [-0.468612, 0.119578]</span><br><span class="line">点在第一帧时3D投影坐标：[-0.46862, 0.119797]</span><br><span class="line">深度d:7.88393</span><br><span class="line">点在第二帧时的像素坐标: [-0.499328, 0.1119]</span><br><span class="line">点在第二帧时3D投影坐标：[-0.4993080966028579, 0.1116965292982101, 1]</span><br><span class="line">--------第[4]个空间点-----------</span><br><span class="line">点在第一帧时的像素坐标: [-0.226723, 0.0735125]</span><br><span class="line">点在第一帧时3D投影坐标：[-0.226723, 0.0735073]</span><br><span class="line">深度d:8.35771</span><br><span class="line">点在第二帧时的像素坐标: [-0.268958, 0.08119]</span><br><span class="line">点在第二帧时3D投影坐标：[-0.2689579480646592, 0.0811949362011327, 1]</span><br><span class="line">.......................(略)</span><br></pre></td></tr></table></figure>
<p>我们打印了每个空间点在两个相机坐标系下的投影坐标与像素坐标——相当于 P 的投影位置与看到的特征点位置。由于误差的存在，它们会有一些微小的差异。可以看到，误差的量级大约在小数点后第三位。可以看到，三角化特征点的距离大约为 14～15。但由于尺度不确定性，我们并不知道这里的 15 究竟是多少米。</p>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>在ORBSLAM中这三种方法的顺序：</p>
<ul>
<li><p>使用<strong>特征点检测和特征匹配</strong>，寻找比较好的匹配点。</p>
</li>
<li><p>由两张图像的匹配点，利用<strong>对极几何</strong>计算出$H$或者$F$矩阵，并从这两个矩阵中恢复出$R，t$</p>
</li>
<li><p>有了$R,t $就可以利用相机的位姿和两帧对应的像素坐标用<strong>三角测量</strong>计算出其对应的3D点坐标。至此，相机的位姿和对应的地图点就都有了，接下来正常跟踪即可；</p>
</li>
<li><p>跟踪丢失后，就需要回到原来机器人曾经经过的位置找匹配帧，找到的匹配帧是有其3D地图点和位姿的，用这些3D点和当前帧自己的像素坐标， PnP计算出当前帧相较于匹配帧的运动$R，t$</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_25458977/article/details/113675519">https://blog.csdn.net/qq_25458977/article/details/113675519</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>特征提取与匹配</title>
    <url>/2022/03/24/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>目前主流的几种图像特征在 OpenCV 开源图像库中都已经集成完毕，我们可以很方便地进行调用。下面我们来实际练习一下 OpenCV 的图像特征提取、计算和匹配的过程。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>素材：</p>
<p><img src="/2022/03/24/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/FE.PNG" alt="FE"></p>
<p>相关函数参考文档：<a href="http://www.opencv.org.cn/opencvdoc/2.3.2/html/modules/features2d/doc/features2d.html">features2d. 二维图像特征框架</a></p>
<p>特征匹配的步骤：</p>
<ul>
<li>初始化</li>
</ul>
<p>主要是定义特征点、描述子、特征检测方式(ORB、FAST、SIFT)等;</p>
<ul>
<li>提取ORB特征点</li>
</ul>
<p>主要根据创建的检测器检测角点位置，以及使用角点来计算描述子。</p>
<ul>
<li>匹配点对筛选</li>
</ul>
<p>对两幅图像中的BRIEF描述子进行匹配，可以使用$ Hamming$ 距离</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/features2d/features2d.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读入参数（相机相邻两帧的图片）</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请提供相邻两帧的图片！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取图像并保存为Mat数据类型</span></span><br><span class="line">    Mat img_1 = <span class="built_in">imread</span>(argv[<span class="number">1</span>], CV_LOAD_IMAGE_COLOR); <span class="comment">//存储的是三通道的彩色图片</span></span><br><span class="line">    Mat img_2 = <span class="built_in">imread</span>(argv[<span class="number">2</span>], CV_LOAD_IMAGE_COLOR);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 第一步：初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    std::vector&lt;KeyPoint&gt; keypoints_1, keypoints_2; <span class="comment">// 定义特征点</span></span><br><span class="line">    Mat descriptors_1, descriptors_2;               <span class="comment">// 定义描述子</span></span><br><span class="line">    <span class="comment">// FeatureDetetor 是虚类，通过定义FeatureDetector的对象</span></span><br><span class="line">    <span class="comment">// 可以使用多种特征检测方法。通过 create() 函数调用</span></span><br><span class="line">    Ptr&lt;FeatureDetector&gt; detector = ORB::<span class="built_in">create</span>();       <span class="comment">//创建ORB特征检测器</span></span><br><span class="line">    Ptr&lt;DescriptorExtractor&gt; descriptor = ORB::<span class="built_in">create</span>(); <span class="comment">//创建ORB特征描述子提取.</span></span><br><span class="line">    <span class="comment">//对于给定参数，创建特征描述子匹配(使用默认的构造函数).</span></span><br><span class="line">    Ptr&lt;DescriptorMatcher&gt; matcher = DescriptorMatcher::<span class="built_in">create</span>(<span class="string">&quot;BruteForce-Hamming&quot;</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 第二步：检测 Oriented FAST 角点位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    detector-&gt;<span class="built_in">detect</span>(img_1, keypoints_1);</span><br><span class="line">    detector-&gt;<span class="built_in">detect</span>(img_2, keypoints_2);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 第三步：根据角点位置计算 BRIEF 描述子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    descriptor-&gt;<span class="built_in">compute</span>(img_1, keypoints_1, descriptors_1);</span><br><span class="line">    descriptor-&gt;<span class="built_in">compute</span>(img_2, keypoints_2, descriptors_2);</span><br><span class="line"></span><br><span class="line">    Mat outimg1;</span><br><span class="line">    <span class="built_in">drawKeypoints</span>(img_1, keypoints_1, outimg1, Scalar::<span class="built_in">all</span>(<span class="number">-1</span>), DrawMatchesFlags::DEFAULT);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ORB特征点&quot;</span>, outimg1); <span class="comment">// 至此，已经成功提取ORB特征点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 第四步:对两幅图像中的BRIEF描述子进行匹配，使用 Hamming 距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// DMatch用于匹配特征关键点的特征描述子的类：查询特征描述子索引, 特征描述子索引, 训练图像索引, 以及不同特征描述子之间的距离.</span></span><br><span class="line">    vector&lt;DMatch&gt; matches;</span><br><span class="line">    matcher-&gt;<span class="built_in">match</span>(descriptors_1, descriptors_2, matches); <span class="comment">// 给定查询集合中的每个特征描述子，寻找最佳匹配.</span></span><br><span class="line"></span><br><span class="line">    Mat img_match;</span><br><span class="line">    <span class="built_in">drawMatches</span>(img_1, keypoints_1, img_2, keypoints_2, matches, img_match);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;所有匹配点对&quot;</span>, img_match);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 第五步:匹配点对筛选</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">double</span> min_dist = <span class="number">10000</span>, max_dist = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//找出所有匹配之间的最小距离和最大距离, 即是最相似的和最不相似的两组点之间的距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> dist = matches[i].distance;</span><br><span class="line">        <span class="keyword">if</span> (dist &lt; min_dist)</span><br><span class="line">            min_dist = dist;</span><br><span class="line">        <span class="keyword">if</span> (dist &gt; min_dist)</span><br><span class="line">            max_dist = dist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当描述子之间的距离大于两倍的最小距离时,即认为匹配有误.但有时候最小距离会非常小,设置一个经验值30作为下限.</span></span><br><span class="line">    std::vector&lt;DMatch&gt; good_matches;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; descriptors_1.rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (matches[i].distance &lt;= <span class="built_in">max</span>(<span class="number">2</span> * min_dist, <span class="number">30.0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            good_matches.<span class="built_in">push_back</span>(matches[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Mat img_goodmatch;</span><br><span class="line">    <span class="built_in">drawMatches</span>(img_1, keypoints_1, img_2, keypoints_2, good_matches, img_goodmatch);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;优化后匹配点对&quot;</span>, img_goodmatch);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( feature_extraction )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span> )</span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14 -O3&quot;</span> )</span><br><span class="line"><span class="keyword">find_package</span>( OpenCV <span class="number">3.1</span> REQUIRED )</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>( </span><br><span class="line">    <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> </span><br><span class="line">    <span class="string">&quot;/usr/include/eigen3/&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">add_executable</span>( feature_extraction feature_extraction.cpp  )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( feature_extraction <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>特征点检测</p>
<p><img src="/2022/03/24/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/outimg1.png" alt="outimg1"></p>
<p>所有匹配点对</p>
<p><img src="/2022/03/24/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/img_match.png" alt="img_match"></p>
<p>优化后匹配点对</p>
<p><img src="/2022/03/24/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/img_goodmatch.png" alt="img_goodmatch"></p>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用g2o拟合曲线</title>
    <url>/2022/03/23/%E4%BD%BF%E7%94%A8g2o%E6%8B%9F%E5%90%88%E6%9B%B2%E7%BA%BF/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>g2o（General Graphic Optimization，G2O）。它是一个基于图优化的库。图优化，是把优化问题表现成图（Graph）的一种方式。这里的图是图论意义上的图。一个图由若干个<strong>顶点（Vertex）</strong>，以及连接着这些节点的<strong>边（Edge）</strong>组成。进而，用<strong>顶点表示优化变量</strong>，用<strong>边表示误差项</strong>。最基本的图优化，是用图模型来表达一个非线性最小二乘的优化问题。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>编译与安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/RainerKuemmerle/g2o</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt-get install libqt4-dev qt4-qmake libqglviewer-dev libsuitesparse-dev libcxsparse3.1.2 libcholmod-dev</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> g2o</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>通过对曲线拟合的简单例子了解到了 g2o 库的调用流程</p>
<ol>
<li>自定义边、节点类继承自模板类，重新实现部分虚函数</li>
<li>初始化求解器，选择优化方法</li>
<li>构造图结构，往图中添加节点和边</li>
<li>调用函数进行求解</li>
</ol>
<h2 id="非线性拟合案例"><a href="#非线性拟合案例" class="headerlink" title="非线性拟合案例"></a>非线性拟合案例</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/base_vertex.h&gt;</span>     <span class="comment">// 顶点</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/base_unary_edge.h&gt;</span> <span class="comment">// 边</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/block_solver.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/solvers/dense/linear_solver_dense.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/optimization_algorithm_gauss_newton.h&gt;</span> <span class="comment">// GN</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/optimization_algorithm_levenberg.h&gt;</span>    <span class="comment">// LM</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/optimization_algorithm_dogleg.h&gt;</span>       <span class="comment">// DogLeg</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 曲线模型的顶点，模板参数：优化变量维度和数据类型   (节点为优化变量)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurveFittingVertex</span> :</span> <span class="keyword">public</span> g2o::BaseVertex&lt;<span class="number">3</span>, Eigen::Vector3d&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 结构体包含eigen成员必须进行宏定义 EIGEN_MAKE_ALIGNED_OPERATOR_NEW, 保证内存对齐</span></span><br><span class="line">    <span class="function">EIGEN_MAKE_ALIGNED_OPERATOR_NEW</span></span><br><span class="line"><span class="function">    <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setToOriginImpl</span><span class="params">()</span> <span class="comment">// 顶点重置函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _estimate &lt;&lt; <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">oplusImpl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> *update)</span> <span class="comment">// 顶点更新函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _estimate += Eigen::<span class="built_in">Vector3d</span>(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存盘和读盘：留空</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">read</span><span class="params">(istream &amp;in)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">write</span><span class="params">(ostream &amp;out)</span> <span class="keyword">const</span> </span>&#123;&#125; <span class="comment">// const不声明该类就是一个抽象类，不能进行实例化</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 误差模型 模板参数：观测值维度，类型，连接顶点类型   (边为误差项)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurveFittingEdge</span> :</span> <span class="keyword">public</span> g2o::BaseUnaryEdge&lt;<span class="number">1</span>, <span class="keyword">double</span>, CurveFittingVertex&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    EIGEN_MAKE_ALIGNED_OPERATOR_NEW</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">CurveFittingEdge</span>(<span class="keyword">double</span> x) : <span class="built_in">BaseUnaryEdge</span>(), _x(x) &#123;&#125; <span class="comment">// 初始化列表</span></span><br><span class="line">    <span class="comment">// 计算曲线模型误差</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">computeError</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> CurveFittingVertex *v = <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> CurveFittingVertex *&gt;(_vertices[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">const</span> Eigen::Vector3d abc = v-&gt;<span class="built_in">estimate</span>();</span><br><span class="line">        _error(<span class="number">0</span>, <span class="number">0</span>) = _measurement - std::<span class="built_in">exp</span>(<span class="built_in">abc</span>(<span class="number">0</span>, <span class="number">0</span>) * _x * _x + <span class="built_in">abc</span>(<span class="number">1</span>, <span class="number">0</span>) * _x + <span class="built_in">abc</span>(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存盘和读盘：留空</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">read</span><span class="params">(istream &amp;in)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">write</span><span class="params">(ostream &amp;out)</span> <span class="keyword">const</span> </span>&#123;&#125; <span class="comment">// const不声明该类就是一个抽象类，不能进行实例化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> _x; <span class="comment">// x 值， y 值为 _measurement</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">1.0</span>, b = <span class="number">2.0</span>, c = <span class="number">1.0</span>; <span class="comment">// 真实参数值</span></span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">100</span>;                      <span class="comment">// 数据点</span></span><br><span class="line">    <span class="keyword">double</span> w_sigma = <span class="number">1.0</span>;             <span class="comment">// 噪声Sigma值</span></span><br><span class="line">    cv::RNG rng;                      <span class="comment">// OpenCV随机数产生器</span></span><br><span class="line">    <span class="keyword">double</span> abc[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;        <span class="comment">// abc参数的估计值</span></span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">double</span>&gt; x_data, y_data;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;生成数据：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x = i / <span class="number">100.0</span>;</span><br><span class="line">        x_data.<span class="built_in">push_back</span>(x);</span><br><span class="line">        y_data.<span class="built_in">push_back</span>(<span class="built_in">exp</span>(a * x * x + b * x + c) + rng.<span class="built_in">gaussian</span>(w_sigma));</span><br><span class="line">        cout &lt;&lt; x_data[i] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y_data[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建图优化，先设定g2o</span></span><br><span class="line">    <span class="comment">// 每个误差项优化变量维度为3，误差值维度为1</span></span><br><span class="line">    <span class="keyword">typedef</span> g2o::BlockSolver&lt;g2o::BlockSolverTraits&lt;<span class="number">3</span>, <span class="number">1</span>&gt;&gt; Block;</span><br><span class="line">    <span class="comment">// 实例化线性方程求解器</span></span><br><span class="line">    Block::LinearSolverType *linearSolver = <span class="keyword">new</span> g2o::LinearSolverDense&lt;Block::PoseMatrixType&gt;();</span><br><span class="line">    <span class="comment">// 实例化矩阵块求解器</span></span><br><span class="line">    Block *solver_ptr = <span class="keyword">new</span> <span class="built_in">Block</span>(unique_ptr&lt;Block::LinearSolverType&gt;(linearSolver));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 梯度下降方法，从GN(高斯牛顿), LM（列文伯格）, DogLeg 中选</span></span><br><span class="line">    g2o::OptimizationAlgorithmGaussNewton *solver_gn = <span class="keyword">new</span> g2o::<span class="built_in">OptimizationAlgorithmGaussNewton</span>(unique_ptr&lt;Block&gt;(solver_ptr));</span><br><span class="line">    g2o::OptimizationAlgorithmLevenberg *solver_lm = <span class="keyword">new</span> g2o::<span class="built_in">OptimizationAlgorithmLevenberg</span>(unique_ptr&lt;Block&gt;(solver_ptr));</span><br><span class="line">    g2o::OptimizationAlgorithmDogleg *solver_dog = <span class="keyword">new</span> g2o::<span class="built_in">OptimizationAlgorithmDogleg</span>(unique_ptr&lt;Block&gt;(solver_ptr));</span><br><span class="line"></span><br><span class="line">    g2o::SparseOptimizer optimizer;    <span class="comment">// 图模型</span></span><br><span class="line">    optimizer.<span class="built_in">setAlgorithm</span>(solver_lm); <span class="comment">//设置求解器（使用LM方法）</span></span><br><span class="line">    optimizer.<span class="built_in">setVerbose</span>(<span class="literal">true</span>);        <span class="comment">// 打开调试输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往图中增加顶点</span></span><br><span class="line">    CurveFittingVertex *v = <span class="keyword">new</span> <span class="built_in">CurveFittingVertex</span>();</span><br><span class="line">    v-&gt;<span class="built_in">setEstimate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// 设置优化初始值</span></span><br><span class="line">    v-&gt;<span class="built_in">setId</span>(<span class="number">0</span>);                              <span class="comment">// 设置顶点ID</span></span><br><span class="line">    optimizer.<span class="built_in">addVertex</span>(v);                   <span class="comment">// 向稀疏优化器添加顶点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往图中增加边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        CurveFittingEdge *edge = <span class="keyword">new</span> <span class="built_in">CurveFittingEdge</span>(x_data[i]);</span><br><span class="line">        edge-&gt;<span class="built_in">setId</span>(i);</span><br><span class="line">        edge-&gt;<span class="built_in">setVertex</span>(<span class="number">0</span>, v);           <span class="comment">// 设置连接的顶点</span></span><br><span class="line">        edge-&gt;<span class="built_in">setMeasurement</span>(y_data[i]); <span class="comment">//观测数值</span></span><br><span class="line">        <span class="comment">// 信息矩阵：协方差矩阵的逆</span></span><br><span class="line">        edge-&gt;<span class="built_in">setInformation</span>(Eigen::Matrix&lt;<span class="keyword">double</span>, <span class="number">1</span>, <span class="number">1</span>&gt;::<span class="built_in">Identity</span>() * <span class="number">1</span> / (w_sigma * w_sigma));</span><br><span class="line">        optimizer.<span class="built_in">addEdge</span>(edge); <span class="comment">// 向稀疏优化器添加边</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行优化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; 开始优化：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    chrono::steady_clock::time_point t1 = chrono::steady_clock::<span class="built_in">now</span>(); <span class="comment">// 计时工具</span></span><br><span class="line"></span><br><span class="line">    optimizer.<span class="built_in">initializeOptimization</span>(); <span class="comment">// 设置优化初始值</span></span><br><span class="line">    optimizer.<span class="built_in">optimize</span>(<span class="number">100</span>);            <span class="comment">// 设置优化次数</span></span><br><span class="line"></span><br><span class="line">    chrono::steady_clock::time_point t2 = chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">    chrono::duration&lt;<span class="keyword">double</span>&gt; time_used = chrono::duration_cast&lt;chrono::duration&lt;<span class="keyword">double</span>&gt;&gt;(t2 - t1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;求解优化共使用了&quot;</span> &lt;&lt; time_used.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;秒&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出优化值</span></span><br><span class="line">    Eigen::Vector3d abc_estimate = v-&gt;<span class="built_in">estimate</span>(); <span class="comment">// 执行优化</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;估计模型为：&quot;</span> &lt;&lt; abc_estimate.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>CMakeList.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( g2o_curve_fitting )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span> )</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加cmake模块以使用ceres库</span></span><br><span class="line"><span class="keyword">list</span>( APPEND CMAKE_MODULE_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/cmake_modules )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找G2O</span></span><br><span class="line"><span class="keyword">find_package</span>( G2O REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( </span><br><span class="line">    <span class="variable">$&#123;G2O_INCLUDE_DIRS&#125;</span></span><br><span class="line">    <span class="string">&quot;/usr/include/eigen3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenCV</span></span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( curve_fitting g2o_curve_fitting.cpp )</span><br><span class="line"><span class="comment"># 与G2O和OpenCV链接</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( curve_fitting </span><br><span class="line">    <span class="variable">$&#123;OpenCV_LIBS&#125;</span></span><br><span class="line">    g2o_core g2o_stuff</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">生成数据：</span><br><span class="line"><span class="symbol">0 </span><span class="number">2.71828</span></span><br><span class="line"><span class="number">0.01</span> <span class="number">2.93161</span></span><br><span class="line"><span class="number">0.02</span> <span class="number">2.12942</span></span><br><span class="line">.......</span><br><span class="line"><span class="number">0.96</span> <span class="number">47.7941</span></span><br><span class="line"><span class="number">0.97</span> <span class="number">48.5931</span></span><br><span class="line"><span class="number">0.98</span> <span class="number">51.8487</span></span><br><span class="line"><span class="number">0.99</span> <span class="number">51.0258</span></span><br><span class="line"> 开始优化：</span><br><span class="line">iteration= <span class="number">0</span>     chi2= <span class="number">30373.727656</span>      time= <span class="number">7.3362</span>e-<span class="number">05</span>        cumTime= <span class="number">7.3362</span>e-<span class="number">05</span>     edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">699.050482</span>      levenbergIter= <span class="number">7</span></span><br><span class="line">iteration= <span class="number">1</span>     chi2= <span class="number">13336.948287</span>      time= <span class="number">4.4188</span>e-<span class="number">05</span>        cumTime= <span class="number">0.00011755</span>     edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">1864.134619</span>     levenbergIter= <span class="number">3</span></span><br><span class="line">iteration= <span class="number">2</span>     chi2= <span class="number">6946.262238</span>       time= <span class="number">3.8416</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000155966</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">1242.756412</span>     levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">3</span>     chi2= <span class="number">271.023143</span>        time= <span class="number">3.6174</span>e-<span class="number">05</span>        cumTime= <span class="number">0.00019214</span>     edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">414.252137</span>      levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">4</span>     chi2= <span class="number">118.903888</span>        time= <span class="number">3.7968</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000230108</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">138.084046</span>      levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">5</span>     chi2= <span class="number">113.568661</span>        time= <span class="number">3.7864</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000267972</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">46.028015</span>       levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">6</span>     chi2= <span class="number">107.476468</span>        time= <span class="number">3.5648</span>e-<span class="number">05</span>        cumTime= <span class="number">0.00030362</span>     edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">15.342672</span>       levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">7</span>     chi2= <span class="number">103.014521</span>        time= <span class="number">4.424</span>e-<span class="number">05</span>         cumTime= <span class="number">0.00034786</span>     edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">5.114224</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">8</span>     chi2= <span class="number">101.988349</span>        time= <span class="number">3.7035</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000384895</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">1.704741</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">9</span>     chi2= <span class="number">101.937388</span>        time= <span class="number">3.6393</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000421288</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">0.568247</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">10</span>    chi2= <span class="number">101.937021</span>        time= <span class="number">3.0743</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000452031</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">0.378831</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">11</span>    chi2= <span class="number">101.937020</span>        time= <span class="number">3.2616</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000484647</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">0.252554</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">12</span>    chi2= <span class="number">101.937020</span>        time= <span class="number">3.1629</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000516276</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">0.168370</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">13</span>    chi2= <span class="number">101.937020</span>        time= <span class="number">3.2006</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000548282</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">0.112246</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">14</span>    chi2= <span class="number">101.937020</span>        time= <span class="number">3.124</span>e-<span class="number">05</span>         cumTime= <span class="number">0.000579522</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">0.074831</span>        levenbergIter= <span class="number">1</span></span><br><span class="line">iteration= <span class="number">15</span>    chi2= <span class="number">101.937020</span>        time= <span class="number">5.3317</span>e-<span class="number">05</span>        cumTime= <span class="number">0.000632839</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">13391510.122618</span>         levenbergIter= <span class="number">8</span></span><br><span class="line">iteration= <span class="number">16</span>    chi2= <span class="number">101.937020</span>        time= <span class="number">3.736</span>e-<span class="number">05</span>         cumTime= <span class="number">0.000670199</span>    edges= <span class="number">100</span>      schur= <span class="number">0</span>        lambda= <span class="number">857056647.847525</span>        levenbergIter= <span class="number">3</span></span><br><span class="line">求解优化共使用了<span class="number">0.00163436</span>秒</span><br><span class="line">估计模型为：<span class="number">0.890912</span>   <span class="number">2.1719</span> <span class="number">0.943629</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Ceres拟合曲线</title>
    <url>/2022/03/23/%E4%BD%BF%E7%94%A8Ceres%E6%8B%9F%E5%90%88%E6%9B%B2%E7%BA%BF/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>Ceres solver 是谷歌开发的一款用于<a href="https://so.csdn.net/so/search?q=非线性&amp;spm=1001.2101.3001.7020">非线性</a>优化的库，在谷歌的开源激光雷达 slam 项目 cartographer 中被大量使用。Ceres 官网上的文档非常详细地介绍了其具体使用方法，相比于另外一个在 slam 中被广泛使用的图优化库 G2O，ceres 的文档可谓相当丰富详细。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>下载与编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ceres-solver/ceres-solver</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt-get install liblapack-dev libsuitesparse-dev libcxsparse3.1.2 libgflags-dev libgoogle-glog-dev libgtest-dev</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> ceres-solver</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="Ceres使用步骤："><a href="#Ceres使用步骤：" class="headerlink" title="Ceres使用步骤："></a>Ceres使用步骤：</h2><ul>
<li>（1）定义$Cost Function$ 模型</li>
</ul>
<p>代价函数，也就是寻优的目标式。这个部分需要使用仿函数$（functor）$这一技巧来实现，做法是定义一个$ cost function $的结构体，在结构体内重载（）运算符。</p>
<ul>
<li><p>（2）通过代价函数构建待求解的优化问题</p>
</li>
<li><p>（3）配置求解器参数并求解问题</p>
</li>
</ul>
<h2 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h2><h3 id="1-构建代价函数"><a href="#1-构建代价函数" class="headerlink" title="1.构建代价函数"></a>1.构建代价函数</h3><p>本案例中待优化的函数为：$f(x)=10-x$，我们需要寻找最优的$x$值是的函数$f(x)$最小，所以误差项为$10.0-x[0]$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一部分：构建代价函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CostFunctor</span> &#123;</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T* <span class="keyword">const</span> x, T* residual)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        residual[<span class="number">0</span>] = <span class="built_in">T</span>(<span class="number">10.0</span>) - x[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-构建寻优问题"><a href="#2-构建寻优问题" class="headerlink" title="2.构建寻优问题"></a>2.构建寻优问题</h3><p>首先，定义 Problem 类型的变量，然后将构建的代价函数添加到寻优问题中。实例化对象<code>AutoDiffCostFunction</code>将创建的代价函数结构体实例作为输入，自动生成其微分并且返回一个<code>CostFunction</code> 类型的接口。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二部分：构建寻优问题</span></span><br><span class="line">   Problem problem;</span><br><span class="line">   CostFunction* cost_function =</span><br><span class="line">   <span class="comment">// 使用自动求导入，第一个1是输出维度，即残差的维度，第二个1是输入维度，即待寻优参数x的维度</span></span><br><span class="line">           <span class="keyword">new</span> AutoDiffCostFunction&lt;CostFunctor, <span class="number">1</span>, <span class="number">1</span>&gt;(<span class="keyword">new</span> CostFunctor);</span><br><span class="line">   problem.<span class="built_in">AddResidualBlock</span>(cost_function, <span class="literal">NULL</span>, &amp;x); <span class="comment">//向问题中添加误差项，本问题比较简单，添加一个就行。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-配置并运行求解器"><a href="#3-配置并运行求解器" class="headerlink" title="3.配置并运行求解器"></a>3.配置并运行求解器</h3><p>为求解这个优化问题，我们需要做一些配置，需要创建一个 Option，配置一下求解器的配置，创建一个 Summary。最后调用 Solve 方法，求解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第三部分： 配置并运行求解器</span></span><br><span class="line">    Solver::Options options;</span><br><span class="line">    options.linear_solver_type = ceres::DENSE_QR; <span class="comment">//配置增量方程的解法</span></span><br><span class="line">    options.minimizer_progress_to_stdout = <span class="literal">true</span>;<span class="comment">//输出到cout</span></span><br><span class="line">    Solver::Summary summary;<span class="comment">//优化信息</span></span><br><span class="line">    <span class="built_in">Solve</span>(options, &amp;problem, &amp;summary);<span class="comment">//求解</span></span><br></pre></td></tr></table></figure>
<h3 id="4-输出结果"><a href="#4-输出结果" class="headerlink" title="4.输出结果"></a>4.输出结果</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::cout &lt;&lt; summary.<span class="built_in">BriefReport</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;<span class="comment">//输出优化的简要信息</span></span><br><span class="line">  <span class="comment">//最终结果</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;x : &quot;</span> &lt;&lt; initial_x</span><br><span class="line">            &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>输出日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iter      cost      cost_change  |gradient|   |step|    tr_ratio  tr_radius  ls_iter  iter_time  total_time</span><br><span class="line">   0  1.250000e+01    0.00e+00    5.00e+00   0.00e+00   0.00e+00  1.00e+04        0    1.41e-05    4.20e-05</span><br><span class="line">   1  1.249750e-07    1.25e+01    5.00e-04   5.00e+00   1.00e+00  3.00e+04        1    3.10e-05    1.18e-04</span><br><span class="line">   2  1.388518e-16    1.25e-07    1.67e-08   5.00e-04   1.00e+00  9.00e+04        1    3.81e-06    1.31e-04</span><br><span class="line">Ceres Solver Report: Iterations: 3, Initial cost: 1.250000e+01, Final cost: 1.388518e-16, Termination: CONVERGENCE</span><br><span class="line">x : 5 -&gt; 10</span><br></pre></td></tr></table></figure>
<p>整体代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ceres/ceres.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ceres;</span><br><span class="line"><span class="comment">//第一部分：构建代价函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CostFunctor</span> &#123;</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T* <span class="keyword">const</span> x, T* residual)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        residual[<span class="number">0</span>] = <span class="built_in">T</span>(<span class="number">10.0</span>) - x[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    google::<span class="built_in">InitGoogleLogging</span>(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻优参数x的初始值，为5</span></span><br><span class="line">    <span class="keyword">double</span> initial_x = <span class="number">5.0</span>;</span><br><span class="line">    <span class="keyword">double</span> x = initial_x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二部分：构建寻优问题</span></span><br><span class="line">    Problem problem;</span><br><span class="line">    CostFunction* cost_function =</span><br><span class="line">            <span class="keyword">new</span> AutoDiffCostFunction&lt;CostFunctor, <span class="number">1</span>, <span class="number">1</span>&gt;(<span class="keyword">new</span> CostFunctor); <span class="comment">//使用自动求导</span></span><br><span class="line">    problem.<span class="built_in">AddResidualBlock</span>(cost_function, <span class="literal">NULL</span>, &amp;x); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第三部分： 配置并运行求解器</span></span><br><span class="line">    Solver::Options options;</span><br><span class="line">    options.linear_solver_type = ceres::DENSE_QR; <span class="comment">//配置增量方程的解法</span></span><br><span class="line">    options.minimizer_progress_to_stdout = <span class="literal">true</span>;<span class="comment">//输出到cout</span></span><br><span class="line">    Solver::Summary summary;<span class="comment">//优化信息</span></span><br><span class="line">    <span class="built_in">Solve</span>(options, &amp;problem, &amp;summary);<span class="comment">//求解</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; summary.<span class="built_in">BriefReport</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;<span class="comment">//输出优化的简要信息</span></span><br><span class="line">    <span class="comment">//最终结果</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x : &quot;</span> &lt;&lt; initial_x</span><br><span class="line">              &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="非线性优化案例"><a href="#非线性优化案例" class="headerlink" title="非线性优化案例"></a>非线性优化案例</h2><p>使用$ Ceres $拟合曲线</p>
<p>假设有一条满足以下方程的曲线：</p>
<script type="math/tex; mode=display">
y=exp(ax^2+bx+c)+w</script><p>其中$ a, b, c $为曲线的参数，$w $为高斯噪声。我们故意选择了这样一个非线性模型，以使问题不至于太简单。现在，假设我们有$ N $个关于$ x, y$ 的观测数据点，想根据这些数据点求出曲线的参数。那么，可以求解下面的最小二乘问题以估计曲线参数：</p>
<script type="math/tex; mode=display">
\underset{a,b,c}{min}\frac{1}{2}\sum^{N}_{i=1}\parallel y_i-exp(ax^2_i+bx_i+c)\parallel^2</script><p>请注意，在这个问题中，待估计的变量是 $a, b, c$，而不是$ x$。我们写一个程序，先根据模型生成 $x, y$ 的真值，然后在真值中添加高斯分布的噪声。随后，使用 $Ceres $从带噪声的数据中拟合参数模型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ceres/ceres.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一部分：构建代价函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CURVE_FITTING_COST</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//结构体中的自定义构造函数，同时初始化x和y(使用构造函数初始化const值，我们必须使用初始化列表)</span></span><br><span class="line">    <span class="built_in">CURVE_FITTING_COST</span>(<span class="keyword">double</span> x, <span class="keyword">double</span> y) : _x(x), _y(y) &#123;&#125;</span><br><span class="line">    <span class="comment">// 残差的计算</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="comment">// const T* const abc模型参数，有3维</span></span><br><span class="line">    <span class="comment">// T* residual      // 残差</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T *<span class="keyword">const</span> abc, T *residual)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// y-exp(ax^2+bx+c)</span></span><br><span class="line">        residual[<span class="number">0</span>] = <span class="built_in">T</span>(_y) - ceres::<span class="built_in">exp</span>(abc[<span class="number">0</span>]* <span class="built_in">T</span>(_x)* <span class="built_in">T</span>(_x) + abc[<span class="number">1</span>] * <span class="built_in">T</span>(_x) + abc[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> _x, _y; <span class="comment">// x,y数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">1.0</span>, b = <span class="number">2.0</span>, c = <span class="number">1.0</span>; <span class="comment">// 真实参数值</span></span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">100</span>;                      <span class="comment">// 数据点</span></span><br><span class="line">    <span class="keyword">double</span> w_sigma = <span class="number">1.0</span>;             <span class="comment">// 噪声Sigma值</span></span><br><span class="line">    cv::RNG rng;                      <span class="comment">// OpenCV随机数产生器</span></span><br><span class="line">    <span class="keyword">double</span> abc[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;        <span class="comment">// abc参数的估计值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建存放x，y数据的容器</span></span><br><span class="line">    vector&lt;<span class="keyword">double</span>&gt; x_data, y_data;</span><br><span class="line">    <span class="comment">// 将生成100组的数据给容器</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;产生数据：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x = i / <span class="number">100.0</span>; <span class="comment">// x为0-1之间的100个数</span></span><br><span class="line">        x_data.<span class="built_in">push_back</span>(x);</span><br><span class="line">        y_data.<span class="built_in">push_back</span>(<span class="built_in">exp</span>(a * x * x + b * x + c) + rng.<span class="built_in">gaussian</span>(w_sigma));</span><br><span class="line">        cout &lt;&lt; x_data[i] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y_data[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 第二部分：构建寻优问题</span></span><br><span class="line">    ceres::Problem problem;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 向问题中添加误差项</span></span><br><span class="line">        problem.<span class="built_in">AddResidualBlock</span>(</span><br><span class="line">            <span class="comment">// 使用自动求导，模板参数：误差类型，输出维度，输入维度，维数要与前面struct中一致</span></span><br><span class="line">            <span class="comment">// 第一个1是输出维度，即残差的维度，第二个3是输入维度，即待寻优参数abc的维度</span></span><br><span class="line">            <span class="keyword">new</span> ceres::AutoDiffCostFunction&lt;CURVE_FITTING_COST, <span class="number">1</span>, <span class="number">3</span>&gt;</span><br><span class="line">                        (<span class="keyword">new</span> <span class="built_in">CURVE_FITTING_COST</span>(x_data[i], y_data[i])),</span><br><span class="line">            <span class="literal">nullptr</span>, <span class="comment">// 核函数，这里不使用，为空</span></span><br><span class="line">            abc);    <span class="comment">// 待估计参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三部分： 配置并运行求解器</span></span><br><span class="line">    ceres::Solver::Options options;               <span class="comment">// 这里有很多配置项可以填</span></span><br><span class="line">    options.linear_solver_type = ceres::DENSE_QR; <span class="comment">// 增量方程求解方法（QR）</span></span><br><span class="line">    options.minimizer_progress_to_stdout = <span class="literal">true</span>;  <span class="comment">// 输出到cout</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//优化信息</span></span><br><span class="line">    ceres::Solver::Summary summary;                                                                </span><br><span class="line">    chrono::steady_clock::time_point t1 = chrono::steady_clock::<span class="built_in">now</span>();<span class="comment">// 计时点t1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始优化</span></span><br><span class="line">    ceres::<span class="built_in">Solve</span>(options,&amp;problem,&amp;summary); <span class="comment">//求解!!!!</span></span><br><span class="line"></span><br><span class="line">    chrono::steady_clock::time_point t2 = chrono::steady_clock::<span class="built_in">now</span>();<span class="comment">// 计时点t2</span></span><br><span class="line">    chrono::duration&lt;<span class="keyword">double</span>&gt; time_used = chrono::duration_cast&lt;chrono::duration&lt;<span class="keyword">double</span>&gt;&gt;(t2 - t1); <span class="comment">// 统计用时</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;总计用时：&quot;</span> &lt;&lt; time_used.<span class="built_in">count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    cout &lt;&lt; summary.<span class="built_in">BriefReport</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;估计的a,b,c的值为：&quot;</span> ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : abc)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( ceres_curve_fitting )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span> )</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加cmake模块以使用ceres库</span></span><br><span class="line"><span class="keyword">list</span>( APPEND CMAKE_MODULE_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/cmake_modules )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找Ceres库并添加它的头文件</span></span><br><span class="line"><span class="keyword">find_package</span>( Ceres REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;CERES_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># OpenCV</span></span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( curve_fitting ceres_curve_fitting.cpp )</span><br><span class="line"><span class="comment"># 与Ceres和OpenCV链接</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( curve_fitting <span class="variable">$&#123;CERES_LIBRARIES&#125;</span> <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">产生数据：</span><br><span class="line">0 2.71828</span><br><span class="line">0.01 2.93161</span><br><span class="line">0.02 2.12942</span><br><span class="line">0.03 2.46037</span><br><span class="line">0.04 4.18814</span><br><span class="line">0.05 2.73368</span><br><span class="line">0.06 2.42751</span><br><span class="line">0.07 3.44729</span><br><span class="line">0.08 3.72543</span><br><span class="line">0.09 2.1358</span><br><span class="line">.....</span><br><span class="line">0.96 47.7941</span><br><span class="line">0.97 48.5931</span><br><span class="line">0.98 51.8487</span><br><span class="line">0.99 51.0258</span><br><span class="line">iter      cost      cost_change  |gradient|   |step|    tr_ratio  tr_radius  ls_iter  iter_time  total_time</span><br><span class="line">   0  1.824887e+04    0.00e+00    1.38e+03   0.00e+00   0.00e+00  1.00e+04        0    1.02e-04    1.95e-04</span><br><span class="line">   1  2.748700e+39   -2.75e+39    1.38e+03   7.67e+01  -1.52e+35  5.00e+03        1    1.02e-04    3.83e-04</span><br><span class="line">   2  2.429783e+39   -2.43e+39    1.38e+03   7.62e+01  -1.35e+35  1.25e+03        1    3.91e-05    4.59e-04</span><br><span class="line">   3  1.213227e+39   -1.21e+39    1.38e+03   7.30e+01  -6.73e+34  1.56e+02        1    3.29e-05    5.27e-04</span><br><span class="line">   4  1.852387e+37   -1.85e+37    1.38e+03   5.56e+01  -1.03e+33  9.77e+00        1    3.22e-05    5.87e-04</span><br><span class="line">   5  6.714689e+31   -6.71e+31    1.38e+03   2.96e+01  -3.85e+27  3.05e-01        1    3.22e-05    6.44e-04</span><br><span class="line">   6  9.500531e+12   -9.50e+12    1.38e+03   9.50e+00  -8.39e+08  4.77e-03        1    3.10e-05    7.00e-04</span><br><span class="line">   7  1.776982e+04    4.79e+02    1.83e+03   2.58e-01   1.18e+00  1.43e-02        1    1.14e-04    8.37e-04</span><br><span class="line">   8  1.599969e+04    1.77e+03    3.45e+03   5.53e-01   1.46e+00  4.29e-02        1    8.11e-05    9.54e-04</span><br><span class="line">   9  1.060557e+04    5.39e+03    7.62e+03   7.33e-01   1.68e+00  1.29e-01        1    1.30e-04    1.11e-03</span><br><span class="line">  10  3.669783e+03    6.94e+03    9.60e+03   5.25e-01   1.39e+00  3.86e-01        1    9.61e-05    1.24e-03</span><br><span class="line">  11  5.397541e+02    3.13e+03    5.00e+03   2.66e-01   1.12e+00  1.16e+00        1    8.20e-05    1.36e-03</span><br><span class="line">  12  1.484444e+02    3.91e+02    1.22e+03   8.46e-02   1.02e+00  3.48e+00        1    8.20e-05    1.48e-03</span><br><span class="line">  13  1.216815e+02    2.68e+01    3.76e+02   4.17e-02   1.01e+00  1.04e+01        1    7.39e-05    1.58e-03</span><br><span class="line">  14  9.290109e+01    2.88e+01    2.42e+02   9.10e-02   1.01e+00  3.13e+01        1    1.57e-04    1.76e-03</span><br><span class="line">  15  6.674330e+01    2.62e+01    1.09e+02   1.33e-01   1.00e+00  9.39e+01        1    1.31e-04    1.93e-03</span><br><span class="line">  16  5.936574e+01    7.38e+00    2.14e+01   1.08e-01   9.94e-01  2.82e+02        1    1.39e-04    2.10e-03</span><br><span class="line">  17  5.653118e+01    2.83e+00    1.36e+01   1.57e-01   9.98e-01  8.45e+02        1    9.11e-05    2.25e-03</span><br><span class="line">  18  5.310764e+01    3.42e+00    8.50e+00   2.81e-01   9.89e-01  2.53e+03        1    7.58e-05    2.35e-03</span><br><span class="line">  19  5.125939e+01    1.85e+00    2.84e+00   2.98e-01   9.90e-01  7.60e+03        1    7.39e-05    2.45e-03</span><br><span class="line">  20  5.097693e+01    2.82e-01    4.34e-01   1.48e-01   9.95e-01  2.28e+04        1    7.41e-05    2.54e-03</span><br><span class="line">  21  5.096854e+01    8.39e-03    3.24e-02   2.87e-02   9.96e-01  6.84e+04        1    7.30e-05    2.64e-03</span><br><span class="line">总计用时：0.00273015</span><br><span class="line">Ceres Solver Report: Iterations: 22, Initial cost: 1.824887e+04, Final cost: 5.096854e+01, Termination: CONVERGENCE</span><br><span class="line">估计的a,b,c的值为：0.891943 2.17039 0.944142 </span><br></pre></td></tr></table></figure>
<p>从 Ceres 给出的优化过程中可以看到，整体误差从 18248 左右下降到了 50.9，并且梯度也是越来越小。在迭代 22 次后算法收敛，最后的估计值为：</p>
<script type="math/tex; mode=display">
a=0.891943, b=2.17039, c=0.944142</script><p>与真实值比较接近。</p>
<p><img src="/2022/03/23/%E4%BD%BF%E7%94%A8Ceres%E6%8B%9F%E5%90%88%E6%9B%B2%E7%BA%BF/Ceres.PNG" alt="Ceres"></p>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>拼接点云(PCL库)</title>
    <url>/2022/03/23/%E6%8B%BC%E6%8E%A5%E7%82%B9%E4%BA%91-PCL%E5%BA%93/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>程序提供了五张 RGB-D 图像，并且知道了每个图像的内参和外参。根据 RGB-D 图像和相机内参，我们可以计算任何一个像素在相机坐标系下的位置。同时，根据相机位姿，又能计算这些像素在世界坐标系下的位置。如果把所有像素的空间坐标都求出来，相当于构建一张类似于地图的东西。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>pose.txt 文件给出了五张图像的相机位姿（以 $T_{wc} $形式）。位姿记录的形式是平移向量加旋转四元数：<br>$[x, y, z, q_x , q_y , q_z , q_w ]$,其中 $q_w $是四元数的实部。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-0.228993 0.00645704 0.0287837 -0.0004327 -0.113131 -0.0326832 0.993042</span><br><span class="line">-0.50237 -0.0661803 0.322012 -0.00152174 -0.32441 -0.0783827 0.942662</span><br><span class="line">-0.970912 -0.185889 0.872353 -0.00662576 -0.278681 -0.0736078 0.957536</span><br><span class="line">-1.41952 -0.279885 1.43657 -0.00926933 -0.222761 -0.0567118 0.973178</span><br><span class="line">-1.55819 -0.301094 1.6215 -0.02707 -0.250946 -0.0412848 0.966741</span><br></pre></td></tr></table></figure>
<p>案例主要完成两件事：</p>
<p>(1). 根据内参计算一对 RGB-D 图像对应的点云；<br>(2). 根据各张图的相机位姿（也就是外参），把点云加起来，组成地图。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 拼接点云(PCL库)</span><br><span class="line">tags: [实践]</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">comments: <span class="literal">true</span></span><br><span class="line">mathjax: <span class="literal">true</span></span><br><span class="line">categories: SLAM十四讲</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123;%cq%&#125;</span><br><span class="line"></span><br><span class="line">程序提供了五张 RGB-D 图像，并且知道了每个图像的内参和外参。根据 RGB-D 图像和相机内参，我们可以计算任何一个像素在相机坐标系下的位置。同时，根据相机位姿，又能计算这些像素在世界坐标系下的位置。如果把所有像素的空间坐标都求出来，相当于构建一张类似于地图的东西。</span><br><span class="line"></span><br><span class="line">&#123;%endcq%&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">pose.txt 文件给出了五张图像的相机位姿（以 $T_&#123;wc&#125; $形式）。位姿记录的形式是平移向量加旋转四元数：</span><br><span class="line">$[x, y, z, q_x , q_y , q_z , q_w ]$,其中 $q_w $是四元数的实部。</span><br><span class="line"></span><br><span class="line">```txt</span><br><span class="line"><span class="number">-0.228993</span> <span class="number">0.00645704</span> <span class="number">0.0287837</span> <span class="number">-0.0004327</span> <span class="number">-0.113131</span> <span class="number">-0.0326832</span> <span class="number">0.993042</span></span><br><span class="line"><span class="number">-0.50237</span> <span class="number">-0.0661803</span> <span class="number">0.322012</span> <span class="number">-0.00152174</span> <span class="number">-0.32441</span> <span class="number">-0.0783827</span> <span class="number">0.942662</span></span><br><span class="line"><span class="number">-0.970912</span> <span class="number">-0.185889</span> <span class="number">0.872353</span> <span class="number">-0.00662576</span> <span class="number">-0.278681</span> <span class="number">-0.0736078</span> <span class="number">0.957536</span></span><br><span class="line"><span class="number">-1.41952</span> <span class="number">-0.279885</span> <span class="number">1.43657</span> <span class="number">-0.00926933</span> <span class="number">-0.222761</span> <span class="number">-0.0567118</span> <span class="number">0.973178</span></span><br><span class="line"><span class="number">-1.55819</span> <span class="number">-0.301094</span> <span class="number">1.6215</span> <span class="number">-0.02707</span> <span class="number">-0.250946</span> <span class="number">-0.0412848</span> <span class="number">0.966741</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">案例主要完成两件事：</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>). 根据内参计算一对 RGB-D 图像对应的点云；</span><br><span class="line">(<span class="number">2</span>). 根据各张图的相机位姿（也就是外参），把点云加起来，组成地图。</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/format.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/point_types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pcl/io/pcd_io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;cv::Mat&gt; colorImgs, depthImgs; <span class="comment">// 彩色图和深度图</span></span><br><span class="line">    <span class="comment">// 定义相机位姿容器  用来存储相机位姿</span></span><br><span class="line">    vector&lt;Eigen::Isometry3d, Eigen::aligned_allocator&lt;Eigen::Isometry3d&gt;&gt; poses;</span><br><span class="line">    <span class="comment">// 读入五张图像的相机位姿（以 Twc 形式）</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;./pose.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fin)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;请在有pose.txt的目录下运行此程序&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读入五张图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">boost::format <span class="title">fmt</span><span class="params">(<span class="string">&quot;./%s/%d.%s&quot;</span>)</span></span>; <span class="comment">//图像文件格式</span></span><br><span class="line">        <span class="comment">// 读入彩色图放进容器中</span></span><br><span class="line">        colorImgs.<span class="built_in">push_back</span>(cv::<span class="built_in">imread</span>((fmt % <span class="string">&quot;color&quot;</span> % (i + <span class="number">1</span>) % <span class="string">&quot;png&quot;</span>).<span class="built_in">str</span>()));</span><br><span class="line">        <span class="comment">// 读入深度图放进容器中</span></span><br><span class="line">        depthImgs.<span class="built_in">push_back</span>(cv::<span class="built_in">imread</span>((fmt % <span class="string">&quot;depth&quot;</span> % (i + <span class="number">1</span>) % <span class="string">&quot;pgm&quot;</span>).<span class="built_in">str</span>(), <span class="number">-1</span>)); <span class="comment">// 使用-1读取原始图像</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读入pose中的位姿记录（位姿记录的形式是平移向量加旋转四元数）</span></span><br><span class="line">        <span class="keyword">double</span> data[<span class="number">7</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;d : data)</span><br><span class="line">            fin &gt;&gt; d;</span><br><span class="line">        <span class="function">Eigen::Quaterniond <span class="title">q</span><span class="params">(data[<span class="number">6</span>], data[<span class="number">3</span>], data[<span class="number">4</span>], data[<span class="number">5</span>])</span></span>; <span class="comment">// qw qx qy qz</span></span><br><span class="line">        <span class="function">Eigen::Isometry3d <span class="title">T</span><span class="params">(q)</span></span>;                                   <span class="comment">// 由四元数构造变换矩阵T</span></span><br><span class="line">        <span class="comment">// 平移</span></span><br><span class="line">        T.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])); <span class="comment">// x y z pretanslate 相当于左乘</span></span><br><span class="line">        <span class="comment">// 将位姿信息传入位姿容器</span></span><br><span class="line">        poses.<span class="built_in">push_back</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算点云并拼接</span></span><br><span class="line">    <span class="comment">// 相机内参</span></span><br><span class="line">    <span class="keyword">double</span> cx = <span class="number">325.5</span>;</span><br><span class="line">    <span class="keyword">double</span> cy = <span class="number">253.5</span>;</span><br><span class="line">    <span class="keyword">double</span> fx = <span class="number">518.0</span>;</span><br><span class="line">    <span class="keyword">double</span> fy = <span class="number">519.0</span>;</span><br><span class="line">    <span class="keyword">double</span> depthScale = <span class="number">1000.0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;正在将图像转换为点云...&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义点云使用的格式：这里用的是XYZRGB</span></span><br><span class="line">    <span class="keyword">typedef</span> pcl::PointXYZRGB PointT;</span><br><span class="line">    <span class="keyword">typedef</span> pcl::PointCloud&lt;PointT&gt; PointCloud;</span><br><span class="line">    <span class="comment">// 新建一个点云</span></span><br><span class="line">    <span class="function">PointCloud::Ptr <span class="title">pointCloud</span><span class="params">(<span class="keyword">new</span> PointCloud)</span></span>;</span><br><span class="line">    <span class="comment">// 循环每一张图片</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;张图像转换中&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cv::Mat color = colorImgs[i]; <span class="comment">// 读取彩色图</span></span><br><span class="line">        cv::Mat depth = depthImgs[i]; <span class="comment">// 读取对应的深度图</span></span><br><span class="line">        Eigen::Isometry3d T = poses[i]; <span class="comment">// 读入相机位姿</span></span><br><span class="line">        <span class="comment">// 将像素坐标转根据相机位姿换成世界坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; color.rows; v++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; color.cols; u++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">int</span> d = depth.ptr&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span>&gt;(v)[u]; <span class="comment">// 深度值</span></span><br><span class="line">                <span class="keyword">if</span> (d == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">// 为0表示没有测量到</span></span><br><span class="line">                Eigen::Vector3d point;</span><br><span class="line">                point[<span class="number">2</span>] = <span class="built_in"><span class="keyword">double</span></span>(d) / depthScale;   <span class="comment">// Z</span></span><br><span class="line">                point[<span class="number">0</span>] = (u - cx) * point[<span class="number">2</span>] / fx; <span class="comment">// X</span></span><br><span class="line">                point[<span class="number">1</span>] = (v - cy) * point[<span class="number">2</span>] / fy; <span class="comment">// Y</span></span><br><span class="line">                Eigen::Vector3d pointWorld = T * point; <span class="comment">// 得到世界坐标系下的点云</span></span><br><span class="line"></span><br><span class="line">                PointT p;</span><br><span class="line">                p.x = pointWorld[<span class="number">0</span>];</span><br><span class="line">                p.y = pointWorld[<span class="number">1</span>];</span><br><span class="line">                p.z = pointWorld[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                p.b = color.data[v * color.step + u * color.<span class="built_in">channels</span>()];</span><br><span class="line">                p.g = color.data[v * color.step + u * color.<span class="built_in">channels</span>() + <span class="number">1</span>];</span><br><span class="line">                p.r = color.data[v * color.step + u * color.<span class="built_in">channels</span>() + <span class="number">2</span>];</span><br><span class="line">                pointCloud-&gt;points.<span class="built_in">push_back</span>(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pointCloud-&gt;is_dense = <span class="literal">false</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;点云一共有&quot;</span> &lt;&lt; pointCloud-&gt;<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;个点。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    pcl::io::<span class="built_in">savePCDFileBinary</span>(<span class="string">&quot;myPCL.pcd&quot;</span>,*pointCloud);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">CMakeLists.txt</span><br><span class="line"></span><br><span class="line">```<span class="function">cmake</span></span><br><span class="line"><span class="function"><span class="title">cmake_minimum_required</span><span class="params">( VERSION <span class="number">2.8</span> )</span></span></span><br><span class="line"><span class="function"><span class="title">project</span><span class="params">( joinMap )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">( CMAKE_BUILD_TYPE Release )</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">( CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14&quot;</span> )</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(CMAKE_BUILD_TYPE Debug)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="meta"># opencv </span></span></span><br><span class="line"><span class="function"><span class="title">find_package</span><span class="params">( OpenCV REQUIRED )</span></span></span><br><span class="line"><span class="function"><span class="title">include_directories</span><span class="params">( $&#123;OpenCV_INCLUDE_DIRS&#125; )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="meta"># eigen </span></span></span><br><span class="line"><span class="function"><span class="title">include_directories</span><span class="params">( <span class="string">&quot;/usr/include/eigen3/&quot;</span> )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="meta"># pcl </span></span></span><br><span class="line"><span class="function"><span class="title">find_package</span><span class="params">( PCL REQUIRED COMPONENT common io )</span></span></span><br><span class="line"><span class="function"><span class="title">include_directories</span><span class="params">( $&#123;PCL_INCLUDE_DIRS&#125; )</span></span></span><br><span class="line"><span class="function"><span class="title">add_definitions</span><span class="params">( $&#123;PCL_DEFINITIONS&#125; )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">add_executable</span><span class="params">( joinMap joinMap.cpp )</span></span></span><br><span class="line"><span class="function"><span class="title">target_link_libraries</span><span class="params">( joinMap $&#123;OpenCV_LIBS&#125; $&#123;PCL_LIBRARIES&#125; )</span></span></span><br><span class="line"><span class="function">```</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">![2022-03-23_09-54]<span class="params">(./img/<span class="number">2022</span><span class="number">-03</span><span class="number">-23</span>_09<span class="number">-54.</span>png)</span></span></span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( joinMap )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE Release )</span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14&quot;</span> )</span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"></span><br><span class="line"><span class="comment"># opencv </span></span><br><span class="line"><span class="keyword">find_package</span>( OpenCV REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># eigen </span></span><br><span class="line"><span class="keyword">include_directories</span>( <span class="string">&quot;/usr/include/eigen3/&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># pcl </span></span><br><span class="line"><span class="keyword">find_package</span>( PCL REQUIRED COMPONENT common io )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;PCL_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">add_definitions</span>( <span class="variable">$&#123;PCL_DEFINITIONS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( joinMap joinMap.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( joinMap <span class="variable">$&#123;OpenCV_LIBS&#125;</span> <span class="variable">$&#123;PCL_LIBRARIES&#125;</span> )</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/%E6%8B%BC%E6%8E%A5%E7%82%B9%E4%BA%91-PCL%E5%BA%93/PCL.PNG" alt="PCL"></p>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用OpenCV操作图像</title>
    <url>/2022/03/22/%E4%BD%BF%E7%94%A8OpenCV%E6%93%8D%E4%BD%9C%E5%9B%BE%E5%83%8F/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>OpenCV 提供了大量的开源图像算法，是计算机视觉中使用极广的图像处理算法库。在ubuntu 下，你可以选择从源代码安装和只安装库文件两种方式。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>源代码安装：</p>
<p>从 <a href="http://opencv.org/downloads.html">http://opencv.org/downloads.html</a> 中下载，选择 OpenCV for Linux 版本即可</p>
<p>在编译之前，先来安装 OpenCV 的依赖项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libgtk2.0-dev libvtk5-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev libtbb-dev</span><br></pre></td></tr></table></figure>
<p>编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cnake ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>案例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取argv[1]指定的图像</span></span><br><span class="line">    cv::Mat image;</span><br><span class="line">    image = cv::<span class="built_in">imread</span>(argv[<span class="number">1</span>]); <span class="comment">// cv::imread函数读取指定路径下的图像</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据不存在,可能是文件不存在</span></span><br><span class="line">    <span class="keyword">if</span> (image.data == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cerr：输出到标准错误的ostream对象，常用于程序错误信息；</span></span><br><span class="line">        cerr &lt;&lt; <span class="string">&quot;文件&quot;</span> &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件顺利读取, 首先输出一些基本信息</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;图像的宽为：&quot;</span> &lt;&lt; image.cols</span><br><span class="line">         &lt;&lt; <span class="string">&quot;,高为：&quot;</span> &lt;&lt; image.rows</span><br><span class="line">         &lt;&lt; <span class="string">&quot;通道数为：&quot;</span> &lt;&lt; image.<span class="built_in">channels</span>() &lt;&lt; endl;</span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;image&quot;</span>, image); <span class="comment">// 用cv::imshow显示图像</span></span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);             <span class="comment">// 暂停程序,等待一个按键输入</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断image的类型</span></span><br><span class="line">    <span class="keyword">if</span> (image.<span class="built_in">type</span>() != CV_8UC1 &amp;&amp; image.<span class="built_in">type</span>() != CV_8UC3) <span class="comment">// 图像既不是单通道也不是三通道</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 图像类型不符合要求</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入一张彩色图或者灰度图&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历图像, 请注意以下遍历方式亦可使用于随机像素访问</span></span><br><span class="line">    <span class="comment">// 使用 std::chrono 来给算法计时</span></span><br><span class="line">    chrono::steady_clock::time_point t1 = chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> y = <span class="number">0</span>; y &lt; image.rows; y++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用cv::Mat::ptr获得图像的行指针</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *row_ptr = image.ptr&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(y); <span class="comment">// row_ptr是第y行的头指针</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> x = <span class="number">0</span>; x &lt; image.cols; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 访问位于 x,y 处的像素</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">char</span> *data_ptr = &amp;row_ptr[x * image.<span class="built_in">channels</span>()]; <span class="comment">// data_ptr 指向待访问的像素数据</span></span><br><span class="line">            <span class="comment">// 输出该像素的每个通道,如果是灰度图就只有一个通道</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != image.<span class="built_in">channels</span>(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">char</span> data = data_ptr[i]; <span class="comment">// data为I(x,y)第c个通道的值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chrono::steady_clock::time_point t2 = chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">    chrono::duration&lt;<span class="keyword">double</span>&gt; time_used = chrono::duration_cast&lt;chrono::duration&lt;<span class="keyword">double</span>&gt;&gt;(t2 - t1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历图像用时：&quot;</span> &lt;&lt; time_used.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; 秒。&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关于 cv::Mat 的拷贝</span></span><br><span class="line">    <span class="comment">// 直接赋值并不会拷贝数据,使用clone函数来拷贝数据</span></span><br><span class="line">    cv::Mat image_clone = image.<span class="built_in">clone</span>();</span><br><span class="line">    <span class="built_in">image_clone</span>(cv::<span class="built_in">Rect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>) ).<span class="built_in">setTo</span>(<span class="number">0</span>); <span class="comment">// 将左上角100*100的块置零</span></span><br><span class="line">    cv::<span class="built_in">imshow</span>(<span class="string">&quot;image_clone&quot;</span>,image_clone);</span><br><span class="line">    cv::<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cv::<span class="built_in">destroyAllWindows</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>CMakeLsits.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( imageBasics )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加c++ 14标准支持</span></span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找OpenCV库</span></span><br><span class="line"><span class="keyword">find_package</span>( OpenCV <span class="number">3</span> REQUIRED )</span><br><span class="line"><span class="comment"># 添加头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( imageBasics imageBasics.cpp )</span><br><span class="line"><span class="comment"># 链接OpenCV库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( imageBasics <span class="variable">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Sophus库</title>
    <url>/2022/03/22/%E4%BD%BF%E7%94%A8Sophus%E5%BA%93/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>Sophus是直接在 Eigen 基础上开发的，我们不需要要安装额外的依赖库。由于历史原因，Sophus 早期版本只提供了双精度的李群/李代数类。后续版本改写成了模板类。模板类的 Sophus 中可以使用不同精度的李群/李代数，但同时增加了使用难度。这里使用的是非模板类。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"><span class="comment">// 这里使用的是绝对路径，所以在CMakeLsits.txt里并没有包含Sophus库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;/home/alvin/workspace/slam_ws/slambook/3rdparty/Sophus/sophus/so3.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;/home/alvin/workspace/slam_ws/slambook/3rdparty/Sophus/sophus/se3.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 沿Z轴转45s度的旋转矩阵</span></span><br><span class="line">    Eigen::Matrix3d R = Eigen::<span class="built_in">AngleAxisd</span>(M_PI / <span class="number">4</span>, Eigen::<span class="built_in">Vector3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)).<span class="built_in">matrix</span>();</span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">3</span>); <span class="comment">//保留三位小数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;R = &quot;</span> &lt;&lt; endl</span><br><span class="line">         &lt;&lt; R &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造李群</span></span><br><span class="line">    <span class="function">Sophus::SO3 <span class="title">SO3_R</span><span class="params">(R)</span></span>;              <span class="comment">// Sophus::SO(3)可以直接从旋转矩阵构造</span></span><br><span class="line">    <span class="function">Sophus::SO3 <span class="title">SO3_v</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, M_PI / <span class="number">4</span>)</span></span>; <span class="comment">// 亦可从旋转向量构造</span></span><br><span class="line">    <span class="function">Eigen::Quaterniond <span class="title">q</span><span class="params">(R)</span></span>;           <span class="comment">// 或者四元数</span></span><br><span class="line">    <span class="function">Sophus::SO3 <span class="title">SO3_q</span><span class="params">(q)</span></span>;</span><br><span class="line">    <span class="comment">// 上述表达方式都是等价的</span></span><br><span class="line">    <span class="comment">// 输出SO(3)时，以so(3)形式输出</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;从旋转矩阵构造SO(3): &quot;</span> &lt;&lt; SO3_R &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;从旋转向量构造SO(3): &quot;</span> &lt;&lt; SO3_v &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;从四元数构造SO(3):&quot;</span> &lt;&lt; SO3_q &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用对数映射获得它的李代数</span></span><br><span class="line">    Eigen::Vector3d so3 = SO3_R.<span class="built_in">log</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;SO3的李代数so3：&quot;</span> &lt;&lt; so3.<span class="built_in">transpose</span>() &lt;&lt; endl; <span class="comment">// transpose纯粹是为了输出美观一些</span></span><br><span class="line">    <span class="comment">// hat 为向量到反对称矩阵</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;so3的反对称矩阵：\n&quot;</span></span><br><span class="line">         &lt;&lt; Sophus::SO3::<span class="built_in">hat</span>(so3) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 相对的，vee为反对称到向量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;反对称矩阵到其向量：\n&quot;</span></span><br><span class="line">         &lt;&lt; Sophus::SO3::<span class="built_in">vee</span>(Sophus::SO3::<span class="built_in">hat</span>(so3)).<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line">    ; <span class="comment">// transpose纯粹是为了输出美观一些</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增量扰动模型的更新</span></span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">update_so3</span><span class="params">(<span class="number">1e-4</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>; <span class="comment">//假设更新量为这么多</span></span><br><span class="line">    Sophus::SO3 SO3_update = Sophus::SO3::<span class="built_in">exp</span>(update_so3) * SO3_R;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;SO3 updated = \n&quot;</span></span><br><span class="line">         &lt;&lt; SO3_update &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;************SE*************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Eigen::Matrix3d R1 = Eigen::<span class="built_in">AngleAxisd</span>(M_PI / <span class="number">4</span>, Eigen::<span class="built_in">Vector3d</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="built_in">matrix</span>();</span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>; <span class="comment">// 沿X轴平移1</span></span><br><span class="line">    <span class="function">Sophus::SE3 <span class="title">SE3_Rt</span><span class="params">(R1, t)</span></span>;  <span class="comment">// 从R,t构造SE(3)</span></span><br><span class="line">    <span class="function">Sophus::SE3 <span class="title">SE3_qt</span><span class="params">(q, t)</span></span>;   <span class="comment">// 从q,t构造SE(3)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;从R,t构造的SE：\n&quot;</span></span><br><span class="line">         &lt;&lt; SE3_Rt &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;从q,t构造的SE：\n&quot;</span></span><br><span class="line">         &lt;&lt; SE3_qt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 李代数se(3) 是一个六维向量，方便起见先typedef一下</span></span><br><span class="line">    <span class="keyword">typedef</span> Eigen::Matrix&lt;<span class="keyword">double</span>, <span class="number">6</span>, <span class="number">1</span>&gt; Vector6d;</span><br><span class="line">    Vector6d se3 = SE3_Rt.<span class="built_in">log</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;se3:\n&quot;</span></span><br><span class="line">         &lt;&lt; se3.<span class="built_in">transpose</span>() &lt;&lt; endl; <span class="comment">// 观察输出，会发现在Sophus中，se(3)的平移在前，旋转在后.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同样的，有hat和vee两个算符</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;se3的反对称矩阵：\n&quot;</span> &lt;&lt; Sophus::SE3::<span class="built_in">hat</span>(se3) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;se3反对称矩阵到其向量：\n&quot;</span> &lt;&lt; Sophus::SE3::<span class="built_in">vee</span>( Sophus::SE3::<span class="built_in">hat</span>(se3) ).<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后，演示一下更新</span></span><br><span class="line">    Vector6d update_se3;<span class="comment">//更新量</span></span><br><span class="line">    update_se3.<span class="built_in">setZero</span>();</span><br><span class="line">    <span class="built_in">update_se3</span>(<span class="number">0</span>,<span class="number">0</span>) = <span class="number">1e-4</span>d;</span><br><span class="line">    Sophus::SE3 SE3_updated = Sophus::SE3::<span class="built_in">exp</span>(update_se3)*SE3_Rt;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;SE3 updated = \n&quot;</span> &lt;&lt; SE3_updated.<span class="built_in">matrix</span>() &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(useSophus)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;/usr/include/eigen3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(useSophus useSophus.cpp)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Eigen几何模块</title>
    <url>/2022/03/22/%E4%BD%BF%E7%94%A8Eigen%E5%87%A0%E4%BD%95%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>导入Eigen几何模块，可以使用四元数、欧拉角和旋转矩阵。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="comment">// Eigen 几何模块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Geometry&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************</span></span><br><span class="line"><span class="comment"> * 本程序演示了 Eigen 几何模块的使用方法</span></span><br><span class="line"><span class="comment"> ****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Eigen/Geometry 模块提供了各种旋转和平移的表示</span></span><br><span class="line">    <span class="comment">// 3D 旋转矩阵直接使用 Matrix3d 或 Matrix3f</span></span><br><span class="line">    Eigen::Matrix3d rotation_matrix = Eigen::Matrix3d::<span class="built_in">Identity</span>(); <span class="comment">// 定义一个单位阵</span></span><br><span class="line">    <span class="comment">// 旋转向量使用 AngleAxis, 它底层不直接是Matrix，但运算可以当作矩阵（因为重载了运算符）</span></span><br><span class="line">    <span class="function">Eigen::AngleAxisd <span class="title">rotation_vector</span><span class="params">(M_PI / <span class="number">4</span>, Eigen::Vector3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</span></span>; <span class="comment">//沿 Z 轴旋转 45 度</span></span><br><span class="line"></span><br><span class="line">    cout.<span class="built_in">precision</span>(<span class="number">3</span>); <span class="comment">// 保留三位小数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;rotation matrix =\n&quot;</span></span><br><span class="line">         &lt;&lt; rotation_vector.<span class="built_in">matrix</span>() &lt;&lt; endl; <span class="comment">//用matrix()转换成矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以直接赋值</span></span><br><span class="line">    rotation_matrix = rotation_vector.<span class="built_in">toRotationMatrix</span>();</span><br><span class="line">    <span class="comment">// cout &lt;&lt; rotation_matrix &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用 AngleAxis 可以进行坐标变换</span></span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">v</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    Eigen::Vector3d v_rotated = rotation_vector * v;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;向量v在变换后的坐标系下表示：&quot;</span> &lt;&lt; v_rotated.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 或者用旋转矩阵</span></span><br><span class="line">    v_rotated = rotation_matrix * v;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;向量v在变换后的坐标系下表示：&quot;</span> &lt;&lt; v_rotated.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 欧拉角: 可以将旋转矩阵直接转换成欧拉角</span></span><br><span class="line">    Eigen::Vector3d euler_angles = rotation_matrix.<span class="built_in">eulerAngles</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// ZYX顺序，即roll pitch yaw顺序</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;旋转矩阵转换成欧拉角：&quot;</span> &lt;&lt; euler_angles.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 欧氏变换矩阵使用 Eigen::Isometry</span></span><br><span class="line">    Eigen::Isometry3d T = Eigen::Isometry3d::<span class="built_in">Identity</span>(); <span class="comment">// 虽然称为3d，实质上是4＊4的矩阵(齐次坐标)</span></span><br><span class="line">    cout &lt;&lt; T.<span class="built_in">matrix</span>() &lt;&lt; endl;</span><br><span class="line">    T.<span class="built_in">rotate</span>(rotation_vector); <span class="comment">// 按照rotation_vector进行旋转</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T绕rotation_vector旋转后：&quot;</span> &lt;&lt; endl</span><br><span class="line">         &lt;&lt; T.<span class="built_in">matrix</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    T.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 把平移向量设成(1,3,4)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T按照(1,3,4)平移后：&quot;</span> &lt;&lt; endl</span><br><span class="line">         &lt;&lt; T.<span class="built_in">matrix</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用变换矩阵进行坐标变换</span></span><br><span class="line">    Eigen::Vector3d v_transformed = T * v; <span class="comment">// 相当于R*v+t</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;向量v在经过T变换后的坐标系下表示：&quot;</span> &lt;&lt; v_transformed.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 四元数</span></span><br><span class="line">    <span class="comment">// 可以直接把AngleAxis赋值给四元数，反之亦然</span></span><br><span class="line">    Eigen::Quaterniond q = Eigen::<span class="built_in">Quaterniond</span>(rotation_vector);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;quaternion = \n&quot;</span></span><br><span class="line">         &lt;&lt; q.<span class="built_in">coeffs</span>() &lt;&lt; endl; <span class="comment">// 请注意coeffs的顺序是(x,y,z,w),w为实部，前三者为虚部</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也可以把旋转矩阵赋给它</span></span><br><span class="line">    q = Eigen::<span class="built_in">Quaterniond</span>(rotation_matrix);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;四元数：&quot;</span> &lt;&lt; q.<span class="built_in">coeffs</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用四元数旋转一个向量，使用重载的乘法即可</span></span><br><span class="line">    v_rotated = q * v;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;向量v在经过四元数变换后的坐标系下表示：&quot;</span> &lt;&lt; v_transformed.<span class="built_in">transpose</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLsits.txt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( geometry )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Eigen头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>( <span class="string">&quot;/usr/include/eigen3&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( eigenGeometry eigenGeometry.cpp )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Eigen基础模块</title>
    <url>/2022/03/21/%E4%BD%BF%E7%94%A8Eigen%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>Eigen是一个 C++ 开源线性代数库。它提供了快速的有关矩阵的线性代数运算，还包括解方程等功能。许多上层的软件库也使用 Eigen 进行矩阵运算，包括 g2o、Sophus 等。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>官方文档：<a href="https://eigen.tuxfamily.org/dox/">https://eigen.tuxfamily.org/dox/</a></p>
<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="comment">// Eigen 部分</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="comment">// 稠密矩阵的代数运算（逆，特征值等）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************</span></span><br><span class="line"><span class="comment"> * 本程序演示了 Eigen 基本类型的使用</span></span><br><span class="line"><span class="comment"> ****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Eigen 中所有向量和矩阵都是Eigen::Matrix，它是一个模板类。它的前三个参数为：数据类型，行，列</span></span><br><span class="line">    <span class="comment">// 声明一个2*3的float矩阵</span></span><br><span class="line">    Eigen::Matrix&lt;<span class="keyword">float</span>, <span class="number">2</span>, <span class="number">3</span>&gt; matrix_23;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时，Eigen 通过 typedef 提供了许多内置类型，不过底层仍是Eigen::Matrix</span></span><br><span class="line">    <span class="comment">// 例如 Vector3d 实质上是 Eigen::Matrix&lt;double, 3, 1&gt;，即三维向量</span></span><br><span class="line">    Eigen::Vector3d v_3d;</span><br><span class="line">    <span class="comment">// 这是一样的</span></span><br><span class="line">    Eigen::Matrix&lt;<span class="keyword">float</span>, <span class="number">3</span>, <span class="number">1</span>&gt; vd_3d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Matrix3d 实质上是 Eigen::Matrix&lt;double, 3, 3&gt;</span></span><br><span class="line">    Eigen::Matrix3d matrix_33 = Eigen::Matrix3d::<span class="built_in">Zero</span>(); <span class="comment">//初始化为零</span></span><br><span class="line">    <span class="comment">// 如果不确定矩阵大小，可以使用动态大小的矩阵</span></span><br><span class="line">    Eigen::Matrix&lt;<span class="keyword">double</span>, Eigen::Dynamic, Eigen::Dynamic&gt; matrix_dynamic;</span><br><span class="line">    <span class="comment">// 更简单的</span></span><br><span class="line">    Eigen::MatrixXd matrix_x;</span><br><span class="line">    <span class="comment">// 这种类型还有很多，我们不一一列举</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面是对Eigen阵的操作</span></span><br><span class="line">    <span class="comment">// 输入数据（初始化）</span></span><br><span class="line">    matrix_23 &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    cout &lt;&lt; matrix_23 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用()访问矩阵中的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            cout &lt;&lt; <span class="built_in">matrix_23</span>(i, j) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 矩阵和向量相乘（实际上仍是矩阵和矩阵）</span></span><br><span class="line">    v_3d &lt;&lt; <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>;</span><br><span class="line">    vd_3d &lt;&lt; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 但是在Eigen里你不能混合两种不同类型的矩阵，像这样是错的</span></span><br><span class="line">    <span class="comment">// Eigen::Matrix&lt;double, 2, 1&gt; result_wrong_type = matrix_23 * v_3d;</span></span><br><span class="line">    <span class="comment">// 应该显式转换</span></span><br><span class="line">    Eigen::Matrix&lt;<span class="keyword">double</span>, <span class="number">2</span>, <span class="number">1</span>&gt; result = matrix_23.cast&lt;<span class="keyword">double</span>&gt;() * v_3d;</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Eigen::Matrix&lt;<span class="keyword">float</span>, <span class="number">2</span>, <span class="number">1</span>&gt; result2 = matrix_23 * vd_3d;</span><br><span class="line">    cout &lt;&lt; result2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同样你不能搞错矩阵的维度</span></span><br><span class="line">    <span class="comment">// 试着取消下面的注释，看看Eigen会报什么错</span></span><br><span class="line">    <span class="comment">// Eigen::Matrix&lt;double, 2, 3&gt; result_wrong_dimension = matrix_23.cast&lt;double&gt;() * v_3d;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一些矩阵运算</span></span><br><span class="line">    <span class="comment">// 四则运算就不演示了，直接用+-*/即可。</span></span><br><span class="line">    matrix_33 = Eigen::Matrix3d::<span class="built_in">Random</span>(); <span class="comment">// 随机数矩阵</span></span><br><span class="line">    cout &lt;&lt; matrix_33 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; matrix_33.<span class="built_in">transpose</span>() &lt;&lt; endl;   <span class="comment">// 转置</span></span><br><span class="line">    cout &lt;&lt; matrix_33.<span class="built_in">sum</span>() &lt;&lt; endl;         <span class="comment">// 各元素和</span></span><br><span class="line">    cout &lt;&lt; matrix_33.<span class="built_in">trace</span>() &lt;&lt; endl;       <span class="comment">// 迹</span></span><br><span class="line">    cout &lt;&lt; <span class="number">10</span> * matrix_33 &lt;&lt; endl;          <span class="comment">// 数乘</span></span><br><span class="line">    cout &lt;&lt; matrix_33.<span class="built_in">inverse</span>() &lt;&lt; endl;     <span class="comment">// 逆</span></span><br><span class="line">    cout &lt;&lt; matrix_33.<span class="built_in">determinant</span>() &lt;&lt; endl; <span class="comment">// 行列式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( useEigen )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span> )</span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;-O3&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Eigen头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>( <span class="string">&quot;/usr/include/eigen3&quot;</span> )</span><br><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>( eigenMatrix eigenMatrix.cpp )</span><br></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line">./eigenMatrix</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">1       2       3</span><br><span class="line">4       5       6</span><br><span class="line">10</span><br><span class="line">28</span><br><span class="line">32</span><br><span class="line">77</span><br><span class="line"> 0.680375   0.59688 -0.329554</span><br><span class="line">-0.211234  0.823295  0.536459</span><br><span class="line"> 0.566198 -0.604897 -0.444451</span><br><span class="line"></span><br><span class="line"> 0.680375 -0.211234  0.566198</span><br><span class="line">  0.59688  0.823295 -0.604897</span><br><span class="line">-0.329554  0.536459 -0.444451</span><br><span class="line">1.61307</span><br><span class="line">1.05922</span><br><span class="line"> 6.80375   5.9688 -3.29554</span><br><span class="line">-2.11234  8.23295  5.36459</span><br><span class="line"> 5.66198 -6.04897 -4.44451</span><br><span class="line">-0.198521   2.22739    2.8357</span><br><span class="line">  1.00605 -0.555135  -1.41603</span><br><span class="line"> -1.62213   3.59308   3.28973</span><br><span class="line">0.208598</span><br><span class="line">Eigen values = </span><br><span class="line">0.0242899</span><br><span class="line"> 0.992154</span><br><span class="line">  1.80558</span><br><span class="line">Eigen vectors = </span><br><span class="line">-0.549013 -0.735943  0.396198</span><br><span class="line"> 0.253452 -0.598296 -0.760134</span><br><span class="line">-0.796459  0.316906 -0.514998</span><br><span class="line">time use <span class="keyword">in</span> normal inverse is 0.682ms</span><br><span class="line">time use <span class="keyword">in</span> Qr decomposition is 0.363ms</span><br></pre></td></tr></table></figure>
<h2 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h2><h5 id="1-LU三角分解"><a href="#1-LU三角分解" class="headerlink" title="(1)LU三角分解"></a>(1)LU三角分解</h5><p>三角分解法是仅对方阵有效，将原方阵分解成一个上三角形矩阵或是排列(permuted)的<strong>上三角形矩阵</strong>和一个<strong>下三角形矩阵</strong>，这样的分解法又称为LU分解法。它的用途主要在简化一个大矩阵的行列式值的计算过程、求反矩阵和求解联立方程组。不过要注意这种分解法所得到的上下三角形矩阵并非唯一，还可找到数个不同的一对上下三角形矩阵，此两三角形矩阵相乘也会得到原矩阵。<code>[L,U]=lu(A)</code></p>
<h5 id="2-QR分解"><a href="#2-QR分解" class="headerlink" title="(2)QR分解"></a>(2)QR分解</h5><p>QR分解法对象不一定是方阵，其将矩阵分解成一个<strong>正规正交矩</strong>阵与上<strong>三角形矩阵</strong>,所以称为QR分解法,与此正规正交矩阵的通用符号Q有关。<code>[Q,R]=qr(A)</code></p>
<h5 id="3-SVD分解"><a href="#3-SVD分解" class="headerlink" title="(3)SVD分解"></a>(3)SVD分解</h5><p>奇异值分解(singular value decomposition,SVD)是另一种正交矩阵分解法；SVD是最可靠的分解法，但是它比QR分解法要花上近十倍的计算时间。<code>[U,S,V]=svd(A)</code>，其中U和V分别代表两个正交矩阵，而S代表一对角矩阵。和QR分解法相同，原矩阵A不必为方阵。使用SVD分解法的用途是解最小平方误差法和数据压缩。</p>
<h5 id="4-LLT分解"><a href="#4-LLT分解" class="headerlink" title="(4)LLT分解"></a>(4)LLT分解</h5><p>又称Cholesky分解，其把一个对称正定的矩阵表示成一个<strong>下三角矩阵L</strong>和<strong>其转置</strong>的乘积的分解。它要求矩阵为方阵，且所有特征值必须大于零，故分解的下三角的对角元也是大于零的(LU三角分解法的变形)。$A=LL^T$</p>
<h5 id="5-LDLT分解"><a href="#5-LDLT分解" class="headerlink" title="(5)LDLT分解"></a>(5)LDLT分解</h5><p>LDLT分解法实际上是Cholesky分解法的改进，因为Cholesky分解法虽然不需要选主元，但其运算过程中涉及到开方问题，而LDLT分解法则避免了这一问题，可用于求解线性方程组。 也需要分解对象为方阵，分解结果为$A=LDL^T$。其中L为一下三角形单位矩阵(即主对角线元素皆为1)，D为一对角矩阵(只在主对角线上有元素，其余皆为零)，$L^T$为L的转置矩阵。</p>
<h2 id="求解方程组"><a href="#求解方程组" class="headerlink" title="求解方程组"></a>求解方程组</h2><h3 id="求解特征向量与特征值"><a href="#求解特征向量与特征值" class="headerlink" title="求解特征向量与特征值"></a>求解特征向量与特征值</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*******求解矩阵的特征向量和特征值*******&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 实对称矩阵可以保证对角化成功,但是也要考虑无法对角化的情况</span></span><br><span class="line">    Eigen::Matrix2f A;</span><br><span class="line">    A &lt;&lt; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line">    <span class="function">Eigen::EigenSolver&lt;Eigen::Matrix2f&gt; <span class="title">eigensolver</span><span class="params">(A)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (eigensolver.<span class="built_in">info</span>() == Eigen::Success)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;特征值：&quot;</span> &lt;&lt; endl &lt;&lt; eigensolver.<span class="built_in">eigenvalues</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;特征向量：&quot;</span> &lt;&lt; endl &lt;&lt; eigensolver.<span class="built_in">eigenvectors</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;矩阵不可以对角化&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求解线性方程组"><a href="#求解线性方程组" class="headerlink" title="求解线性方程组"></a>求解线性方程组</h3><p>线代中形如<code>Ax=b</code>的线性方程组是最简单的入门示例。对于常规适定的线性方程组(未知数个数=方程个数)，可以采用常规的矩阵分解法求解。在Eigen中有多种解法可供选择，以满足在精度与效率上不同的需求。有如下方程组：</p>
<script type="math/tex; mode=display">
\left\{
\begin{aligned}
1x_1 + 2x_2+3x_3 & =  3 \\
4x_1 + 5x_2+6x_3 & =  3 \\
7x_1 + 8x_2+10x_3 & =  4
\end{aligned}
\right.</script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*******求解线性方程组*******&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Eigen::Matrix3f A1;</span><br><span class="line">    Eigen::Vector3f b;</span><br><span class="line">    A1 &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>;</span><br><span class="line">    b &lt;&lt; <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">clock_t</span> time_stt = <span class="built_in">clock</span>();</span><br><span class="line">    Eigen::Vector3f x;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;QR分解&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; A1.<span class="built_in">colPivHouseholderQr</span>().<span class="built_in">solve</span>(b) &lt;&lt; endl; <span class="comment">// QR分解</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;总计用时：&quot;</span> &lt;&lt; <span class="number">1000</span> * (<span class="built_in">clock</span>() - time_stt) / (<span class="keyword">double</span>)CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上述代码调用了<code>.colPivHouseholderQr()</code>函数对方程进行求解。Eigen中所有不同方法调用都有固定的格式：<code>x = A.methodName().solve(b)</code>，如下是Eigen中一些常用方法的比较，根据需要选择不同方法。</p>
<p><img src="/2022/03/21/%E4%BD%BF%E7%94%A8Eigen%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97/2019-08-22-01.PNG" alt="img"></p>
<p>Eigen还可以解一些长的比较“奇怪”的方程组(如x、b并不是向量而是矩阵)，如下方程组：</p>
<script type="math/tex; mode=display">
\left( \begin{matrix} 
2  & -1 \\
-1 & 3
\end{matrix}\right)
\left( \begin{matrix} 
x_1 & x_2 \\
x_3 & x_4
\end{matrix}\right)
=
\left( \begin{matrix} 
1 & 2 \\
3 & 1
\end{matrix}\right)</script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	 Eigen::Matrix2f A0, b0;</span><br><span class="line">    A0 &lt;&lt; <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">3</span>;</span><br><span class="line">    b0 &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">clock_t</span> time_stt0 = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;LDLT分解&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; A0.<span class="built_in">ldlt</span>().<span class="built_in">solve</span>(b0) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;总计用时：&quot;</span> &lt;&lt; <span class="number">1000</span> * (<span class="built_in">clock</span>() - time_stt0) / (<span class="keyword">double</span>)CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>了解cmake编译_hello world</title>
    <url>/2022/03/21/%E4%BA%86%E8%A7%A3cmake%E7%BC%96%E8%AF%91_hello%20world/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>理论上说，任意一个 C++ 程序都可以用 g++ 来编译。但当程序规模越来越大时，一个工程可能有许多个文件夹和里边的源文件，这时输入的编译命令将越来越长。通常一个小型 c++ 项目含有十几个类，各类间还存在着复杂的依赖关系。其中一部分要编译成可执行文件，另一部分编译成库文件。如果仅靠 g++ 命令，我们需要输入大量的编译指令，整个编译过程会变得异常繁琐。因此，对于 C++ 项目，使用一些工程管理工具会更加高效。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>库文件：用来存放函数或者类中函数的具体实现</p>
<p>在一个 C++ 工程中，并不是所有代码都会编译成可执行文件。只有带有 main 函数的文件才会生成可执行程序。而另一些代码，我们只想把它们打包成一个东西，供其他程序调用。这个东西叫做库。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个库文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello SLAM&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于库的使用者，只要拿到了头文件和库文件，就可以调用这个库了。</p>
<p>头文件：存放方法或者类相关的声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LIBHELLOSLAM_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIBHELLOSLAM_H_</span></span><br><span class="line"><span class="comment">// 上面的宏定义是为了防止重复引用这个头文件而引起的重定义错误</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>主函数：main函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;libHelloSLAM.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 libHelloSLAM.h 中的 printHello() 函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printHello</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，我们需要使用CMakeLists.txt文件帮助我们进行编译</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明要求的 cmake 最低版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个 cmake 工程</span></span><br><span class="line"><span class="keyword">project</span>( HelloSLAM )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置编译模式</span></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE <span class="string">&quot;Debug&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个库</span></span><br><span class="line"><span class="keyword">add_library</span>( hello libHelloSLAM.cpp )</span><br><span class="line"><span class="comment"># 共享库</span></span><br><span class="line"><span class="keyword">add_library</span>( hello_shared SHARED libHelloSLAM.cpp )</span><br><span class="line"><span class="comment"># 将库文件链接到可执行程序上</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>( useHello hello_shared )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( useHello useHello.cpp )</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM实践</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数知识补充</title>
    <url>/2021/11/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0_5/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>主要复习线性代数基础中的内容:向量的内积 、 长度及正交性,正交矩阵\正交变换,相似矩阵,相似对角化,对称矩阵的对角化</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<h2 id="向量的内积-、-长度及正交性"><a href="#向量的内积-、-长度及正交性" class="headerlink" title="向量的内积 、 长度及正交性"></a>向量的内积 、 长度及正交性</h2><h3 id="向量的内积"><a href="#向量的内积" class="headerlink" title="向量的内积"></a>向量的内积</h3><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_20-501.png"></p>
<h3 id="向量的长度-范数"><a href="#向量的长度-范数" class="headerlink" title="向量的长度(范数)"></a>向量的长度(范数)</h3><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_20-511.png"></p>
<h3 id="标准正交基"><a href="#标准正交基" class="headerlink" title="标准正交基"></a>标准正交基</h3><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_20-551.png"></p>
<h3 id="史密特-Schmidt-正交化"><a href="#史密特-Schmidt-正交化" class="headerlink" title="史密特(Schmidt)正交化"></a>史密特(Schmidt)正交化</h3><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_20-561.png"></p>
<h3 id="正交矩阵"><a href="#正交矩阵" class="headerlink" title="正交矩阵"></a>正交矩阵</h3><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_21-0i1.png"></p>
<h3 id="正交变换"><a href="#正交变换" class="headerlink" title="正交变换"></a>正交变换</h3><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_21-l01_1.png"></p>
<h2 id="特征值与特征向量"><a href="#特征值与特征向量" class="headerlink" title="特征值与特征向量"></a>特征值与特征向量</h2><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_21-gfgf05.png"></p>
<h2 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h2><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-14_21-fdfd08.png"></p>
<h2 id="矩阵的对角化"><a href="#矩阵的对角化" class="headerlink" title="矩阵的对角化"></a>矩阵的对角化</h2><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/fdfd.png"></p>
<p><img src="/2021/11/14/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0_5/alvin/Documents/lukeyalvin.github.io/Blog/source/_posts/img/ohh.png" alt></p>
<h2 id="对称矩阵的对角化"><a href="#对称矩阵的对角化" class="headerlink" title="对称矩阵的对角化"></a>对称矩阵的对角化</h2><p>对称矩阵:若矩阵$A$满足 $A=A^T$,则为对称矩阵</p>
<p><strong>性质 1</strong> 对称矩阵的特征值为实数.</p>
<p><strong>性质 2</strong> 设$λ 1 ， λ 2 $是对称矩阵 A 的两个特征值，$p 1 ，p 2$ 是对应的特征向量.</p>
<p>若$λ 1 ≠λ 2$ ，则$ p 1$ 与 $p 2 $正交.</p>
<p><strong>定理 5</strong> 设 $A $为 $n $阶对称矩阵，则必有正交矩阵 $P$，使 $P^{-1} A P = P^T A P =Λ$ ，其<br>中$Λ $是以$ A $的$ n $个特征值为对角元的对角矩阵.</p>
<p><strong>推论</strong> 设$ A$ 为$ n $阶对称矩阵，λ 是 A 的特征方程的 $k $重根，则矩阵$ A - λE$ 的<br>秩 $R（A - λE）= n-k$，从而对应特征值$λ$恰有 $k $个线性无关的特征向量.</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>SLAM_14习题_ch2</title>
    <url>/2021/11/14/SLAM_14%E4%B9%A0%E9%A2%98_ch2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>本次习题，你需要使⽤ Eigen 库，编写程序，求解⼀个线性⽅程组。为此，你需要先<br>了解⼀些有关线性⽅程组数值解法的原理。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>Eigen（<a href="http://eigen.tuxfamily.org）是常⽤的">http://eigen.tuxfamily.org）是常⽤的</a> C++ 矩阵运算库，具有很⾼的运算效率。⼤部分<br>需要在 C++ 中使⽤矩阵运算的库，都会选⽤ Eigen 作为基本代数库，例如 Google Tensorflow，Google<br>Ceres，GTSAM 等。本次习题，你需要使⽤ Eigen 库，编写程序，求解⼀个线性⽅程组。为此，你需要先<br>了解⼀些有关线性⽅程组数值解法的原理。<br>设线性⽅程 Ax = b，在 A 为⽅阵的前提下，请回答以下问题：</p>
<p>提⽰：你可能需要参考相关的数学书籍或⽂章。请善⽤搜索引擎。Eigen 固定⼤⼩矩阵最⼤⽀持到 50，<br>所以你会⽤到动态⼤⼩的矩阵。</p>
<blockquote>
<p> 1.在什么条件下，x 有解且唯⼀？</p>
</blockquote>
<p>定理  n 元线性方程组$ Ax = b$<br>（i） <strong>无解</strong>的充分必要条件是$ R（A）＜R（A，b）$；<br>（ii） <strong>有惟一解</strong>的充分必要条件是$ R（A）= R（A，b）= n$；<br>（iii） <strong>有无限多解</strong>的充分必要条件是 $R（A）= R（A，b）＜n.$</p>
<blockquote>
<p> 2.⾼斯消元法的原理是什么？</p>
</blockquote>
<p>高斯消元法主要是通过用<strong>初等行变换</strong>将增广矩阵化为行阶梯阵，然后通过回带求解线性方程组的解。</p>
<p><img src="/2021/11/14/SLAM_14%E4%B9%A0%E9%A2%98_ch2/alvin/Documents/lukeyalvin.github.io/Blog/source/_posts/img/v2-43c79654d421239b9a6e262b9d91acbe_b.jpg" alt="img"></p>
<blockquote>
<p> 3.QR 分解的原理是什么？</p>
</blockquote>
<p>正交阵的定义:</p>
<ul>
<li>如果 n 阶矩阵 A 满足$A ^T A = E （即 A^{-1} = A^T ）$，那么称 A 为正交矩阵，简称<strong>正交阵</strong>.</li>
</ul>
<p>QR分解:</p>
<ul>
<li>将矩阵转化成正交矩阵和上三角矩阵的乘积，对应的分解公式是$A=Q*R$。(其中 Q 是正交阵， R 是 upper triangle 矩阵.)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Core&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="comment">// #define MATRIX_SIZE 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Eigen::Matrix&lt;double,Eigen::Dynamic,Eigen::Dynamic&gt; matrix_100;</span></span><br><span class="line">    <span class="comment">// matrix_100 = Eigen::MatrixXd::Random(MATRIX_SIZE, MATRIX_SIZE);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;matrix_100:&quot; &lt;&lt; endl &lt;&lt; matrix_100 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将矩阵分解为QR</span></span><br><span class="line">    Matrix4d A;</span><br><span class="line">    A &lt;&lt; <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">-2</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">4</span>, <span class="number">-6</span>, <span class="number">2</span>, <span class="number">-2</span>,</span><br><span class="line">        <span class="number">3</span>, <span class="number">6</span>, <span class="number">-9</span>, <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//使用QR分解</span></span><br><span class="line">    HouseholderQR&lt;MatrixXd&gt; marix_dynamic;</span><br><span class="line">    marix_dynamic.<span class="built_in">compute</span>(A);</span><br><span class="line"></span><br><span class="line">    MatrixXd R = marix_dynamic.<span class="built_in">matrixQR</span>().triangularView&lt;Eigen::Upper&gt;();</span><br><span class="line"></span><br><span class="line">    MatrixXd Q = marix_dynamic.<span class="built_in">householderQ</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A = &quot;</span> &lt;&lt; endl &lt;&lt; A &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;R = &quot;</span> &lt;&lt; endl &lt;&lt; R &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Q = &quot;</span> &lt;&lt; endl &lt;&lt; Q &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//求解方程AX = B的方法</span></span><br><span class="line">    <span class="function">Vector4d <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">9</span>)</span></span>;</span><br><span class="line">    Vector4d x_qr = A.<span class="built_in">colPivHouseholderQr</span>().<span class="built_in">solve</span>(b);  <span class="comment">// No pivoting.  </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x_qr = &quot;</span> &lt;&lt; endl &lt;&lt; x_qr &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p> 4.Cholesky 分解的原理是什么？</p>
</blockquote>
<p>将一个正定的埃尔米特矩阵分解成一个下三角矩阵与其共轭转置之乘积。这种分解方式在提高代数运算效率、蒙特卡罗方法等场合中十分有用。实数矩阵的科列斯基分解由安德烈·路易·科列斯基最先发明。实际应用中，科列斯基分解在求解线性方程组中的效率约两倍于LU分解。</p>
<p>关于矩阵分解在Eigen中的使用:<a href="https://eigen.tuxfamily.org/dox/group__TutorialLinearAlgebra.html">https://eigen.tuxfamily.org/dox/group__TutorialLinearAlgebra.html</a></p>
<blockquote>
<p> 5编程实现 A 为 100 × 100 随机矩阵时，⽤ QR 和 Cholesky 分解求 x 的程序。你可以参考本次课<br>⽤到的 useEigen 例程。</p>
</blockquote>
]]></content>
      <categories>
        <category>SLAM十四讲</category>
      </categories>
      <tags>
        <tag>SLAM十四讲</tag>
      </tags>
  </entry>
  <entry>
    <title>fatal  error ‘xxxx’ was not declared in this scope</title>
    <url>/2021/11/13/%22xxx%22is%20not%20std/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>运行slam14_ch3代码visualizeGeometry报错error: ‘xxxx’ was not declared in this scope</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-13_21-40.png"></p>
<p>亲测方案：CMakeLists.txt 添加 set(CMAKE_CXX_STANDARD 14)<br>或者：set(CMAKE_CXX_FLAGS “-std=c++14 -O2 ${SSE_FLAGS} -msse4”) </p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( visualizeGeometry )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Eigen头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>( <span class="string">&quot;/usr/include/eigen3&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Pangolin依赖</span></span><br><span class="line"><span class="keyword">find_package</span>( Pangolin )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;Pangolin_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( visualizeGeometry visualizeGeometry.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( visualizeGeometry <span class="variable">$&#123;Pangolin_LIBRARIES&#125;</span> )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>slam</category>
      </categories>
      <tags>
        <tag>BUG</tag>
        <tag>slam</tag>
      </tags>
  </entry>
  <entry>
    <title>fatal error Eigen/Core No such file or directory</title>
    <url>/2021/11/13/eigen%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>已添加eigen库的路径到IncludePath，include<Eigen dense>也没有小灯泡，可是编译出错：fatal error: Eigen/Dense: No such file or directory </Eigen></p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-13_10-31.png"></p>
<h1 id="方案一-修改vscode配置文件"><a href="#方案一-修改vscode配置文件" class="headerlink" title="方案一:修改vscode配置文件"></a>方案一:修改vscode配置文件</h1><ol>
<li><p>添加eigen库的路径到IncludePath. （c_cpp_properties.json）</p>
<blockquote>
<p>“/usr/include/eigen3/**”,<br>“/usr/include/eigen3/“         </p>
</blockquote>
</li>
</ol>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-13_10-31_2.png" width="50%"></p>
<p>vscode中c_cpp_properties.json的”includePath”告诉vscode插件在哪里找到头文件，便于进行源码查看和debug，并没有告诉gcc编译器这个路径。</p>
<ol>
<li>添加eigen库的路径到编译参数”args”.（tasks.json）</li>
</ol>
<p>在”args”里加入如下代码,task：”args”负责gcc等编译器的编译指令。</p>
<blockquote>
<p>“-I”,</p>
<p>“/usr/include/eigen3”</p>
</blockquote>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-13_10-31_1.png" width="50%"></p>
<h1 id="方案二-使用命令"><a href="#方案二-使用命令" class="headerlink" title="方案二:使用命令"></a>方案二:使用命令</h1><p>命令<code>g++ eigenMatrix.cpp  -I /usr/include/eigen3 -o main</code>的意思就是编译代码,指定头文件位置,并输出可执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/slam_ws/ch3/useEigen$ g++ eigenMatrix.cpp  -I /usr/include/eigen3 -o main</span><br><span class="line">alvin@ros:~/slam_ws/ch3/useEigen$ ./main </span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br></pre></td></tr></table></figure>
<h1 id="方案三-使用CMake"><a href="#方案三-使用CMake" class="headerlink" title="方案三:使用CMake"></a>方案三:使用CMake</h1><p>用vscode编写这类的调用第三方，其实最好的方式是用cmake，</p>
<p>首先，配置c_cpp_properties.json中的includepath，这里配置的目的只是为了在vscode里没有红色波浪线，看起来美观。</p>
<p>这里和方案一的第一步是一样的!</p>
<p>项目结构如下：</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-13_10-38.png"></p>
<p>CMakeLists.txt内容如下：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>.<span class="number">11</span>)</span><br><span class="line"><span class="keyword">project</span> (demo)</span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 REQUIRED)</span><br><span class="line"><span class="keyword">include_directories</span>(/usr/<span class="keyword">include</span>/eigen3)</span><br><span class="line"><span class="keyword">add_executable</span> (eigenMatrix eigenMatrix.cpp)</span><br></pre></td></tr></table></figure>
<p>运行代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./eigenMatrix</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-13_10-39.png" width="50%"></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>BUG</tag>
        <tag>eigen</tag>
      </tags>
  </entry>
  <entry>
    <title>c++头文件</title>
    <url>/2021/11/11/c++%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>面向对象的基本特点:一切东西都是对象;程序就是一堆互相传递消息告诉对方需要做什么的对象;没一个对象都有自己的内存,内存里面还是对象;任何对象都有一种类型;一个特定类型的所有对象可以接收相同的消息(反过来说,所有能接收相同消息的对象可以认为是同一个类型;</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>面向对象的基本特点:</p>
<blockquote>
<p>一切东西都是对象</p>
<p>程序就是一堆互相传递消息告诉对方需要做什么的对象</p>
<p>没一个对象都有自己的内存,内存里面还是对象</p>
<p>任何对象都有一种类型</p>
<p>一个特定类型的所有对象可以接收相同的消息(反过来说,所有能接收相同消息的对象可以认为是同一个类型)</p>
</blockquote>
<p>每个对象都有一个接口:</p>
<blockquote>
<p>接口是接受消息的一种方式</p>
<p>接口被定义在这个对象所属的类别里</p>
</blockquote>
<p>隐藏的实现(The Hidden Implementation):</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-11_16-47.png" width="60%"></p>
<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><p>一般来说,我们每一个类都应该新建一个<code>.cpp</code>文件和一个与之对应的<code>.h</code>文件;</p>
<p><code>.h</code>文件用来<strong>声明(declaration)</strong> 方法和变量,旨在告诉你这个类的大体结构是什么,能干嘛?有什么变量?</p>
<blockquote>
<p>我们称<code>.h</code>文件里的class为构造函数</p>
<blockquote>
<p>作用:相当于接口</p>
<ul>
<li>The header is a <strong>contract</strong> between you and the user of your code</li>
<li>The compile <strong>enforces the contract</strong> by requiring you to declare all structures and function before they are used.</li>
</ul>
</blockquote>
</blockquote>
<p><code>.cpp</code>文件则是核心代码部分,<strong>定义(definition)</strong>某些变量或者方法以及逻辑实现.而这些方法和变量都是<code>.h</code>文件所<strong>声明</strong>的.</p>
<p>在<code>.cpp</code>文件使用的时候,我们一般使用<code>#include</code>来引入<code>.h</code>文件中<strong>声明</strong>的方法或者变量,<code>#include</code>的含义如下图所示;</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-11_17-06.png" width="60%"></p>
<h1 id="在Unix查看C-的编译过程"><a href="#在Unix查看C-的编译过程" class="headerlink" title="在Unix查看C++的编译过程"></a>在Unix查看C++的编译过程</h1><p>我们新建两个文件,<code>a.h</code>和<code>a.cpp</code>,如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int</span> global;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用命令<code>g++ a.cpp --save-temps</code>编译,表示保留编译过程中的文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-rw-rw-r-- 1 alvin alvin    41 Nov 11 19:49 a.cpp</span><br><span class="line">-rw-rw-r-- 1 alvin alvin    22 Nov 11 19:39 a.h</span><br><span class="line">-rw-rw-r-- 1 alvin alvin   198 Nov 11 19:49 a.ii  <span class="comment">#编译预处理指令结束后的结果</span></span><br><span class="line">-rw-rw-r-- 1 alvin alvin  1400 Nov 11 19:49 a.o  <span class="comment"># 目标代码</span></span><br><span class="line">-rwxrwxr-x 1 alvin alvin 16496 Nov 11 19:49 a.out* <span class="comment"># 最终可以执行的代码</span></span><br><span class="line">-rw-rw-r-- 1 alvin alvin   654 Nov 11 19:49 a.s <span class="comment"># 汇编代码</span></span><br></pre></td></tr></table></figure>
<p>查看文件<code>a.ii</code>,可以查看到头文件先被抄进来,与<code>cpp</code>文件组合在一起,被编译器去执行,这也就印证了之前的那一张图.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 &quot;a.cpp&quot;</span></span><br><span class="line"><span class="comment"># 1 &quot;&lt;built-in&gt;&quot;</span></span><br><span class="line"><span class="comment"># 1 &quot;&lt;command-line&gt;&quot;</span></span><br><span class="line"><span class="comment"># 1 &quot;/usr/include/stdc-predef.h&quot; 1 3 4</span></span><br><span class="line"><span class="comment"># 1 &quot;&lt;command-line&gt;&quot; 2</span></span><br><span class="line"><span class="comment"># 1 &quot;a.cpp&quot;</span></span><br><span class="line"><span class="comment"># 1 &quot;a.h&quot; 1</span></span><br><span class="line">void f();</span><br><span class="line">int global;</span><br><span class="line"><span class="comment"># 2 &quot;a.cpp&quot; 2</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">return</span> 0;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>
<h1 id="头文件的易错点"><a href="#头文件的易错点" class="headerlink" title="头文件的易错点"></a>头文件的易错点</h1><h2 id="易错点一-声明与定义"><a href="#易错点一-声明与定义" class="headerlink" title="易错点一:声明与定义"></a>易错点一:声明与定义</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>在之前的<code>a.h</code>中的代码,一个函数f还有一个变量<code>global</code>,但是它们并全非<strong>声明</strong>,变量<code>global</code>是一种<strong>定义</strong>!这么做是错误的,为什么?举个例子:</p>
<p>我们新建一个文件<code>b.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>现在需要将<code>a.cpp</code>和<code>b.cpp</code>组合在一起,执行命令<code>g++ a.cpp b.cpp --save-temps</code></p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-11_20-17.png" width="50%"></p>
<p><code>multiple definition of global</code>?显然<code>a.o</code> <code>b.o</code>重复定义了global,查看临时文件,可以看出编译已经完成(这是因为编译器是分开编译<code>a.cpp</code>和<code>b.cpp</code>),已经生产<code>.o</code>文件,但是没有生成<code>.out</code>.出错的原因在于<code>ld</code>(链接器),没有完成<code>a.cpp</code>和<code>b.cpp</code>的链接,什么原因?</p>
<blockquote>
<p>原因就在于我们在<code>a.h</code>的文件中的<code>global</code>是定义而非声明,因为<code>a.cpp</code>和<code>b.cpp</code>都包含了<code>a.h</code>文件,而<code>global</code>又是定义而非声明,因此说明它被定义了两次,故报错.</p>
</blockquote>
<p>既然如此,怎样让<code>a.h</code>中的变量<code>global</code>变成声明呢?加上<code>extern</code>,显然这样能够很好的解决问题.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br></pre></td></tr></table></figure>
<p>但是,如果此时我们需要在<code>b.cpp</code>文件中去使用这个变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    global++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后再次尝试执行命令<code>g++ a.cpp b.cpp --save-temps</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/cPlus_ws/<span class="built_in">test</span>$ g++ a.cpp b.cpp --save-temps </span><br><span class="line">/usr/bin/ld: b.o: <span class="keyword">in</span> <span class="keyword">function</span> `f()<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">b.cpp:(.text+0xa): undefined reference to `global&#x27;</span></span><br><span class="line">/usr/bin/ld: b.cpp:(.text+0x13): undefined reference to `global<span class="string">&#x27;</span></span><br><span class="line"><span class="string">collect2: error: ld returned 1 exit status</span></span><br></pre></td></tr></table></figure>
<p>报错显示没有定义<code>undefine</code>变量<code>global</code>,显然,我们<code>.h</code>文件仅仅是声明了有<code>global</code>这个变量,但是在<code>b.cpp</code>中去使用的时候却没有去定义,因此编译器通过了,但<code>ld</code>没有找到.</p>
<p>解决方案:修改<code>b.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="keyword">int</span> global;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    global++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于<strong>声明(declaration)</strong> 和<strong>定义(definition)</strong></p>
<ul>
<li>一个<code>.cpp</code>文件就是一个编译单元</li>
<li>只有声明的东西才能放入<code>.h</code><ul>
<li>extern变量</li>
<li>函数的原型</li>
<li>类/<code>struct</code>声明</li>
</ul>
</li>
</ul>
<h2 id="易错点二-h的标准头文件结构"><a href="#易错点二-h的标准头文件结构" class="headerlink" title="易错点二:.h的标准头文件结构"></a>易错点二:<code>.h</code>的标准头文件结构</h2><h3 id="标准头文件结构的含义"><a href="#标准头文件结构的含义" class="headerlink" title="标准头文件结构的含义"></a>标准头文件结构的含义</h3><p>一般情况下,我们的<code>.h</code>文件不像是上面定义的那样,格式应该如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _A_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>那么<code>#</code>的三行作用是什么作用呢?意思就是如果我们没有定义<code>_A_H_</code>,那么我们定义<code>_A_H_</code>,直至我们定义为止(<code>endif</code>),但是,如果我们先前已经定义了呢?则<code>#ifndef _A_H_</code>与<code>#endif</code>之间的代码将不会被执行.</p>
<p>比如我们修改<code>a.h</code>的文件如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _A_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>显然,我们可以预料到函数f以及声明的变量<code>global</code>将不会被执行.</p>
<p>执行指令<code>g++ a.cpp --save-temps</code></p>
<p>查看编译过程文件<code>a.ii</code>,显而易见,预料是对的!因此,我们可以初步得知它的表层含义.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.ii</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.cpp&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;/usr/include/stdc-predef.h&quot;</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span> <span class="number">2</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.cpp&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.h&quot;</span> <span class="number">1</span></span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;a.cpp&quot;</span> <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="标准头文件结构的作用"><a href="#标准头文件结构的作用" class="headerlink" title="标准头文件结构的作用"></a>标准头文件结构的作用</h3><p>那么它的实际用处是什么呢?</p>
<p>我们重新改写一下<code>a.h</code>文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>然后新建一个<code>b.h</code>文件,而<code>b.h</code>包含了<code>a.h</code>的类的变量<code>a</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> A a;</span><br></pre></td></tr></table></figure>
<p>最后修改一下<code>a.cpp</code>, 它由于需求必须引入两个头文件.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;a.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;b.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行命令<code>g++ a.cpp --save-temps</code></p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-11_22-18.png"></p>
<p>报错显示<code>error: redefinition of ‘class A’</code>,重新定义了<code>classA</code>这个类</p>
<p>什么原因呢?查看编译过程文件<code>a.ii</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span> <span class="string">&quot;a.cpp&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;/usr/include/stdc-predef.h&quot;</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span> <span class="number">2</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.cpp&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.h&quot;</span> <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;;</span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;a.cpp&quot;</span> <span class="number">2</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;b.h&quot;</span> <span class="number">1</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.h&quot;</span> <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;;</span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;b.h&quot;</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> A a;</span><br><span class="line"># <span class="number">3</span> <span class="string">&quot;a.cpp&quot;</span> <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显.程序确实在编译过程中定义了两次<code>classA</code>这个类</p>
<p>怎么修改?重新修改<code>a.h</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _A_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _A_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>此时再度执行就会发现,一切正常,查看编译过程文件<code>a.ii</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span> <span class="string">&quot;a.cpp&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;built-in&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;/usr/include/stdc-predef.h&quot;</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;&lt;command-line&gt;&quot;</span> <span class="number">2</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.cpp&quot;</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;a.h&quot;</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> global;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>&#125;;</span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;a.cpp&quot;</span> <span class="number">2</span></span><br><span class="line"># <span class="number">1</span> <span class="string">&quot;b.h&quot;</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> A a;</span><br><span class="line"># <span class="number">3</span> <span class="string">&quot;a.cpp&quot;</span> <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>标准头文件结构的作用就是防止同一个<code>cpp</code>文件多次调用某一个<code>.h</code>文件时,避免头文件里类被反复调用而产生错误.</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>gazebo加载world出现黑屏问题</title>
    <url>/2021/11/02/gazebo%E5%8A%A0%E8%BD%BDworld%E5%87%BA%E7%8E%B0%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>近期发在gazebo在加载一些world环境时,总是出现下面黑屏的情况,这是因为model库加载不正确导致的</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_22-44.png"></p>
<p>解决方法： 通过直接下载所有模型到用户的根目录下的.gazebo/models/下 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.gazebo/</span><br><span class="line">$ mkdir -p models</span><br><span class="line">$ <span class="built_in">cd</span> ~/.gazebo/models/</span><br><span class="line">$ wget http://file.ncnynl.com/ros/gazebo_models.txt</span><br><span class="line">$ wget -i gazebo_models.txt</span><br><span class="line">$ ls model.tar.g* | xargs -n1 tar xzvf</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_22-49.png"></p>
<p>完美解决</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_23-16.png"></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>BUG</tag>
        <tag>gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>turtlebot3仿真实践</title>
    <url>/2021/11/02/turtlebot3%E4%BB%BF%E7%9C%9F%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>TurtleBot3 是一个小型，低成本，完全可编程，基于 ROS 的移动机器人。 它旨在用于教育，研究，产品原型和爱好应用的目的。TurtleBot3 的目标是大幅降低平台的尺寸和价格，而不会牺牲性能，功能和质量。由于提供了其他选项，如底盘，计算机和传感器，TurtleBot3 可以通过各种方式进行定制。TurtleBot3 意愿通过应用 SBC（单板计算机），深度传感器和 3D 打印的最新技术进步，成为创客运动的中心。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<h1 id="下载turtlebot3仿真包"><a href="#下载turtlebot3仿真包" class="headerlink" title="下载turtlebot3仿真包"></a>下载turtlebot3仿真包</h1><ul>
<li>环境准备</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install ros-noetic-turtlebot3 ros-noetic-turtlebot3-description ros-noetic-turtlebot3-gazebo ros-noetic-turtlebot3-msgs ros-noetic-turtlebot3-slam ros-noetic-turtlebot3-teleop</span><br></pre></td></tr></table></figure>
<p>以上会避免之后问题里出现的报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws/src/</span><br><span class="line">$ git <span class="built_in">clone</span> -b noetic-devel https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git</span><br><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws &amp;&amp; catkin_make</span><br></pre></td></tr></table></figure>
<ul>
<li>问题:turtlebot3_msgs报错</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws &amp;&amp; catkin_make</span><br><span class="line">Could not find a package configuration file provided by</span><br><span class="line"><span class="string">&quot;turtlebot3_msgs&quot;</span> with any of the following names:</span><br><span class="line"> </span><br><span class="line">turtlebot3_msgsConfig.cmake</span><br><span class="line">turtlebot3_msgs-config.cmake</span><br><span class="line"> </span><br><span class="line">Add the installation prefix of <span class="string">&quot;turtlebot3_msgs&quot;</span> to CMAKE_PREFIX_PATH or <span class="built_in">set</span> <span class="string">&quot;turtlebot3_msg_DIR&quot;</span> to a directory containing one of the above files.</span><br></pre></td></tr></table></figure>
<p>解决方案:这是因为缺少相关的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ros-noetic-turtlebot3-msgs</span><br></pre></td></tr></table></figure>
<h2 id="Empty-World"><a href="#Empty-World" class="headerlink" title="Empty World"></a>Empty World</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=burger</span><br><span class="line">$ roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch</span><br></pre></td></tr></table></figure>
<ul>
<li>问题:Resource not found: turtlebot3_description</li>
</ul>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_22-21.png"></p>
<p>解决方案:这种情况的发生是因为turtlebot3_gazebo包没有对<code>turtlebot3_description</code>声名依赖,你应该安装一下这个依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ros-noetic-turtlebot3-description</span><br></pre></td></tr></table></figure>
<p>其他版本的ros可以尝试更换<code>noetic</code>为你当前的版本</p>
<p>参考链接:<a href="https://answers.ros.org/question/348299/error-in-roslaunch-turtlebot3_gazebo-turtlebot3_worldlaunch/"><strong>Error in “roslaunch turtlebot3_gazebo turtlebot3_world.launch “</strong></a></p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_22-30.png"></p>
<h2 id="TurtleBot3-World"><a href="#TurtleBot3-World" class="headerlink" title="TurtleBot3 World"></a>TurtleBot3 World</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=waffle</span><br><span class="line">$ roslaunch turtlebot3_gazebo turtlebot3_world.launch</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_22-34.png"></p>
<h2 id="TurtleBot3-House"><a href="#TurtleBot3-House" class="headerlink" title="TurtleBot3 House"></a>TurtleBot3 House</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=waffle_pi</span><br><span class="line">$ roslaunch turtlebot3_gazebo turtlebot3_house.launch</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_23-16.png"></p>
<h1 id="SLAM仿真"><a href="#SLAM仿真" class="headerlink" title="SLAM仿真"></a>SLAM仿真</h1><p>在 Gazebo 模拟器中进行 SLAM 时，您可以在虚拟世界中选择或创建各种环境和机器人模型。 除了准备模拟环境而不是启动机器人之外，SLAM 仿真与实际的 TurtleBot3 的SLAM非常相似。</p>
<h2 id="加载仿真环境"><a href="#加载仿真环境" class="headerlink" title="加载仿真环境"></a>加载仿真环境</h2><p>准备了三个 Gazebo 环境，但要使用 SLAM 创建地图，建议使用 <strong>TurtleBot3 World</strong> 或 <strong>TurtleBot3 House</strong>。<br>使用以下命令之一加载 Gazebo 环境。</p>
<p>在本指令中，将使用 TurtleBot3 World。<br>请在 <code>burger</code>、<code>waffle</code>、<code>waffle_pi</code> 中为 <code>TURTLEBOT3_MODEL</code> 参数使用正确的关键字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=waffle_pi</span><br><span class="line">$ roslaunch turtlebot3_gazebo turtlebot3_house.launch</span><br></pre></td></tr></table></figure>
<h2 id="运行SLAM节点"><a href="#运行SLAM节点" class="headerlink" title="运行SLAM节点"></a>运行SLAM节点</h2><p>从远程 PC 使用 <code>Ctrl</code> + <code>Alt</code> + <code>T</code> 打开一个新终端并运行 SLAM 节点。 默认使用 Gmapping SLAM 方法。<br>请在 <code>burger</code>、<code>waffle</code>、<code>waffle_pi</code> 中为 <code>TURTLEBOT3_MODEL</code> 参数使用正确的关键字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=burger</span><br><span class="line">$ roslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=gmapping</span><br></pre></td></tr></table></figure>
<h2 id="运行键盘控制节点"><a href="#运行键盘控制节点" class="headerlink" title="运行键盘控制节点"></a>运行键盘控制节点</h2><p>使用<code>Ctrl</code>+<code>Alt</code>+<code>T</code>从远程 PC 打开一个新终端，然后从远程 PC 运行远程操作节点。<br>请在 <code>burger</code>、<code>waffle</code>、<code>waffle_pi</code> 中为 <code>TURTLEBOT3_MODEL</code> 参数使用正确的关键字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=burger</span><br><span class="line">$ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch</span><br><span class="line"></span><br><span class="line"> Control Your TurtleBot3!</span><br><span class="line"> ---------------------------</span><br><span class="line"> Moving around:</span><br><span class="line">        w</span><br><span class="line">   a    s    d</span><br><span class="line">        x</span><br><span class="line"></span><br><span class="line"> w/x : increase/decrease linear velocity</span><br><span class="line"> a/d : increase/decrease angular velocity</span><br><span class="line"> space key, s : force stop</span><br><span class="line"></span><br><span class="line"> CTRL-C to quit</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_23-50.png"></p>
<h1 id="导航仿真"><a href="#导航仿真" class="headerlink" title="导航仿真"></a>导航仿真</h1><p>就像 Gazebo 模拟器中的 SLAM 一样，你可以在虚拟导航世界中选择或创建各种环境和机器人模型。 但是，在运行导航之前必须准备适当的地图。 除了准备仿真环境而不是制作机器人之外，仿真导航与实际的导航非常相似。</p>
<h2 id="加载仿真环境-1"><a href="#加载仿真环境-1" class="headerlink" title="加载仿真环境"></a>加载仿真环境</h2><p>在前面的 SLAM 部分中，TurtleBot3 World 用于创建地图。 导航将使用相同的 Gazebo 环境。请在 burger、waffle、waffle_pi 中为 TURTLEBOT3_MODEL 参数使用正确的关键字。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=burger</span><br><span class="line">$ roslaunch turtlebot3_gazebo turtlebot3_world.launch</span><br></pre></td></tr></table></figure>
<h2 id="运行导航节点"><a href="#运行导航节点" class="headerlink" title="运行导航节点"></a>运行导航节点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> TURTLEBOT3_MODEL=burger</span><br><span class="line">$ roslaunch turtlebot3_navigation turtlebot3_navigation.launch map_file:=<span class="variable">$HOME</span>/map.yaml</span><br></pre></td></tr></table></figure>
<h2 id="初始姿态估计"><a href="#初始姿态估计" class="headerlink" title="初始姿态估计"></a>初始姿态估计</h2><p>必须在运行导航之前执行初始姿态估计，因为此过程会初始化对导航至关重要的 AMCL 参数。 TurtleBot3 必须正确定位在地图上，LDS 传感器数据与显示的地图整齐地重叠。</p>
<p>单击 RViz 菜单中的 2D Pose Estimate 按钮。</p>
<p>单击实际机器人所在的地图，然后将绿色大箭头拖向机器人面向的方向。</p>
<p>重复步骤 1 和 2，直到 LDS 传感器数据覆盖在保存的地图上。</p>
<p>启动键盘遥操作节点，在地图上精确定位机器人。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>gazebo</tag>
        <tag>ros</tag>
        <tag>机器人仿真</tag>
        <tag>turtlebot3</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人仿真实践_gazebo+rviz综合实践</title>
    <url>/2021/11/02/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F%E5%AE%9E%E8%B7%B5_gazebo+rviz%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>URDF 用于创建机器人模型、Rviz 可以显示机器人感知到的环境信息，Gazebo 用于仿真，可以模拟外界环境，以及机器人的一些传感器，如何在 Gazebo 中运行这些传感器，并显示这些传感器的数据(机器人的视角)呢？</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<h1 id="实践一-机器人运动控制"><a href="#实践一-机器人运动控制" class="headerlink" title="实践一:机器人运动控制"></a>实践一:机器人运动控制</h1><h2 id="1-ros-control-简介"><a href="#1-ros-control-简介" class="headerlink" title="1.ros_control 简介"></a>1.ros_control 简介</h2><p><strong>场景:</strong> 同一套 ROS 程序，如何部署在不同的机器人系统上，比如：开发阶段为了提高效率是在仿真平台上测试的，部署时又有不同的实体机器人平台，不同平台的实现是有差异的，如何保证 ROS 程序的可移植性？ROS 内置的解决方式是 ros_control。</p>
<p><strong>ros_control:</strong> 是一组软件包，它包含了控制器接口，控制器管理器，传输和硬件接口。ros_control 是一套机器人控制的中间件，是一套规范，不同的机器人平台只要按照这套规范实现，那么就可以保证 与ROS 程序兼容，通过这套规范，实现了一种可插拔的架构设计，大大提高了程序设计的效率与灵活性。</p>
<p>gazebo 已经实现了 ros_control 的相关接口，如果需要在 gazebo 中控制机器人运动，直接调用相关接口即可</p>
<h2 id="2-运动控制实现流程-Gazebo"><a href="#2-运动控制实现流程-Gazebo" class="headerlink" title="2.运动控制实现流程(Gazebo)"></a>2.运动控制实现流程(Gazebo)</h2><p>承上，运动控制基本流程:</p>
<ol>
<li>已经创建完毕的机器人模型，编写一个单独的 xacro 文件，为机器人模型添加传动装置以及控制器</li>
<li>将此文件集成进xacro文件</li>
<li>启动 Gazebo 并发布 /cmd_vel 消息控制机器人运动</li>
</ol>
<p><strong>2.1 为 joint 添加传动装置以及控制器</strong></p>
<p>两轮差速配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_move&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 传动实现:用于连接控制器与关节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;joint_trans&quot;</span> <span class="attr">params</span>=<span class="string">&quot;joint_name&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Transmission is important to link the joints and the controller --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;_trans&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;_motor&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每一个驱动轮都需要配置传动装置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:joint_trans</span> <span class="attr">joint_name</span>=<span class="string">&quot;left_wheel2base_link&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:joint_trans</span> <span class="attr">joint_name</span>=<span class="string">&quot;right_wheel2base_link&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;differential_drive_controller&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_diff_drive.so&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rosDebugLevel</span>&gt;</span>Debug<span class="tag">&lt;/<span class="name">rosDebugLevel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">publishWheelTF</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publishWheelTF</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">publishTf</span>&gt;</span>1<span class="tag">&lt;/<span class="name">publishTf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">publishWheelJointState</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publishWheelJointState</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">alwaysOn</span>&gt;</span>true<span class="tag">&lt;/<span class="name">alwaysOn</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>100.0<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">legacyMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">legacyMode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">leftJoint</span>&gt;</span>left_wheel2base_link<span class="tag">&lt;/<span class="name">leftJoint</span>&gt;</span> <span class="comment">&lt;!-- 左轮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rightJoint</span>&gt;</span>right_wheel2base_link<span class="tag">&lt;/<span class="name">rightJoint</span>&gt;</span> <span class="comment">&lt;!-- 右轮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelSeparation</span>&gt;</span>$&#123;base_link_radius * 2&#125;<span class="tag">&lt;/<span class="name">wheelSeparation</span>&gt;</span> <span class="comment">&lt;!-- 车轮间距 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelDiameter</span>&gt;</span>$&#123;wheel_radius * 2&#125;<span class="tag">&lt;/<span class="name">wheelDiameter</span>&gt;</span> <span class="comment">&lt;!-- 车轮直径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">broadcastTF</span>&gt;</span>1<span class="tag">&lt;/<span class="name">broadcastTF</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelTorque</span>&gt;</span>30<span class="tag">&lt;/<span class="name">wheelTorque</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelAcceleration</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">wheelAcceleration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">commandTopic</span>&gt;</span>cmd_vel<span class="tag">&lt;/<span class="name">commandTopic</span>&gt;</span> <span class="comment">&lt;!-- 运动控制话题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">odometryFrame</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometryFrame</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">odometryTopic</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometryTopic</span>&gt;</span> <span class="comment">&lt;!-- 里程计话题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">robotBaseFrame</span>&gt;</span>base_footprint<span class="tag">&lt;/<span class="name">robotBaseFrame</span>&gt;</span> <span class="comment">&lt;!-- 根坐标系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>2.2 xacro文件集成</strong></p>
<p>最后还需要将上述 xacro 文件集成进总的机器人模型文件，代码示例如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;matrix.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;base.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;move.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>2.3 启动 gazebo并控制机器人运动</strong></p>
<p>launch文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 Urdf 文件的内容加载到参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find robot_simlink_gazebo)/urdf/xacro/combine.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动 gazebo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在 gazebo 中显示机器人模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动 launch 文件，使用 topic list 查看话题列表，会发现多了 /cmd_vel 然后发布 cmd_vel 消息控制即可</p>
<p>使用命令控制(或者可以编写单独的节点控制)<code>rosrun teleop_twist_keyboard teleop_twist_keyboard.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~$ rosrun teleop_twist_keyboard teleop_twist_keyboard.py </span><br><span class="line">the rosdep view is empty: call <span class="string">&#x27;sudo rosdep init&#x27;</span> and <span class="string">&#x27;rosdep update&#x27;</span></span><br><span class="line"></span><br><span class="line">Reading from the keyboard  and Publishing to Twist!</span><br><span class="line">---------------------------</span><br><span class="line">Moving around:</span><br><span class="line">   u    i    o</span><br><span class="line">   j    k    l</span><br><span class="line">   m    ,    .</span><br><span class="line"></span><br><span class="line">For Holonomic mode (strafing), hold down the <span class="built_in">shift</span> key:</span><br><span class="line">---------------------------</span><br><span class="line">   U    I    O</span><br><span class="line">   J    K    L</span><br><span class="line">   M    &lt;    &gt;</span><br><span class="line"></span><br><span class="line">t : up (+z)</span><br><span class="line">b : down (-z)</span><br><span class="line"></span><br><span class="line">anything <span class="keyword">else</span> : stop</span><br><span class="line"></span><br><span class="line">q/z : increase/decrease max speeds by 10%</span><br><span class="line">w/x : increase/decrease only linear speed by 10%</span><br><span class="line">e/c : increase/decrease only angular speed by 10%</span><br><span class="line"></span><br><span class="line">CTRL-C to quit</span><br><span class="line"></span><br><span class="line">currently:	speed 0.5	turn 1.0 </span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_16-01_gazebo.png"></p>
<h4 id="Rviz查看里程计信息"><a href="#Rviz查看里程计信息" class="headerlink" title="Rviz查看里程计信息"></a>Rviz查看里程计信息</h4><p>在 Gazebo 的仿真环境中，机器人的里程计信息以及运动朝向等信息是无法获取的，可以通过 Rviz 显示机器人的里程计信息以及运动朝向</p>
<p><strong>里程计:</strong> 机器人相对出发点坐标系的位姿状态(X 坐标 Y 坐标 Z坐标以及朝向)。</p>
<p>修改launch文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 Urdf 文件的内容加载到参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find robot_simlink_gazebo)/urdf/xacro/combine.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动 gazebo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在 gazebo 中显示机器人模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- 启动 rviz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 关节以及机器人状态发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_16-08_rviz.png"></p>
<h1 id="实践二-雷达仿真"><a href="#实践二-雷达仿真" class="headerlink" title="实践二:雷达仿真"></a>实践二:雷达仿真</h1><p>雷达传感器数据信息xacro</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_sensors&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 雷达 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;laser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sensor</span> <span class="attr">type</span>=<span class="string">&quot;ray&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rplidar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pose</span>&gt;</span>0 0 0 0 0 0<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visualize</span>&gt;</span>true<span class="tag">&lt;/<span class="name">visualize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>5.5<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ray</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scan</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">samples</span>&gt;</span>360<span class="tag">&lt;/<span class="name">samples</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resolution</span>&gt;</span>1<span class="tag">&lt;/<span class="name">resolution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">min_angle</span>&gt;</span>-3<span class="tag">&lt;/<span class="name">min_angle</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">max_angle</span>&gt;</span>3<span class="tag">&lt;/<span class="name">max_angle</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scan</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">range</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">min</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">min</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">max</span>&gt;</span>30.0<span class="tag">&lt;/<span class="name">max</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resolution</span>&gt;</span>0.01<span class="tag">&lt;/<span class="name">resolution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">range</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noise</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>gaussian<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mean</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">mean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stddev</span>&gt;</span>0.01<span class="tag">&lt;/<span class="name">stddev</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">noise</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ray</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_rplidar&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_laser.so&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">topicName</span>&gt;</span>/scan<span class="tag">&lt;/<span class="name">topicName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frameName</span>&gt;</span>laser<span class="tag">&lt;/<span class="name">frameName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sensor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在原来的集成的xacro添加该文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;matrix.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;base.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;move.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser_senor.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动原来的launch文件</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_16-14_gazebo.png"></p>
<h1 id="实践三-摄像头仿真"><a href="#实践三-摄像头仿真" class="headerlink" title="实践三:摄像头仿真"></a>实践三:摄像头仿真</h1><h2 id="普通摄像头仿真"><a href="#普通摄像头仿真" class="headerlink" title="普通摄像头仿真"></a>普通摄像头仿真</h2><p>配置摄像头传感器信息xacro</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_sensors&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用的link --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类型设置为 camara --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sensor</span> <span class="attr">type</span>=<span class="string">&quot;camera&quot;</span> <span class="attr">name</span>=<span class="string">&quot;camera_node&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>30.0<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span> <span class="comment">&lt;!-- 更新频率 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 摄像头基本信息设置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">camera</span> <span class="attr">name</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">horizontal_fov</span>&gt;</span>1.3962634<span class="tag">&lt;/<span class="name">horizontal_fov</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">width</span>&gt;</span>1280<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">height</span>&gt;</span>720<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">format</span>&gt;</span>R8G8B8<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">near</span>&gt;</span>0.02<span class="tag">&lt;/<span class="name">near</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">far</span>&gt;</span>300<span class="tag">&lt;/<span class="name">far</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noise</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>gaussian<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mean</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">mean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stddev</span>&gt;</span>0.007<span class="tag">&lt;/<span class="name">stddev</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">noise</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">camera</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 核心插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_camera&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_camera.so&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">alwaysOn</span>&gt;</span>true<span class="tag">&lt;/<span class="name">alwaysOn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cameraName</span>&gt;</span>/camera<span class="tag">&lt;/<span class="name">cameraName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTopicName</span>&gt;</span>image_raw<span class="tag">&lt;/<span class="name">imageTopicName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cameraInfoTopicName</span>&gt;</span>camera_info<span class="tag">&lt;/<span class="name">cameraInfoTopicName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frameName</span>&gt;</span>camera<span class="tag">&lt;/<span class="name">frameName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hackBaseline</span>&gt;</span>0.07<span class="tag">&lt;/<span class="name">hackBaseline</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionK1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionK1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionK2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionK2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionK3</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionK3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionT1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionT1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionT2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionT2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sensor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在原来的集成的xacro添加该文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;matrix.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;base.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;move.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser_senor.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera_senor.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动原来的launch文件</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_16-25_gazebo.png"></p>
<h2 id="kinect摄像头仿真"><a href="#kinect摄像头仿真" class="headerlink" title="kinect摄像头仿真"></a>kinect摄像头仿真</h2><p>配置 kinetic传感器信息xacro</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_sensors&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;support&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">sensor</span> <span class="attr">type</span>=<span class="string">&quot;depth&quot;</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">always_on</span>&gt;</span>true<span class="tag">&lt;/<span class="name">always_on</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>20.0<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">camera</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">horizontal_fov</span>&gt;</span>$&#123;60.0*PI/180.0&#125;<span class="tag">&lt;/<span class="name">horizontal_fov</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">format</span>&gt;</span>R8G8B8<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">width</span>&gt;</span>640<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">height</span>&gt;</span>480<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">near</span>&gt;</span>0.05<span class="tag">&lt;/<span class="name">near</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">far</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">far</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">camera</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;kinect_camera_controller&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_openni_kinect.so&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cameraName</span>&gt;</span>camera<span class="tag">&lt;/<span class="name">cameraName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">alwaysOn</span>&gt;</span>true<span class="tag">&lt;/<span class="name">alwaysOn</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>10<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">imageTopicName</span>&gt;</span>rgb/image_raw<span class="tag">&lt;/<span class="name">imageTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">depthImageTopicName</span>&gt;</span>depth/image_raw<span class="tag">&lt;/<span class="name">depthImageTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pointCloudTopicName</span>&gt;</span>depth/points<span class="tag">&lt;/<span class="name">pointCloudTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cameraInfoTopicName</span>&gt;</span>rgb/camera_info<span class="tag">&lt;/<span class="name">cameraInfoTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">depthImageCameraInfoTopicName</span>&gt;</span>depth/camera_info<span class="tag">&lt;/<span class="name">depthImageCameraInfoTopicName</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 此处为了防止与camera混淆,采用support当作深度相机 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">frameName</span>&gt;</span>support<span class="tag">&lt;/<span class="name">frameName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">baseline</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">baseline</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_k1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_k1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_k2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_k2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_k3</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_k3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_t1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_t1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_t2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_t2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pointCloudCutoff</span>&gt;</span>0.4<span class="tag">&lt;/<span class="name">pointCloudCutoff</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">sensor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在原来的集成的xacro添加该文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;matrix.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;base.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;move.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser_senor.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera_senor.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;kinect_senor.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动原来的launch文件</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_16-36_gazebo.png"></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>gazebo</tag>
        <tag>ros</tag>
        <tag>机器人仿真</tag>
        <tag>rviz</tag>
        <tag>xacro</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人仿真实践_gazebo中搭建</title>
    <url>/2021/11/02/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F%E5%AE%9E%E8%B7%B5_gazebo%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>案例描述:URDF 需要集成进 Rviz 或 Gazebo 才能显示可视化的机器人模型,因此我们可以结合gazebo实现一下案例:创建一个四轮圆柱状机器人模型，机器人参数如下,底盘为圆柱状，半径 10cm，高 8cm，四轮由两个驱动轮和两个万向支撑轮组成，两个驱动轮半径为 3.25cm,轮胎宽度1.5cm，两个万向轮为球状，半径 0.75cm，底盘离地间距为 1.5cm(与万向轮直径一致)</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<h1 id="URDF集成gazebo的流程"><a href="#URDF集成gazebo的流程" class="headerlink" title="URDF集成gazebo的流程"></a>URDF集成gazebo的流程</h1><p><strong>URDF与Gazebo基本集成流程</strong></p>
<p>URDF 与 Gazebo 集成流程与 Rviz 实现类似，主要步骤如下:</p>
<ol>
<li>创建功能包，导入依赖项</li>
<li>编写 URDF 或 Xacro 文件</li>
<li>启动 Gazebo 并显示机器人模型</li>
</ol>
<p><strong>注意， 当 URDF 需要与 Gazebo 集成时，和 Rviz 有明显区别:</strong></p>
<p>1.必须使用 collision 标签，因为既然是仿真环境，那么必然涉及到碰撞检测，collision 提供碰撞检测的依据。</p>
<p>2.必须使用 inertial 标签，此标签标注了当前机器人某个刚体部分的惯性矩阵，用于一些力学相关的仿真计算。</p>
<p>3.颜色设置，也需要重新使用 gazebo 标签标注，因为之前的颜色设置为了方便调试包含透明度，仿真环境下没有此选项。</p>
<p><strong>1.collision</strong></p>
<p>如果机器人link是标准的几何体形状，和link的 visual 属性设置一致即可。</p>
<p><strong>2.inertial</strong></p>
<p>惯性矩阵的设置需要结合link的质量与外形参数动态生成，标准的球体、圆柱与立方体的惯性矩阵公式如下(已经封装为 xacro 实现):</p>
<p>球体惯性矩阵</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Macro for inertia matrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;sphere_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>圆柱惯性矩阵</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;cylinder_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r h&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">iyz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*r*r/2&#125;&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>立方体惯性矩阵</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;Box_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m l w h&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(h*h + l*l)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(w*w + l*l)/12&#125;&quot;</span> <span class="attr">iyz</span>= <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*(w*w + h*h)/12&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，原则上，除了 base_footprint 外，机器人的每个刚体部分都需要设置惯性矩阵，且惯性矩阵必须经计算得出，如果随意定义刚体部分的惯性矩阵，那么可能会导致机器人在 Gazebo 中出现抖动，移动等现象。</p>
<p>3.<strong>颜色设置</strong></p>
<p>在 gazebo 中显示 link 的颜色，必须要使用指定的标签:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;link节点名称&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Blue<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="gazebo仿真实践"><a href="#gazebo仿真实践" class="headerlink" title="gazebo仿真实践"></a>gazebo仿真实践</h1><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_15-41_gazebo.png"></p>
<h2 id="惯性矩阵xacro"><a href="#惯性矩阵xacro" class="headerlink" title="惯性矩阵xacro"></a>惯性矩阵xacro</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Macro for inertia matrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;sphere_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;cylinder_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r h&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">iyz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*r*r/2&#125;&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;Box_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m l w h&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(h*h + l*l)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(w*w + l*l)/12&#125;&quot;</span> <span class="attr">iyz</span>= <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*(w*w + h*h)/12&#125;&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="小车底盘xacro"><a href="#小车底盘xacro" class="headerlink" title="小车底盘xacro"></a>小车底盘xacro</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用 xacro 优化 URDF 版的小车底盘实现：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现思路:</span></span><br><span class="line"><span class="comment">    1.将一些常量、变量封装为 xacro:property</span></span><br><span class="line"><span class="comment">      比如:PI 值、小车底盘半径、离地间距、车轮半径、宽度 ....</span></span><br><span class="line"><span class="comment">    2.使用 宏 封装驱动轮以及支撑轮实现，调用相关宏生成驱动轮与支撑轮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根标签，必须声明 xmlns:xacro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 封装变量、常量 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- PI 值设置精度需要高一些，否则后续车轮翻转量计算时，可能会出现肉眼不能察觉的车轮倾斜，从而导致模型抖动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.1415926&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 宏:黑色设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 底盘属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_footprint 半径  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 长 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;earth_space&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 离地间距 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_footprint_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.5 0.3 0.0 0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;base_link_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 $&#123;earth_space + base_link_length / 2 &#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Yellow<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0325&quot;</span> /&gt;</span><span class="comment">&lt;!-- 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span><span class="comment">&lt;!-- 宽度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮宏实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_wheels&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;wheel_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 $&#123;flag * base_link_radius&#125; $&#123;-(earth_space + base_link_length / 2 - wheel_radius) &#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支撑轮半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.03&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮宏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_support_wheel&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:sphere_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;support_wheel_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;flag * (base_link_radius - support_wheel_radius)&#125; 0 $&#123;-(base_link_length / 2 + earth_space / 2)&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;front&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;back&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>雷达xacro</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用 xacro 优化 URDF 版的小车底盘实现：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现思路:</span></span><br><span class="line"><span class="comment">    1.将一些常量、变量封装为 xacro:property</span></span><br><span class="line"><span class="comment">      比如:PI 值、小车底盘半径、离地间距、车轮半径、宽度 ....</span></span><br><span class="line"><span class="comment">    2.使用 宏 封装驱动轮以及支撑轮实现，调用相关宏生成驱动轮与支撑轮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根标签，必须声明 xmlns:xacro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 封装变量、常量 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- PI 值设置精度需要高一些，否则后续车轮翻转量计算时，可能会出现肉眼不能察觉的车轮倾斜，从而导致模型抖动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.1415926&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 宏:黑色设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 底盘属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_footprint 半径  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 长 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;earth_space&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 离地间距 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_footprint_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.5 0.3 0.0 0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;base_link_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 $&#123;earth_space + base_link_length / 2 &#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Yellow<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0325&quot;</span> /&gt;</span><span class="comment">&lt;!-- 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span><span class="comment">&lt;!-- 宽度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮宏实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_wheels&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:cylinder_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;wheel_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 $&#123;flag * base_link_radius&#125; $&#123;-(earth_space + base_link_length / 2 - wheel_radius) &#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支撑轮半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.03&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 质量  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮宏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_support_wheel&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:sphere_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;support_wheel_m&#125;&quot;</span> <span class="attr">r</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;flag * (base_link_radius - support_wheel_radius)&#125; 0 $&#123;-(base_link_length / 2 + earth_space / 2)&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Red<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;front&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;back&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="相机xacro"><a href="#相机xacro" class="headerlink" title="相机xacro"></a>相机xacro</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头长度(x) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头宽度(y) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头高度(z) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;base_link_length / 2 + camera_height / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的z坐标:底盘高度 / 2 + 摄像头高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_m&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头质量 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头关节以及link --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;camera_length&#125; $&#123;camera_width&#125; $&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;camera_length&#125; $&#123;camera_width&#125; $&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:Box_inertial_matrix</span> <span class="attr">m</span>=<span class="string">&quot;$&#123;camera_m&#125;&quot;</span> <span class="attr">l</span>=<span class="string">&quot;$&#123;camera_length&#125;&quot;</span> <span class="attr">w</span>=<span class="string">&quot;$&#123;camera_width&#125;&quot;</span> <span class="attr">h</span>=<span class="string">&quot;$&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;camera2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;camera&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;camera_x&#125; $&#123;camera_y&#125; $&#123;camera_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Blue<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="组合底盘-相机-雷达xacro"><a href="#组合底盘-相机-雷达xacro" class="headerlink" title="组合底盘\相机\雷达xacro"></a>组合底盘\相机\雷达xacro</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;matrix.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;base.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a>launch文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 Urdf 文件的内容加载到参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find robot_simlink_gazebo)/urdf/xacro/combine.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动 gazebo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在 gazebo 中显示机器人模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gazebo_ros&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawn_model&quot;</span> <span class="attr">name</span>=<span class="string">&quot;model&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>gazebo</tag>
        <tag>ros</tag>
        <tag>机器人仿真</tag>
        <tag>xacro</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人仿真实践_XACRO搭建机器人</title>
    <url>/2021/11/02/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F%E5%AE%9E%E8%B7%B5_XACRO%E6%90%AD%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>案例描述:创建一个四轮圆柱状机器人模型，机器人参数如下,底盘为圆柱状，半径 10cm，高 8cm，四轮由两个驱动轮和两个万向支撑轮组成，两个驱动轮半径为 3.25cm,轮胎宽度1.5cm，两个万向轮为球状，半径 0.75cm，底盘离地间距为 1.5cm(与万向轮直径一致)</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_13-46_RVIZ.png"></p>
<p>在上述案例之中,使用urdf搭建机器人发现复用性差,而且参数被有很好的分离出来,很难进行管理和维护.因此引入xacro文件,在使用xacro进行优化之后思考如何引入摄像头和雷达.</p>
<h1 id="编写XACRO文件"><a href="#编写XACRO文件" class="headerlink" title="编写XACRO文件"></a>编写XACRO文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用 xacro 优化 URDF 版的小车底盘实现：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现思路:</span></span><br><span class="line"><span class="comment">    1.将一些常量、变量封装为 xacro:property</span></span><br><span class="line"><span class="comment">      比如:PI 值、小车底盘半径、离地间距、车轮半径、宽度 ....</span></span><br><span class="line"><span class="comment">    2.使用 宏 封装驱动轮以及支撑轮实现，调用相关宏生成驱动轮与支撑轮</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根标签，必须声明 xmlns:xacro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 封装变量、常量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.141&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 宏:黑色设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 底盘属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_footprint 半径  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- base_link 长 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;earth_space&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 离地间距 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_footprint_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.5 0.3 0.0 0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 $&#123;earth_space + base_link_length / 2 &#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0325&quot;</span> /&gt;</span><span class="comment">&lt;!-- 半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span><span class="comment">&lt;!-- 宽度 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 驱动轮宏实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_wheels&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 $&#123;flag * base_link_radius&#125; $&#123;-(earth_space + base_link_length / 2 - wheel_radius) &#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_wheels</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支撑轮半径 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支撑轮宏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;add_support_wheel&quot;</span> <span class="attr">params</span>=<span class="string">&quot;name flag&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;flag * (base_link_radius - support_wheel_radius)&#125; 0 $&#123;-(base_link_length / 2 + earth_space / 2)&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;front&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:add_support_wheel</span> <span class="attr">name</span>=<span class="string">&quot;back&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="在-launch-中加载-xacro文件"><a href="#在-launch-中加载-xacro文件" class="headerlink" title="在 launch 中加载 xacro文件"></a>在 launch 中加载 xacro文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find robot_simlink_rviz)/urdf/xacro/robot_xacro.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加坐标系和机器人模型,然后就可以看到搭建的小车模型.</p>
<p><img src="/2021/11/02/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F%E5%AE%9E%E8%B7%B5_XACRO%E6%90%AD%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/alvin/Documents/lukeyalvin.github.io/Blog/source/_posts/img/2021-11-02_13-45_RVIZ.png"></p>
<p>我们也可以保存生成的rviz文件,以便二次打开反复添加参数,File/save config as…</p>
<p>修改launch文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载robot_description时使用command属性，属性值就是调用 xacro 功能包的 xacro 程序直接解析 xacro 文件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find robot_simlink_rviz)/urdf/xacro/robot_xacro.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find robot_simlink_rviz)/config/robot_xacro.rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>事实上,还可以通过将xacro文件转换成对应的urdf文件,然后在launch文件里执行urdf文件即可</p>
<p>转换的命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosrun xacro xacro xxx.xacro &gt; xxx.urdf</span><br></pre></td></tr></table></figure>
<h1 id="添加雷达和摄像头"><a href="#添加雷达和摄像头" class="headerlink" title="添加雷达和摄像头"></a>添加雷达和摄像头</h1><p><strong>实现流程:</strong></p>
<ol>
<li>首先编写摄像头和雷达的 xacro 文件</li>
<li>然后再编写一个组合文件，组合底盘、摄像头与雷达</li>
<li>最后，通过 launch 文件启动 Rviz 并显示模型</li>
</ol>
<h2 id="摄像头-xacro-文件"><a href="#摄像头-xacro-文件" class="headerlink" title="摄像头 xacro 文件:"></a>摄像头 xacro 文件:</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 摄像头相关的 xacro 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头长度(x) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_width&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头宽度(y) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_height&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.025&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头高度(z) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;camera_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;base_link_length / 2 + camera_height / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 摄像头安装的z坐标:底盘高度 / 2 + 摄像头高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 摄像头关节以及link --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">&quot;$&#123;camera_length&#125; $&#123;camera_width&#125; $&#123;camera_height&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;camera2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;camera&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;camera_x&#125; $&#123;camera_y&#125; $&#123;camera_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="雷达-xacro-文件"><a href="#雷达-xacro-文件" class="headerlink" title="雷达 xacro 文件:"></a>雷达 xacro 文件:</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    小车底盘添加雷达</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_laser&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达支架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.15&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;support_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;base_link_length / 2 + support_length / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 支架安装的z坐标:底盘高度 / 2 + 支架高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;support&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;support_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;support_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.8 0.2 0.0 0.8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;support2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;support&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;support_x&#125; $&#123;support_y&#125; $&#123;support_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达长度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.03&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达半径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的x坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_y&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的y坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;laser_z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;support_length / 2 + laser_length / 2&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- 雷达安装的z坐标:支架高度 / 2 + 雷达高度 / 2  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 雷达关节以及link --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;laser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;laser_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;laser_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;laser2support&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;support&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;laser&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;$&#123;laser_x&#125; $&#123;laser_y&#125; $&#123;laser_z&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="组合底盘摄像头与雷达的-xacro-文件"><a href="#组合底盘摄像头与雷达的-xacro-文件" class="headerlink" title="组合底盘摄像头与雷达的 xacro 文件"></a>组合底盘摄像头与雷达的 xacro 文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组合小车底盘与摄像头与雷达 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;robot_xacro.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;laser.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;camera.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="launch-文件"><a href="#launch-文件" class="headerlink" title="launch 文件"></a>launch 文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find robot_simlink_rviz)/urdf/xacro/combine.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/11/02/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F%E5%AE%9E%E8%B7%B5_XACRO%E6%90%AD%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/alvin/Documents/lukeyalvin.github.io/Blog/source/_posts/img/2021-11-02_15-05_RVIZ.png" alt></p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>机器人仿真</tag>
        <tag>rviz</tag>
        <tag>xacro</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人仿真实践_URDF搭建机器人</title>
    <url>/2021/11/02/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BB%BF%E7%9C%9F%E5%AE%9E%E8%B7%B5_URDF%E6%90%AD%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>案例描述:创建一个四轮圆柱状机器人模型，机器人参数如下,底盘为圆柱状，半径 10cm，高 8cm，四轮由两个驱动轮和两个万向支撑轮组成，两个驱动轮半径为 3.25cm,轮胎宽度1.5cm，两个万向轮为球状，半径 0.75cm，底盘离地间距为 1.5cm(与万向轮直径一致)</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_13-46_RVIZ.png"></p>
<p><strong>实现流程:</strong></p>
<p>创建机器人模型可以分步骤实现</p>
<ol>
<li>新建 urdf 文件，并与 launch 文件集成</li>
<li>搭建底盘</li>
<li>在底盘上添加两个驱动轮</li>
<li>在底盘上添加两个万向轮</li>
</ol>
<h1 id="新建urdf以及launch文件"><a href="#新建urdf以及launch文件" class="headerlink" title="新建urdf以及launch文件"></a>新建urdf以及launch文件</h1><p>urdf 文件:基本实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置 base_footprint  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加底盘 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加驱动轮 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 添加万向轮(支撑轮) --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>robot</p>
<blockquote>
<p>urdf 中为了保证 xml 语法的完整性，使用了<code>robot</code>标签作为根标签，所有的 link 和 joint 以及其他标签都必须包含在 robot 标签内,在该标签内可以通过 name 属性设置机器人模型的名称\</p>
</blockquote>
<p>name: </p>
<blockquote>
<p>指定机器人模型的名称</p>
</blockquote>
<p>link</p>
<blockquote>
<p> urdf 中的 link 标签用于描述机器人某个部件(也即刚体部分)的外观和物理属性，比如: 机器人底座、轮子、激光雷达、摄像头…每一个部件都对应一个 link, 在 link 标签内，可以设计该部件的形状、尺寸、颜色、惯性矩阵、碰撞参数等一系列属性</p>
<blockquote>
<ul>
<li>name —-&gt; 为连杆命名</li>
<li><p>visual —-&gt; 描述外观(对应的数据是可视的) </p>
</li>
<li><ul>
<li><strong>geometry 设置连杆的形状</strong> </li>
</ul>
</li>
<li><ul>
<li><ul>
<li>标签1: box(盒状) </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>属性:size=长(x) 宽(y) 高(z)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>标签2: cylinder(圆柱) </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>属性:radius=半径 length=高度</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>标签3: sphere(球体) </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>属性:radius=半径</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>标签4: mesh(为连杆添加皮肤) </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>属性: filename=资源路径(格式:<strong>package:////文件</strong>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>origin 设置偏移量与倾斜弧度</strong> </li>
</ul>
</li>
<li><ul>
<li><ul>
<li>属性1: xyz=x偏移 y便宜 z偏移</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>属性2: rpy=x翻滚 y俯仰 z偏航 (单位是弧度)</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>metrial 设置材料属性(颜色)</strong> </li>
</ul>
</li>
<li><ul>
<li><ul>
<li>属性: name</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>标签: color </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>属性: rgba=红绿蓝权重值与透明度 (每个权重值以及透明度取值[0,1])</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>collision —-&gt; 连杆的碰撞属性</p>
</li>
<li><p>Inertial —-&gt; 连杆的惯性矩阵</p>
</li>
</ul>
</blockquote>
</blockquote>
</blockquote>
<p>launch 文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 urdf 文件内容设置进参数服务器 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 将 urdf 文件内容设置进参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">textfile</span>=<span class="string">&quot;$(find robot_simlink_rviz)/urdf/robot_urdf.urdf&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动 rivz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz_test&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动机器人状态和关节状态发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="底盘搭建"><a href="#底盘搭建" class="headerlink" title="底盘搭建"></a>底盘搭建</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">            形状:圆柱 </span></span><br><span class="line"><span class="comment">            半径:10     cm </span></span><br><span class="line"><span class="comment">            高度:8      cm </span></span><br><span class="line"><span class="comment">            离地:1.5    cm</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.8 0.3 0.1 0.5&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.055&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>joint</p>
<p>urdf 中的 joint 标签用于描述机器人关节的运动学和动力学属性，还可以指定关节运动的安全极限，机器人的两个部件(分别称之为 parent link 与 child link)以”关节”的形式相连接，不同的关节有不同的运动形式: 旋转、滑动、固定、旋转速度、旋转角度限制….,比如:安装在底座上的轮子可以360度旋转，而摄像头则可能是完全固定在底座上。joint标签对应的数据在模型中是不可见的</p>
<p>属性</p>
<blockquote>
<ul>
<li><p>name —-&gt; 为关节命名</p>
</li>
<li><p>type —-&gt; 关节运动形式 </p>
</li>
<li><ul>
<li>continuous: 旋转关节，可以绕单轴无限旋转</li>
</ul>
</li>
<li><ul>
<li>revolute: 旋转关节，类似于 continues,但是有旋转角度限制</li>
</ul>
</li>
<li><ul>
<li>prismatic: 滑动关节，沿某一轴线移动的关节，有位置极限</li>
</ul>
</li>
<li><ul>
<li>planer: 平面关节，允许在平面正交方向上平移或旋转</li>
</ul>
</li>
<li><ul>
<li>floating: 浮动关节，允许进行平移、旋转运动</li>
</ul>
</li>
<li><ul>
<li>fixed: 固定关节，不允许运动的特殊关节</li>
</ul>
</li>
</ul>
</blockquote>
<p>子标签</p>
<blockquote>
<ul>
<li><p>parent(必需的)<br>parent link的名字是一个强制的属性： </p>
</li>
<li><ul>
<li>link:父级连杆的名字，是这个link在机器人结构树中的名字。</li>
</ul>
</li>
<li><p>child(必需的)<br>child link的名字是一个强制的属性： </p>
</li>
<li><ul>
<li>link:子级连杆的名字，是这个link在机器人结构树中的名字。</li>
</ul>
</li>
<li><p>origin </p>
</li>
<li><ul>
<li>属性: xyz=各轴线上的偏移量 rpy=各轴线上的偏移弧度。</li>
</ul>
</li>
<li><p>axis </p>
</li>
<li><ul>
<li>属性: xyz用于设置围绕哪个关节轴运动。</li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<h1 id="添加驱动轮"><a href="#添加驱动轮" class="headerlink" title="添加驱动轮"></a>添加驱动轮</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加驱动轮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        驱动轮是侧翻的圆柱</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">            半径: 3.25 cm</span></span><br><span class="line"><span class="comment">            宽度: 1.5  cm</span></span><br><span class="line"><span class="comment">            颜色: 黑色</span></span><br><span class="line"><span class="comment">        关节设置:</span></span><br><span class="line"><span class="comment">            x = 0</span></span><br><span class="line"><span class="comment">            y = 底盘的半径 + 轮胎宽度 / 2</span></span><br><span class="line"><span class="comment">            z = 离地间距 + 底盘长度 / 2 - 轮胎半径 = 1.5 + 4 - 3.25 = 2.25(cm)</span></span><br><span class="line"><span class="comment">            axis = 0 1 0</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;left_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;left_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;left_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0.1 -0.0225&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;right_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;right_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;right_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 -0.1 -0.0225&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="添加万向轮"><a href="#添加万向轮" class="headerlink" title="添加万向轮"></a>添加万向轮</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加万向轮(支撑轮) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        参数</span></span><br><span class="line"><span class="comment">            形状: 球体</span></span><br><span class="line"><span class="comment">            半径: 0.75 cm</span></span><br><span class="line"><span class="comment">            颜色: 黑色</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        关节设置:</span></span><br><span class="line"><span class="comment">            x = 自定义(底盘半径 - 万向轮半径) = 0.1 - 0.0075 = 0.0925(cm)</span></span><br><span class="line"><span class="comment">            y = 0</span></span><br><span class="line"><span class="comment">            z = 底盘长度 / 2 + 离地间距 / 2 = 0.08 / 2 + 0.015 / 2 = 0.0475 </span></span><br><span class="line"><span class="comment">            axis= 1 1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;front_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;front_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;front_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.0925 0 -0.0475&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;back_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.0075&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;back_wheel2base_link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;back_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.0925 0 -0.0475&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="执行launch文件"><a href="#执行launch文件" class="headerlink" title="执行launch文件"></a>执行launch文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ roslaunch robot_simlink_rviz robot_urdf.launch </span><br><span class="line">... logging to /home/alvin/.ros/<span class="built_in">log</span>/429ebe1e-3ba0-11ec-9e19-e56937336ffc/roslaunch-ros-113111.log</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>添加坐标系和机器人模型,然后就可以看到搭建的小车模型.</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/2021-11-02_13-45_RVIZ.png"></p>
<p>我们也可以保存生成的rviz文件,以便二次打开反复添加参数,File/save config as…</p>
<p>修改launch文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将 urdf 文件内容设置进参数服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find robot_simlink_rviz)/urdf/robot_urdf.urdf&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动 rivz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz_test&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find robot_simlink_rviz)/config/robot_urdf.rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动机器人状态和关节状态发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>思考:</strong></p>
<ul>
<li>为什么使用foot_print?</li>
</ul>
<blockquote>
<p>因为默认情况下: 底盘的中心点位于地图原点上，所以会导致机器人模型是半沉到地下的情况产生，可以使用的优化策略，将初始 link 设置为一个尺寸极小的 link(比如半径为 0.001m 的球体，或边长为 0.001m 的立方体)，然后再在初始 link 上添加底盘等刚体，这样实现，虽然仍然存在初始link半沉的现象，但是基本可以忽略了。这个初始 link 一般称之为 base_footprint</p>
</blockquote>
<ul>
<li>上述代码实现存在什么问题吗？比如复用性！</li>
</ul>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>机器人仿真</tag>
        <tag>URDF</tag>
        <tag>rviz</tag>
      </tags>
  </entry>
  <entry>
    <title>tf坐标综合实践_乌龟跟随</title>
    <url>/2021/11/01/tf%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%AE%9E%E8%B7%B5_%E4%B9%8C%E9%BE%9F%E8%B7%9F%E9%9A%8F/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>案例描述:程序启动之初: 产生两只乌龟，中间的乌龟(A) 和 左下乌龟(B), B 会自动运行至A的位置，并且键盘控制时，只是控制 A 的运动，但是 B 可以跟随 A 运行</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><strong>案例分析:</strong> 乌龟跟随实现的核心，是乌龟A和B都要发布相对世界坐标系的坐标信息，然后，订阅到该信息需要转换获取A相对于B坐标系的信息，最后，再生成速度信息，并控制B运动。</p>
<ol>
<li>启动乌龟显示节点</li>
<li>在乌龟显示窗体中生成一只新的乌龟(需要使用服务)</li>
<li>编写两只乌龟发布坐标信息的节点</li>
<li>编写订阅节点订阅坐标信息并生成新的相对关系生成速度信息</li>
</ol>
<h1 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装</span></span><br><span class="line">$ sudo apt-get install ros-noetic-ros-tutorials ros-noetic-geometry-tutorials ros-noetic-rviz ros-noetic-rosbash ros-noetic-rqt-tf-tree</span><br><span class="line"><span class="comment">#2.运行</span></span><br><span class="line">$ roslaunch turtle_tf turtle_tf_demo.launch</span><br></pre></td></tr></table></figure>
<h1 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h1><h2 id="启动一只乌龟"><a href="#启动一只乌龟" class="headerlink" title="启动一只乌龟"></a>启动一只乌龟</h2><p>首先,我们知道启动乌龟及其键盘控制节点的命令有三个,我们可以使用下面的launch文件代替:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;gui&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="生成第二只乌龟"><a href="#生成第二只乌龟" class="headerlink" title="生成第二只乌龟"></a>生成第二只乌龟</h2><p>其次,启动一只乌龟之后,我们可以查看一下服务:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~$ rosservice list</span><br><span class="line">/clear</span><br><span class="line">/gui/get_loggers</span><br><span class="line">/gui/set_logger_level</span><br><span class="line">/key/get_loggers</span><br><span class="line">/key/set_logger_level</span><br><span class="line">/<span class="built_in">kill</span></span><br><span class="line">/reset</span><br><span class="line">/rosout/get_loggers</span><br><span class="line">/rosout/set_logger_level</span><br><span class="line">/spawn</span><br><span class="line">/turtle1/set_pen</span><br><span class="line">/turtle1/teleport_absolute</span><br><span class="line">/turtle1/teleport_relative</span><br></pre></td></tr></table></figure>
<p>因此,生成第二只乌龟调用的是服务来创建,话题是<code>/spawn</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~$ rosservice call /spawn <span class="string">&quot;x: 0.0</span></span><br><span class="line"><span class="string">y: 0.0</span></span><br><span class="line"><span class="string">theta: 0.0</span></span><br><span class="line"><span class="string">name: &#x27;&#x27;&quot;</span> </span><br></pre></td></tr></table></figure>
<p>这是使用命令调用服务来创建一只新的乌龟:乌龟的位置为:(x,y),乌龟头的朝向为theta弧度,乌龟的名字是”name”</p>
<p>那么,如何使用代码实现呢?</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;turtlesim/Spawn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;spawn_client&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    ros::ServiceClient client = nh.serviceClient&lt;turtlesim::Spawn&gt;(<span class="string">&quot;/spawn&quot;</span>);</span><br><span class="line">    client.<span class="built_in">waitForExistence</span>();</span><br><span class="line">    turtlesim::Spawn spawn;</span><br><span class="line">    spawn.request.x = <span class="number">2</span>;</span><br><span class="line">    spawn.request.y = <span class="number">2</span>;</span><br><span class="line">    spawn.request.theta = <span class="number">1.57</span>;</span><br><span class="line">    spawn.request.name = <span class="string">&quot;turtle2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client.<span class="built_in">call</span>(spawn); </span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里<code>client.call(spawn);</code>返回的是布尔,我们也可以接收一下,去判断是不是成功的生成了一只乌龟.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">bool</span> flag = client.<span class="built_in">call</span>(spawn); </span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;新乌龟已经生成了!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;生成失败了....&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt添加相关命令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line"><span class="keyword">add_executable</span>(turtlesim_follow_spawn src/turtlesim_follow_spawn.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add cmake target dependencies of the executable</span></span><br><span class="line"><span class="comment">## same as for the library above</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(turtlesim_follow_spawn <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify libraries to link a library or executable target against</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(turtlesim_follow_spawn</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>此时你可以在运行第一步的launch文件的基础上执行以下命令,测试是否成功生成乌龟</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rosrun tf_pratice turtlesim_follow_spawn </span><br><span class="line">[ INFO] [1635770123.695878217]: 新乌龟已经生成了!</span><br></pre></td></tr></table></figure>
<h2 id="发布两只乌龟的坐标系信息"><a href="#发布两只乌龟的坐标系信息" class="headerlink" title="发布两只乌龟的坐标系信息"></a>发布两只乌龟的坐标系信息</h2><p>可以订阅乌龟的位姿信息，然后再转换成坐标信息，两只乌龟的实现逻辑相同，只是订阅的话题名称，生成的坐标信息等稍有差异，可以将差异部分通过参数传入:</p>
<ul>
<li><p>该节点需要启动两次</p>
</li>
<li><p>每次启动时都需要传入乌龟节点名称(第一次是 turtle1 第二次是 turtle2)</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;turtlesim/Pose.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/transform_broadcaster.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存乌龟名称</span></span><br><span class="line">std::string turtle_name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doPose</span><span class="params">(<span class="keyword">const</span> turtlesim::Pose::ConstPtr &amp;pose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个广播对象</span></span><br><span class="line">    <span class="keyword">static</span> tf2_ros::TransformBroadcaster broadcaster;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//坐标点解析</span></span><br><span class="line">    geometry_msgs::TransformStamped tfs;</span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;/world&quot;</span>;</span><br><span class="line">    tfs.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    tfs.child_frame_id = turtle_name.<span class="built_in">c_str</span>();</span><br><span class="line">    tfs.transform.translation.x = pose-&gt;x;</span><br><span class="line">    tfs.transform.translation.y = pose-&gt;y;</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将欧拉角转换成四元数</span></span><br><span class="line">    tf2::Quaternion qnt;</span><br><span class="line">    qnt.<span class="built_in">setRPY</span>(<span class="number">0</span>,<span class="number">0</span>,pose-&gt;theta);</span><br><span class="line">    tfs.transform.rotation.x = qnt.<span class="built_in">getX</span>();</span><br><span class="line">    tfs.transform.rotation.y = qnt.<span class="built_in">getY</span>();</span><br><span class="line">    tfs.transform.rotation.z = qnt.<span class="built_in">getZ</span>();</span><br><span class="line">    tfs.transform.rotation.w = qnt.<span class="built_in">getW</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发布坐标信息</span></span><br><span class="line">    broadcaster.<span class="built_in">sendTransform</span>(tfs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;turtle_pose_pub&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">//解析传入的命名空间</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;请传入正确的参数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        turtle_name = argv[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">ROS_INFO</span>(<span class="string">&quot;乌龟 %s 坐标发送启动&quot;</span>,turtle_name.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订阅乌龟的位姿信息</span></span><br><span class="line">    ros::Subscriber sub = nh.subscribe&lt;turtlesim::Pose&gt;(turtle_name + <span class="string">&quot;/pose&quot;</span>,<span class="number">1000</span>,doPose);</span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt添加相关命令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line"><span class="keyword">add_executable</span>(turtlesim_follow_pub src/turtlesim_follow_pub.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add cmake target dependencies of the executable</span></span><br><span class="line"><span class="comment">## same as for the library above</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(turtlesim_follow_pub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify libraries to link a library or executable target against</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(turtlesim_follow_pub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>综上,我们可以更改原本的launch文件,使用该launch文件完成以上三步</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动第一只乌龟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle1_gui&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle1_key&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 产生第二只乌龟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle2_spaw&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf_pratice&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_follow_spawn&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动两个发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;caster1&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf_pratice&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_follow_pub&quot;</span> <span class="attr">args</span>=<span class="string">&quot;turtle1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;caster2&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf_pratice&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_follow_pub&quot;</span> <span class="attr">args</span>=<span class="string">&quot;turtle2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们查看下一下发布的话题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~$ rostopic list </span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf</span><br><span class="line">/turtle1/cmd_vel</span><br><span class="line">/turtle1/color_sensor</span><br><span class="line">/turtle1/pose</span><br><span class="line">/turtle2/cmd_vel</span><br><span class="line">/turtle2/color_sensor</span><br><span class="line">/turtle2/pose</span><br></pre></td></tr></table></figure>
<h2 id="订阅-解析坐标信息并生成速度信息"><a href="#订阅-解析坐标信息并生成速度信息" class="headerlink" title="订阅:解析坐标信息并生成速度信息"></a>订阅:解析坐标信息并生成速度信息</h2><p>现在我们已经获得两个乌龟的坐标系,以及相对于世界的坐标关系,可以在rviz内查看,现在需要做的是怎么才能让生成的turtle2跟随turtle1运动.</p>
<p>首先,需要获取 turtle1 相对 turtle2 的坐标信息,这样turtle2就可以找到turtle1.</p>
<p>然后,turtle需要发布速度信息,根据数学计算去发布新的速度指令,进而实现乌龟跟随</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/Twist.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//创建监听对象</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;turtle_pose_sub&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要创建发布 /turtle2/cmd_vel 的 publisher 对象</span></span><br><span class="line">    ros::Publisher pub = nh.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;/turtle2/cmd_vel&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">	<span class="comment">//注意这里的发布频率必须在10以上</span></span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先获取 turtle1 相对 turtle2 的坐标信息</span></span><br><span class="line">            geometry_msgs::TransformStamped tfs = buffer.<span class="built_in">lookupTransform</span>(<span class="string">&quot;turtle2&quot;</span>,<span class="string">&quot;turtle1&quot;</span>,ros::<span class="built_in">Time</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据坐标信息生成速度信息 -- geometry_msgs/Twist.h</span></span><br><span class="line">            geometry_msgs::Twist twist;</span><br><span class="line">            twist.linear.x = <span class="number">0.5</span> * <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(tfs.transform.translation.x,<span class="number">2</span>) </span><br><span class="line">                                        + <span class="built_in">pow</span>(tfs.transform.translation.y,<span class="number">2</span>));</span><br><span class="line">            twist.angular.z = <span class="number">4</span> * <span class="built_in">atan2</span>(tfs.transform.translation.y,tfs.transform.translation.x);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发布速度信息 -- 需要提前创建 publish 对象</span></span><br><span class="line">            pub.<span class="built_in">publish</span>(twist);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;发生异常:%s&quot;</span>,e.<span class="built_in">what</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        rate.<span class="built_in">sleep</span>();</span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CMakeLists.txt添加相关命令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line"><span class="keyword">add_executable</span>(turtlesim_follow_sub src/turtlesim_follow_sub.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add cmake target dependencies of the executable</span></span><br><span class="line"><span class="comment">## same as for the library above</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(turtlesim_follow_sub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify libraries to link a library or executable target against</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(turtlesim_follow_sub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>综上,我们可以更改原本的launch文件,使用该launch文件完成以上四步</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动第一只乌龟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle1_gui&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle1_key&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 产生第二只乌龟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;turtle2_spaw&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf_pratice&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_follow_spawn&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动两个发布节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;caster1&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf_pratice&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_follow_pub&quot;</span> <span class="attr">args</span>=<span class="string">&quot;turtle1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;caster2&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf_pratice&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_follow_pub&quot;</span> <span class="attr">args</span>=<span class="string">&quot;turtle2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 订阅速度信息节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;listener&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;tf_pratice&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_follow_sub&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时就可以实现跟随了</p>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>tf坐标变换</tag>
        <tag>turtlesim</tag>
      </tags>
  </entry>
  <entry>
    <title>tf坐标变换实践_多坐标变换</title>
    <url>/2021/11/01/tf%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%AE%9E%E8%B7%B5_%E5%A4%9A%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>案例描述:现有坐标系统，父级坐标系统 world,下有两子级系统 son1，son2，son1 相对于 world，以及 son2 相对于 world 的关系是已知的，求 son1原点在 son2中的坐标，又已知在 son1中一点的坐标，要求求出该点在 son2 中的坐标.已知son1和son2相对于world的偏移量分别是(0.2 0.8 0.3 0 0 0)和(0.5 0 0 0 0 0),求解点一直某一点在son1坐标系中的坐标为(1,2,3),求该点在son2中的坐标?</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><strong>案例分析:</strong></p>
<ol>
<li>首先，需要发布 son1 相对于 world，以及 son2 相对于 world 的坐标消息</li>
<li>然后，需要订阅坐标发布消息，并取出订阅的消息，借助于 tf2 实现 son1 和 son2 的转换</li>
<li>最后，还要实现坐标点的转换</li>
</ol>
<h1 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h1><h2 id="发布方"><a href="#发布方" class="headerlink" title="发布方"></a>发布方</h2><p><strong>前提:</strong> 发布两个子坐标系节点(也是静态坐标节点)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf2_ros&quot;</span> <span class="attr">name</span>=<span class="string">&quot;son1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0.2 0.8 0.3 0 0 0 /world /son1&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;tf2_ros&quot;</span> <span class="attr">name</span>=<span class="string">&quot;son2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> <span class="attr">args</span>=<span class="string">&quot;0.5 0 0 0 0 0 /world /son2&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="订阅方"><a href="#订阅方" class="headerlink" title="订阅方"></a>订阅方</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/PointStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;dynamic_pub&quot;</span>);</span><br><span class="line">    <span class="comment">//创建监听对象,接受发布的静态坐标</span></span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//解析son1中的点相对于son2的坐标</span></span><br><span class="line">            geometry_msgs::TransformStamped tfs = buffer.<span class="built_in">lookupTransform</span>(<span class="string">&quot;son2&quot;</span>,<span class="string">&quot;son1&quot;</span>,ros::<span class="built_in">Time</span>(<span class="number">0</span>));</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Son1 相对于 Son2 的坐标关系:父坐标系ID=%s,子坐标系ID=%s,坐标关系:x=%.2f,y=%.2f,z=%.2f&quot;</span>,</span><br><span class="line">                    tfs.header.frame_id.<span class="built_in">c_str</span>(),tfs.child_frame_id.<span class="built_in">c_str</span>(),</span><br><span class="line">                    tfs.transform.translation.x,</span><br><span class="line">                    tfs.transform.translation.y,</span><br><span class="line">                    tfs.transform.translation.z);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//坐标点解析</span></span><br><span class="line">            geometry_msgs::PointStamped point_son1;</span><br><span class="line">            point_son1.header.frame_id = <span class="string">&quot;son1&quot;</span>;</span><br><span class="line">            point_son1.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">            point_son1.point.x = <span class="number">1</span>;</span><br><span class="line">            point_son1.point.y = <span class="number">2</span>;</span><br><span class="line">            point_son1.point.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">            geometry_msgs::PointStamped point_son2;</span><br><span class="line">            <span class="comment">//PS:调用 transform 必须包含头文件&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span></span><br><span class="line">            point_son2 = buffer.<span class="built_in">transform</span>(point_son1,<span class="string">&quot;son2&quot;</span>);</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;在 Son2 中的坐标:x=%.2f,y=%.2f,z=%.2f&quot;</span>,</span><br><span class="line">                    point_son2.point.x,</span><br><span class="line">                    point_son2.point.y,</span><br><span class="line">                    point_son2.point.z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;发生异常:%s&quot;</span>,e.<span class="built_in">what</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        rate.<span class="built_in">sleep</span>();</span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line"><span class="keyword">add_executable</span>(dynamic_tf src/dynamic_tf.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add cmake target dependencies of the executable</span></span><br><span class="line"><span class="comment">## same as for the library above</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(dynamic_tf <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify libraries to link a library or executable target against</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(dynamic_tf</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>tf坐标变换</tag>
      </tags>
  </entry>
  <entry>
    <title>tf坐标变换实践_动态坐标变换</title>
    <url>/2021/11/01/tf%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%AE%9E%E8%B7%B5_%E5%8A%A8%E6%80%81%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>案例描述:启动 turtlesim_node,该节点中窗体有一个世界坐标系(左下角为坐标系原点)，乌龟是另一个坐标系，键盘控制乌龟运动，将两个坐标系的相对位置动态发布。通俗的说,本案例就是将相对于乌龟位姿的偏移量为(1,1,0)的坐标点动态转换成世界坐标系.</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><strong>案例分析:</strong></p>
<ol>
<li>乌龟本身不但可以看作坐标系，也是世界坐标系中的一个坐标点</li>
<li>订阅 turtle1/pose,可以获取乌龟在世界坐标系的 x坐标、y坐标、偏移量以及线速度和角速度</li>
<li>将 pose 信息转换成 坐标系相对信息并发布</li>
</ol>
<p><strong>实际案例:</strong></p>
<p>这个案例放在实际中的应用可以理解为这样,世界坐标系看成大地坐标,将乌龟看成是小车的地盘的坐标系,将将对于乌龟偏移量为(1,1,0)的点看成是小车的雷达,我们如何将不停运动的雷达的坐标转换成世界坐标系下的坐标呢?</p>
<blockquote>
<p>显然,雷达对于小车的偏移量是始终不变的,所以我们需要做的就是将雷达在小车坐标系下的坐标转换成世界坐标;</p>
</blockquote>
<h1 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h1><h2 id="发布者实现"><a href="#发布者实现" class="headerlink" title="发布者实现"></a>发布者实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;turtlesim/Pose.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/transform_broadcaster.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doPose</span><span class="params">(<span class="keyword">const</span> turtlesim::Pose::ConstPtr &amp;pose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建发布者对象</span></span><br><span class="line">    <span class="keyword">static</span> tf2_ros::TransformBroadcaster broadcaster;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//坐标信息</span></span><br><span class="line">    geometry_msgs::TransformStamped tfs;</span><br><span class="line">    tfs.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    tfs.child_frame_id = <span class="string">&quot;turtle1&quot;</span>;</span><br><span class="line">    tfs.transform.translation.x = pose-&gt;x;</span><br><span class="line">    tfs.transform.translation.y = pose-&gt;y;</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将欧拉角转换成四元数</span></span><br><span class="line">    tf2::Quaternion qtn;</span><br><span class="line">    qtn.<span class="built_in">setRPY</span>(<span class="number">0</span>,<span class="number">0</span>,pose-&gt;theta);</span><br><span class="line">    tfs.transform.rotation.x = qtn.<span class="built_in">getX</span>();</span><br><span class="line">    tfs.transform.rotation.y = qtn.<span class="built_in">getY</span>();</span><br><span class="line">    tfs.transform.rotation.z = qtn.<span class="built_in">getZ</span>();</span><br><span class="line">    tfs.transform.rotation.w = qtn.<span class="built_in">getW</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发布坐标</span></span><br><span class="line">    broadcaster.<span class="built_in">sendTransform</span>(tfs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//订阅乌龟的位姿</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;turtle_pose_sub&quot;</span>);</span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    ros::Subscriber sub = nh.subscribe&lt;turtlesim::Pose&gt;(<span class="string">&quot;/turtle1/pose&quot;</span>,<span class="number">100</span>,doPose);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="订阅方实现"><a href="#订阅方实现" class="headerlink" title="订阅方实现"></a>订阅方实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/PointStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//创建监听者对象</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;turtle_sub&quot;</span>);</span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义任意点坐标在turtle1下的坐标</span></span><br><span class="line">        geometry_msgs::PointStamped point_turtle;</span><br><span class="line">        point_turtle.header.frame_id = <span class="string">&quot;turtle1&quot;</span>;</span><br><span class="line">        point_turtle.header.stamp = ros::<span class="built_in">Time</span>();</span><br><span class="line">        point_turtle.point.x = <span class="number">1</span>; </span><br><span class="line">        point_turtle.point.y = <span class="number">1</span>;</span><br><span class="line">        point_turtle.point.z = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将turtle坐标下的点的坐标,转换成world坐标下的坐标</span></span><br><span class="line">            geometry_msgs::PointStamped point_world;</span><br><span class="line">            point_world = buffer.<span class="built_in">transform</span>(point_turtle,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;坐标点相对于 world 的坐标为:(%.2f,%.2f,%.2f)&quot;</span>,</span><br><span class="line">                     point_world.point.x,</span><br><span class="line">                     point_world.point.y,</span><br><span class="line">                     point_world.point.z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// std::cerr &lt;&lt; e.what() &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;发生异常.....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">        rate.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line"><span class="keyword">add_executable</span>(turtlesim_tf_pub src/turtlesim_tf_pub.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(turtlesim_tf_sub src/turtlesim_tf_sub.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add cmake target dependencies of the executable</span></span><br><span class="line"><span class="comment">## same as for the library above</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(turtlesim_tf_pub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(turtlesim_tf_sub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify libraries to link a library or executable target against</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(turtlesim_tf_pub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(turtlesim_tf_sub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRA</span></span><br></pre></td></tr></table></figure>
<h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>启动rocore</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<p>启动turtlesim gui节点,键盘控制节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtlesim_node </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosrun turtlesim turtle_teleop_key </span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rosrun tf_pratice turtlesim_tf_pub </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rosrun tf_pratice turtlesim_tf_sub </span><br><span class="line">[ INFO] [1635691363.394649902]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691364.394588314]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691365.394655574]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691366.394559019]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691367.394593083]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691368.394657894]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691369.394621326]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691370.394648743]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691371.394659086]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br><span class="line">[ INFO] [1635691372.394657664]: 坐标点相对于 world 的坐标为:(6.54,6.54,0.00)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>tf坐标变换</tag>
        <tag>turtlesim</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages设置自定义域名失效</title>
    <url>/2021/10/31/GitHub%20Pages%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<p>在GitHub Pages设置自定义域名之后，发现每次hexo d 后都会失效，又要重新设置，太麻烦了。<br><span id="more"></span><br>只要在source 目录添加一个新文件CNAME就好<br>CNAME –不带任何后缀，这就是全称，里面写的是你的域名<br>然后就ok了。<br>怎么push都不用再去GitHub Pages设置了</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>tf坐标变换实践_静态坐标变化</title>
    <url>/2021/10/31/tf%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%AE%9E%E8%B7%B5_%E9%9D%99%E6%80%81%E5%9D%90%E6%A0%87%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>案例描述:现有一机器人模型，核心构成包含主体与雷达，各对应一坐标系，坐标系的原点分别位于主体与雷达的物理中心，已知雷达原点相对于主体原点位移关系如下: x=0.2 y=0.0 z=0.5。当前雷达检测到一障碍物，在雷达坐标系中障碍物的坐标为 (2.0 3.0 5.0),请问，该障碍物相对于主体的坐标是多少？</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p><strong>实现分析:</strong></p>
<ol>
<li>坐标系相对关系，可以通过发布方发布</li>
<li>订阅方，订阅到发布的坐标系相对关系，再传入坐标点信息(可以写死)，然后借助于 tf 实现坐标变换，并将结果输出</li>
</ol>
<p><strong>实现流程:</strong></p>
<ol>
<li>新建功能包，添加依赖</li>
<li>编写发布方实现</li>
<li>编写订阅方实现</li>
<li>执行并查看结果</li>
</ol>
<h1 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h1><h2 id="发布者命令实现"><a href="#发布者命令实现" class="headerlink" title="发布者命令实现"></a>发布者命令实现</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosrun tf2_ros static_transform_publisher 0.2 0 0.5 0 0 0 /baselink /laser</span><br></pre></td></tr></table></figure>
<p>解释:rosrun tf2_ros static_transform_publisher x偏移量 y偏移量 z偏移量 z偏航角度 y俯仰角度 x翻滚角度 父级坐标系 子级坐标系</p>
<h2 id="查看发布信息"><a href="#查看发布信息" class="headerlink" title="查看发布信息"></a>查看发布信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rostopic list</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf_static</span><br><span class="line">/turtle1/cmd_vel</span><br><span class="line">/turtle1/color_sensor</span><br><span class="line">/turtle1/pose</span><br><span class="line">alvin@ros:~/catkin_ws$ rostopic <span class="built_in">echo</span> /tf_static</span><br><span class="line">transforms: </span><br><span class="line">  - </span><br><span class="line">    header: </span><br><span class="line">      seq: 1</span><br><span class="line">      stamp: </span><br><span class="line">        secs: 1635601530</span><br><span class="line">        nsecs: 483203886</span><br><span class="line">      frame_id: <span class="string">&quot;base_link&quot;</span></span><br><span class="line">    child_frame_id: <span class="string">&quot;laser&quot;</span></span><br><span class="line">    transform: </span><br><span class="line">      translation: </span><br><span class="line">        x: 0.2</span><br><span class="line">        y: 0.0</span><br><span class="line">        z: 0.5</span><br><span class="line">      rotation: </span><br><span class="line">        x: 0.0</span><br><span class="line">        y: 0.0</span><br><span class="line">        z: 0.0</span><br><span class="line">        w: 1.0</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h1 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h1><h2 id="发布者实现"><a href="#发布者实现" class="headerlink" title="发布者实现"></a>发布者实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/static_transform_broadcaster.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;static_pub&quot;</span>);</span><br><span class="line">    <span class="comment">//创建发布者对象</span></span><br><span class="line">    tf2_ros::StaticTransformBroadcaster broadcaster;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//坐标信息</span></span><br><span class="line">    geometry_msgs::TransformStamped tfs;</span><br><span class="line">    tfs.header.seq = <span class="number">1</span>;</span><br><span class="line">    tfs.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;base_link&quot;</span>;</span><br><span class="line">    tfs.child_frame_id = <span class="string">&quot;laser&quot;</span>;</span><br><span class="line">    tfs.transform.translation.x = <span class="number">0.2</span>;</span><br><span class="line">    tfs.transform.translation.y = <span class="number">0</span>;</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将欧拉角转换成四元数</span></span><br><span class="line">    tf2::Quaternion qtn;</span><br><span class="line">    qtn.<span class="built_in">setRPY</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    tfs.transform.rotation.x = qtn.<span class="built_in">getX</span>();</span><br><span class="line">    tfs.transform.rotation.y = qtn.<span class="built_in">getY</span>();</span><br><span class="line">    tfs.transform.rotation.z = qtn.<span class="built_in">getZ</span>();</span><br><span class="line">    tfs.transform.rotation.w = qtn.<span class="built_in">getW</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发布坐标</span></span><br><span class="line">    broadcaster.<span class="built_in">sendTransform</span>(tfs);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="订阅者实现"><a href="#订阅者实现" class="headerlink" title="订阅者实现"></a>订阅者实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/PointStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;static_sub&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建监听者对象</span></span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(ros::<span class="built_in">ok</span>())&#123;</span><br><span class="line">        <span class="comment">//定义某坐标点在laser坐标系下的值</span></span><br><span class="line">        geometry_msgs::PointStamped point_laser;</span><br><span class="line">        point_laser.header.frame_id = <span class="string">&quot;laser&quot;</span>;</span><br><span class="line">        point_laser.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        point_laser.point.x = <span class="number">1</span> ;</span><br><span class="line">        point_laser.point.y = <span class="number">2</span> ;</span><br><span class="line">        point_laser.point.z = <span class="number">7.3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将laser坐标系的点的坐标,转换成基坐标系下的坐标</span></span><br><span class="line">            geometry_msgs::PointStamped point_base;</span><br><span class="line">            point_base = buffer.<span class="built_in">transform</span>(point_laser,<span class="string">&quot;base_link&quot;</span>);</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;转换后的数据:(%.2f,%.2f,%.2f),参考的坐标系是:%s&quot;</span>,</span><br><span class="line">                     point_base.point.x,</span><br><span class="line">                     point_base.point.y,</span><br><span class="line">                     point_base.point.z,</span><br><span class="line">                     point_base.header.frame_id.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="built_in">ROS_INFO</span>(<span class="string">&quot;程序异常.....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        rate.<span class="built_in">sleep</span>();</span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line"><span class="keyword">add_executable</span>(static_tf_pub src/static_tf_pub.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(static_tf_sub src/static_tf_sub.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add cmake target dependencies of the executable</span></span><br><span class="line"><span class="comment">## same as for the library above</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(static_tf_pub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(static_tf_sub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify libraries to link a library or executable target against</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(static_tf_pub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(static_tf_sub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rosrun tf_pratice static_tf_pub </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rosrun tf_pratice static_tf_sub </span><br><span class="line">[ INFO] [1635601858.503067357]: 程序异常.....</span><br><span class="line">[ INFO] [1635601859.503191179]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601860.503162320]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601861.503066538]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601862.503088002]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601863.503098757]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601864.503162287]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ros</tag>
        <tag>tf坐标变换</tag>
      </tags>
  </entry>
  <entry>
    <title>视觉SLAM综述简介</title>
    <url>/2021/10/31/%E8%A7%86%E8%A7%89%20SLAM%E7%BB%BC%E8%BF%B0%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>本文选&lt;权美香，朴松昊，李国． 视觉 ＳＬＡＭ 综述&gt;一文,对整个论文进行梳理,让自己对整个SLAM的框架有一定的了解.</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<h1 id="视觉SLAM综述简介"><a href="#视觉SLAM综述简介" class="headerlink" title="视觉SLAM综述简介"></a>视觉SLAM综述简介</h1><blockquote>
<p>参考文献：</p>
<p>[1]权美香，朴松昊，李国． 视觉 ＳＬＡＭ 综述［Ｊ］． 智能系统学报， ２０１６， １１（６）： ７６８－７７６．</p>
</blockquote>
<h2 id="视觉SLAM方法介绍"><a href="#视觉SLAM方法介绍" class="headerlink" title="视觉SLAM方法介绍"></a>视觉SLAM方法介绍</h2><h3 id="视觉-SLAM的概念"><a href="#视觉-SLAM的概念" class="headerlink" title="视觉 SLAM的概念"></a>视觉 SLAM的概念</h3><p>视觉 SLAM指的是相机作为唯一的外部传感器，在进行自身定位的同时创建环境地图。 SLAM创建的地图<br>的好坏对之后自主的定位、路径规划以及壁障的性能起到一个决定性的作用。</p>
<h3 id="视觉SLAM的分类"><a href="#视觉SLAM的分类" class="headerlink" title="视觉SLAM的分类"></a>视觉SLAM的分类</h3><ul>
<li>单目视觉 SLAM (仅用一个相机作为唯一外部传感器)</li>
<li>立体视觉 SLAM (使用多个相机作为传感器)</li>
<li>RGB-D SLAM (基于单目相机与红外传感器结合构成的传感器)</li>
</ul>
<h3 id="视觉SLAM的方法介绍"><a href="#视觉SLAM的方法介绍" class="headerlink" title="视觉SLAM的方法介绍"></a>视觉SLAM的方法介绍</h3><p>根据利用图像信息的不同</p>
<ul>
<li>基于特征的 SLAM 方法</li>
<li>direct SLAM 方法</li>
</ul>
<h4 id="基于特征的-SLAM-方法"><a href="#基于特征的-SLAM-方法" class="headerlink" title="基于特征的 SLAM 方法"></a>基于特征的 SLAM 方法</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>基于特征的 SLAM 方法指的是对输入的图像进行<strong>特征点检测及提取</strong>，并基于 ２⁃Ｄ 或 ３⁃Ｄ 的特征匹配<strong>计算相机位姿及对环境</strong>进行建图。如果对整幅图像进行处理，则计算复杂度太高，由于特征在保存图像重要信息的同时有效减少了计算量，从而被广泛使用。</p>
<h5 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h5><h6 id="借助于滤波器实现的单目视觉SLAM"><a href="#借助于滤波器实现的单目视觉SLAM" class="headerlink" title="借助于滤波器实现的单目视觉SLAM"></a>借助于<strong>滤波器</strong>实现的单目视觉SLAM</h6><ul>
<li><p>扩展卡尔曼滤波器（extended Kalman filter，EKF）</p>
<p><strong>原理：</strong>利用扩展卡尔曼滤波器来实现同时定位与地图创建，其主要思想是使用状态向量来存储相机位姿及地图点的三维坐标，利用概率密度函数来表示不确定性，从观测模型和递归的计算，最终获得更新的状态向量的均值和方差。</p>
<p><strong>缺点：</strong>由于EKF的引进，SLAM算法会有计算复杂度及由于线性化而带来的不确定性问题。</p>
</li>
<li><p>无迹卡尔曼滤波器（Unscented Kal-man filter，UKF）</p>
<p>该方法虽然对不确定性有所改善，但同时也增加了计算复杂度。</p>
</li>
<li><p>Rao-Blackwellized粒子滤波（Particle filter）</p>
<p>该方法避免了线性化，且对相机的快速运动有一定的弹力，但是为了保证定位精度，则需要使用较多的粒子，从而大大提高了计算复杂度</p>
</li>
</ul>
<h6 id="基于关键帧的单目视觉SLAM"><a href="#基于关键帧的单目视觉SLAM" class="headerlink" title="基于关键帧的单目视觉SLAM"></a>基于关键帧的单目视觉SLAM</h6><ul>
<li><p>Parallel Tracking and Mapping for Small AR Workspaces（PTAM）</p>
<p>该论文提出了一个简单、有效的提取关键帧的方法，且将定位和创建地图分为两个独立的任务，并在两个线程上进行。</p>
</li>
<li><p>A Versatile and Accurate Monocular SLAM System</p>
<p>在关键帧的基础上提出的一个单目视觉 SLAM 系统，将整个 SLAM 过程分为定位、创建地图、闭环 ３个线程，且对这 ３ 个任务使用相同的 ORB 特征，且引进本质图的概念来加速闭环校正过程。</p>
</li>
</ul>
<h6 id="基于RGB-D数据的SLAM"><a href="#基于RGB-D数据的SLAM" class="headerlink" title="基于RGB-D数据的SLAM"></a>基于RGB-D数据的SLAM</h6><p>微软公司推出的Kinect相机，能够同时获得图像信息及深度信息，从而简化了三维重建的过程，且由于价格便宜，基于RGB_D数据的SLAM得到了迅速的发展。</p>
<p>《RGB-D map-ping: using depth cameras for dense 3-D modeling of in-door environments》最早提出的使用<br>RGB-D相机对室内环境进行三维重建的方法，在彩色图像中提取 SHIF特征并在深度图像上查找相应的深度信息。然后使用RANSAC方法对3-D特征点进行匹配并计算出相应的刚体运动变换，再以此作为ICP (iterative closest point）的初始值来求出更精确的位姿。</p>
<p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/image-20211009165001747.png" alt="image-20211009165001747"></p>
<h4 id="直接的SLAM-方法"><a href="#直接的SLAM-方法" class="headerlink" title="直接的SLAM 方法"></a>直接的SLAM 方法</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>直接的SLAM方法指的是直接对<strong>像素点的强度</strong>进行操作，避免了特征点的提取，该方法能够使用图像的所有信息。此外，提供更多的环境几何信息，有助于对地图的后续使用。且对特征较少的环境有更高的准确性和鲁棒性。</p>
<h5 id="发展-1"><a href="#发展-1" class="headerlink" title="发展"></a>发展</h5><ul>
<li>《Real-time dense geometry from a handheld camera》</li>
</ul>
<p>相机定位方法依赖图像的每个像素点，即用稠密的图像对准来进行自身定位，并构建出稠密的3-D地图。</p>
<ul>
<li>《Semi-Dense Visual Odometry for a Monocular Camera 》</li>
</ul>
<p>对当前图像构建半稠密inverse深度地图，并使用稠密图像配准（dense image alignment）法计算相机位姿。构建半稠密地图即估计图像中梯度较大的所有像素的深度值，该深度值被表示为高斯分布，且当新的图像到来时，该深度值被更新。</p>
<ul>
<li>《Dense tracking and mapping in real-time》</li>
</ul>
<p>对每个像素点进行概率的深度测量，有效降低了位姿估计的不确定性。</p>
<ul>
<li>《Fast semi-direct monocular visual odometry 》</li>
</ul>
<p>提出了一种半直接的单目视觉里程计方法，该方法相比于直接法不是对整幅图像进行直接匹配从而获得相机位姿，而是通过在整幅图像中提取的图像块来进行位姿的获取，这样能够增强算法的鲁棒性。</p>
<ul>
<li>《Large-Scale Direct Monocular SLAM》</li>
</ul>
<p>为了构建稠密的三维环境地图，Engel等提出了LSD-SLAM算法（large-scale direct SLAM），相比之前的直接的视觉里程计方法，该方法在估计高准确性的相机位姿的同时能够创建大规模的三维环境地图。</p>
<ul>
<li>《Kinect-Fusion: Real-time dense surface mapping and tracking》27</li>
</ul>
<p>提出了kinect融合的方法，该方法通过Kinect获取的深度图像对每帧图像中的每个像素进行最小化距离测量而获得相机位姿，且融合所有深度图像，从而获得全局地图信息。</p>
<ul>
<li>《A dense map building approach from spherical RGBD images》28</li>
</ul>
<p>使用图像像素点的光度信息和几何信息来构造误差函数，通过最小化误差函数而获得相机位姿，且地图问题被处理为位姿图表示。</p>
<ul>
<li>《Dense visual SLAM for RGB-D cameras》29</li>
</ul>
<p>这是较好的直接RGBD SLAM方法，该方法结合像素点的强度误差与深度误差作为误差函数，通过最小化代价函数，从而求出最优相机位姿，该过程由g20实现，并提出了基于熵的关键帧提取及闭环检方法，从而大大降低了路径的误差。</p>
<ul>
<li>《Distinctive image features from scale-invariant keypoints》30</li>
</ul>
<h3 id="视觉-SLAM主要标志性成果"><a href="#视觉-SLAM主要标志性成果" class="headerlink" title="视觉 SLAM主要标志性成果"></a>视觉 SLAM主要标志性成果</h3><h4 id="MonoSLAM"><a href="#MonoSLAM" class="headerlink" title="MonoSLAM"></a>MonoSLAM</h4><blockquote>
<p>《Mono-SLAM: real-time single camera SLAM》</p>
</blockquote>
<p>Andrew Davison提出的第1个基于EKF方法的单目SLAM，能够达到实时但是不能确定漂移多少，能够在概率框架下在线创建稀疏地图。</p>
<h4 id="DTAM"><a href="#DTAM" class="headerlink" title="DTAM"></a>DTAM</h4><blockquote>
<p>《DTAM: Dense tracking and mapping in real-time》</p>
</blockquote>
<p>2011年提出的基于直接法的单目SLAM算法，该方法通过帧率的整幅图像对准来获得相对于稠密地图的相机的6个自由度位姿，能够在GPU上达到实时的效果。</p>
<h4 id="PTAM"><a href="#PTAM" class="headerlink" title="PTAM"></a>PTAM</h4><blockquote>
<p>《Parallel Tracking and Mapping for Small AR Workspaces》</p>
</blockquote>
<p>由Georg Klein提出的第1个用多线程处理SLAM的算法，将跟踪和建图分为两个单独的任务并在两个平行的线程进行处理。</p>
<h4 id="Ki-nectFusion"><a href="#Ki-nectFusion" class="headerlink" title="Ki-nectFusion"></a>Ki-nectFusion</h4><blockquote>
<p>《Kinect-Fusion: Real-time dense surface mapping and tracking》</p>
</blockquote>
<p>第1个基于Kinect的能在GPU上实时构建稠密三维地图的算法，该方法仅使用Kinect相机获取的深度信息去计算传感器的位姿以及构建精确的环境3-D地图模型。</p>
<h4 id="LSD-SLAM"><a href="#LSD-SLAM" class="headerlink" title="LSD-SLAM"></a>LSD-SLAM</h4><blockquote>
<p>《LSD-SLAM: Large-Scale Direct Monocular SLAM》</p>
</blockquote>
<p>直接的单目SLAM方法，即直接对图像的像素点进行处理，相比于之前的基于直接法的单目视觉里程计，不仅能计算出自身的位姿，还能构建出全局的半稠密且精确的环境地图。其中的追踪方法，直接在sim3上进行操作，从而能够准确地检测尺度漂移，可在CPU上实时运行。</p>
<h4 id="ORB-SLAM"><a href="#ORB-SLAM" class="headerlink" title="ORB_SLAM"></a>ORB_SLAM</h4><blockquote>
<p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM  System》</p>
</blockquote>
<p>2015年出的比较完整的基于关键帧的单目SLAM算法，将整个系统分为追踪、地图创建、闭环控制3个线程进行处理，且特征的提取与匹配、稀疏地图的创建、位置识别都是基于ORB特征，其定位精确度很高，且可以实时运行。</p>
<h3 id="SLAM的主要研究实验室"><a href="#SLAM的主要研究实验室" class="headerlink" title="SLAM的主要研究实验室"></a>SLAM的主要研究实验室</h3><p>1）<strong>苏黎世联邦理工学院的Autonomous System Lab</strong>:该实验室在tango项目上与谷歌合作，负责视觉-<br>惯导的里程计，基于视觉的定位和深度重建算法。<br>2）<strong>明尼苏达大学的Multiple Autonomous Robotic Systems Laboratory</strong>，主要研究四轴飞行器导航，合作建图，基于地图的定位，半稠密地图创建等。<br>3）<strong>慕尼黑理工大学的The Computer Vision Group</strong>，主要研究基于图像的3-D重建，机器人视觉视觉SLAM等。</p>
<h2 id="视觉-SLAM-关键性问题"><a href="#视觉-SLAM-关键性问题" class="headerlink" title="视觉 SLAM 关键性问题"></a>视觉 SLAM 关键性问题</h2><h3 id="特征检测与匹配"><a href="#特征检测与匹配" class="headerlink" title="特征检测与匹配"></a>特征检测与匹配</h3><p>目前点特征使用最多,使用最多的点特征如下</p>
<ul>
<li><strong>SIFT（scale invariant feature transform）特征</strong></li>
</ul>
<p>SIFT特征已发展10多年，且获得了巨大的成功。SIFT特征具有可辨别性，由于其描述符用高维向量（128维）表示，且具有旋转不变性、尺度不变性、放射变换不变性，对噪声和光照变化也有鲁棒性。[33-6]在视觉SLAM里使用了SIFT特征，但是由于SIFT特征的向量维数太高，导致时间复杂度高。</p>
<p>《Distinctive image features from scale-invariant keypoints》</p>
<ul>
<li><strong>SURT（speeded up robust features）[31]特征</strong></li>
</ul>
<p>SURF特征具有尺度不变性、旋转不变性，且相对于SIFT特征的算法速度提高了3到7倍。在文献[37-39]SURF被作为视觉SLAM的特征提取方法，与SIFT特征相比，时间复杂度有所降低。对两幅图像的SIFT和SURF特征进行匹配时通常是计算两个特征向量之间的欧氏距离，并以此作为特征点的相似性判断度量。</p>
<p>《spee-ded up robust features》</p>
<ul>
<li><strong>ORB（oriented fast and rotated BRIEF）[32]特征。</strong></li>
</ul>
<p>ORB特征是FAST特征检测算子与BRIEF描述符的结合，并在其基础上做了一些改进。ORB特征最大的优点是计算速度快，是SIFT特征的100倍，SURF特征的10倍，其原因是FAST特征检测速度就很快，再加上BRIEF描述符是二进制串，大大缩减了匹配速度，而且具有旋转不变性，但不具备尺度不变性。ORB特征匹配是以BRIEF二进制描述符的汉明距离为相似性度量的。</p>
<p>《An efficient alternative to SIFT or SURF》</p>
<p>在大量包含直线和曲线的环境下，使用点特征时，环境中很多信息都将被遗弃，为了弥补这个缺陷，从而也提出了<strong>基于边特征的视觉SLAM</strong>和<strong>基于区域特征的视觉SLAM</strong>方法。</p>
<blockquote>
<p>基于边特征的视觉SLAM《Edge landmarks in monocular SLAM》《Improving the agility of keyframe-based SLAM 》</p>
<p>基于区域特征的视觉SLAM《Using superpixels in monocular SLAM》</p>
</blockquote>
<h3 id="关键帧的选择"><a href="#关键帧的选择" class="headerlink" title="关键帧的选择"></a>关键帧的选择</h3><p>帧对帧的对准方法会造成大的累积漂浮，由于位姿估计过程中总会产生误差。为了减少帧对帧的对准方法带来的误差，基于关键帧的SLAM方法被提出。</p>
<p>《Parallel Tracking and Mapping for Small AR Workspaces》</p>
<p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM System》</p>
<blockquote>
<p>提出满足以下全部条件时该帧作为关键帧插入到地图里：从上一个关键帧经过了n个帧；当前帧至少能看到n个地图点，位姿估计准确性较高。</p>
</blockquote>
<p>《RGB-D Mapping: Using Depth Cameras for Dense 3-D Modeling of Indoor Environments》</p>
<blockquote>
<p>当两幅图像看到的共同特征点数低于一定阈值时，创建一个新的关键帧。</p>
</blockquote>
<p>《Dense visual SLAM for RGB-D cameras 》</p>
<blockquote>
<p>提出了一种基于熵的相似性的选择关键帧的方法，由于简单的阈值不适用于不同的场景，对每一帧计算一个熵的相似性比，如果该值小于一个预先定义的阈值，则前一帧被选为新的关键帧，并插入地图里，该方法大大减少了位姿漂浮。</p>
</blockquote>
<h3 id="闭环检测（loop-closing）方法"><a href="#闭环检测（loop-closing）方法" class="headerlink" title="闭环检测（loop closing）方法"></a>闭环检测（loop closing）方法</h3><p>闭环检测及位置识别，判断当前位置是否是以前已访问过的环境区域。三维重建过程中必然会产生误差累积，实现闭环是消除的一种手段。在位置识别算法中，视觉是主要的传感器。</p>
<p>文献《A compari-son of loop closing techniques in monocular SLAM》对闭环检测方法进行了比较</p>
<p>且得出图像对图像的匹配性能<strong>优于</strong>地图对地图，图像对地图的匹配方法。</p>
<ul>
<li><p>图像对图像《Tracking and mapping recognizable features》《Accelerated appearance-only SLAM》</p>
<blockquote>
<p>图像对图像的匹配方法中，词袋（bag of words）方法由于其有效性得到了广泛的应用</p>
<p>《Scalable Recognition with a Vocabulary Tree》</p>
</blockquote>
</li>
<li><p>地图对地图《Unscented SLAM for large-scale outdoor environments 》</p>
</li>
<li><p>图像对地图《Probabilistic Lo-calization and Mapping in the Space of Appearance》</p>
</li>
</ul>
<p>《Unified loop closing and recovery for real time monocular SLAM》</p>
<blockquote>
<p>对重定位和闭环检测提出了统一的方法，它们使用基于16维的SIFT特征的词典方法不断地搜索已访问过的位置。</p>
</blockquote>
<p>《Real-time loop detec-tion with bags of binary words 》《Appearance-only SLAM at large scale with FAB-MAP》</p>
<blockquote>
<p>使用基于SURF描述符的词典方法去进行闭环检测SURF特征，SURF特征提取需要花费400 ms去进行。</p>
</blockquote>
<p>《Distinctive Image features from scale-invariant keypoints》</p>
<blockquote>
<p>使用SIFT特征执行全局定位，且用KD树来排列地图点。</p>
</blockquote>
<p>《Bags of binary words for fast place recognition in image sequences》</p>
<blockquote>
<p>提出了一种使用基于FAST特征检测与BRIEF二进制描述符词典，且添加了直接索引（direct index），直接索引的引入使得能够有效地获得图像之间的匹配点，从而加快闭环检测的几何验证。</p>
</blockquote>
<p>《Fast relocalisation andloop closing in keyframe-based SLAM》</p>
<blockquote>
<p>用基于ORB特征的词典方法进行位置识别，由于ORB特征具有旋转不变性且能处理尺度变化，该方法能识别位置从不同的视角。</p>
</blockquote>
<p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM System》</p>
<blockquote>
<p>该文献的位置识别方法建于文献《Fast relocalisation andloop closing in keyframe-based SLAM》的主要思想上，即使用基于ORB特征的词典方法选出候选闭环，再通过相似性计算进行闭环的几何验证。</p>
</blockquote>
<h3 id="地图优化"><a href="#地图优化" class="headerlink" title="地图优化"></a>地图优化</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>对于一个在复杂且动态的环境下工作的机器人，3-D地图的快速生成是非常重要的，且创建的环境地图对之后的定位、路径规划及壁障的性能起到一个关键性的作用，从而精确的地图创建也是非常重要的。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>闭环检测成功后，往地图里添加闭环约束，执行闭环校正。闭环问题可以描述为<strong>大规模的光束平差法（bundle adjustment）问题</strong>，即对相机位姿及所有的地图点3-D坐标进行优化，但是该优化计算复杂度太高，从而很难实现实时。</p>
<h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><ul>
<li>通过位姿图优化（pose graph optimization）方法来对闭环进行优化</li>
</ul>
<p>顶点为相机位姿，边表示位姿之间相对变换的图称为位姿图，位姿图优化即将闭环误差沿着图进行分配，即均匀分配到图上的所有位姿上。图优化通常由图优化框架g2o（general graph optimization）《A general framework for graph optimization 》里的LM（leven-berg-marquardt）算法实现。</p>
<p>《Dense visual SLAM for RGB-D cameras》</p>
<blockquote>
<p>提出的RGB-D SLAM算法的位姿图里每个边具有一个权重，从而在优化过程中，不确定性高的边比不确定性低的边需要变化更多去补偿误差，并在最后，对图里的每个顶点进行额外的闭环检测且重新优化整个图。</p>
</blockquote>
<p>《Scale drift-aware large scale monocular SLAM》</p>
<blockquote>
<p>在闭环校正步骤使用了位姿图优化技术去实现旋转，平移及尺度漂浮的有效校正。</p>
</blockquote>
<p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM System》</p>
<blockquote>
<p>在闭环检测成功后构建了本质图，并对该图进行位姿图优化。本质图包含所有的关键帧，但相比于covisibility图，减少了关键帧之间的边约束。本质图包含生成树、闭环连接及covisibility图里权重较大的边。</p>
</blockquote>
<h2 id="视觉SLAM主要发展趋势与研究热点"><a href="#视觉SLAM主要发展趋势与研究热点" class="headerlink" title="视觉SLAM主要发展趋势与研究热点"></a>视觉SLAM主要发展趋势与研究热点</h2><h3 id="多传感器融合"><a href="#多传感器融合" class="headerlink" title="多传感器融合"></a>多传感器融合</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>相机能够捕捉场景的丰富细节，而惯性测量单元（inertial measurement unit，IMU）有高的帧率且相对小的能够获得准确的短时间估计，这两个传感器能够相互互补，从而一起使用能够获得更好的结果。</p>
<h4 id="发展-2"><a href="#发展-2" class="headerlink" title="发展"></a>发展</h4><p>最初的视觉与IMU结合的位姿估计是用<strong>滤波方法</strong>解决的，用IMU的测量值作为预测值，视觉的测量值用于更新。</p>
<p>《A multi-state con-straint Kalman filter for vision-aided inertial navigation》</p>
<blockquote>
<p>提出了一种基于EKF的IMU与单目视觉的实时融合方法，提出一种测量模型能够表示一个静态特征被多个相机所观察时的几何约束，该测量模型是最优的且不需要在EKF的状态向量里包括特征的3-D坐标。</p>
</blockquote>
<p>《A dual-layer estima-tor architecture for long-term localization》</p>
<blockquote>
<p>将融合问题分为两个线程进行处理，连续图像之间的惯性测量和特征跟踪被局部地在第1个线程进行处理，提供高频率的位置估计，第2个线程包含一个间歇工作的光束法平差的迭代估计，能够减少线性误差的影响。许多结果都已证明在准确性上基于优化的视觉SLAM优于基于滤波的SLAM方法。</p>
</blockquote>
<p>《Keyframe-based visual-inertial slam using nonlinear opti-mization》</p>
<blockquote>
<p>将IMU的误差以全概率的形式融合到路标的重投影误差里，构成将被优化的联合非线性误差函数，其中通过关键帧来边缘化之前的状态去维持一个固定大小的优化窗口，保证实时操作。考虑到基于优化方法的视觉-惯导导航的计算复杂度问题，</p>
</blockquote>
<p>参考<a href="https://www">https://www</a>. google. com/a-tap/projecttango/.</p>
<blockquote>
<p>通过预积分选出的关键帧之间的惯性测量来进行解决，预积分能够精确地概括数百个惯性测量到一个单独的相对运动约束，这个预积分的IMU模型能被完美地融合到视觉-惯性的因子图的框架下。该系统的实验结果表明该系统要比Google的Tango还要精确。</p>
</blockquote>
<h3 id="SLAM与深度学习的结合"><a href="#SLAM与深度学习的结合" class="headerlink" title="SLAM与深度学习的结合"></a>SLAM与深度学习的结合</h3><p>随着深度学习在计算机视觉领域的大成功，大家对深度学习在机器人领域的应用有很大的兴趣。SLAM是一个大系统，里面有很多子模块，例如闭环检测，立体匹配等，都可通过深度学习的使用来获得更优的结果。</p>
<h4 id="发展-3"><a href="#发展-3" class="headerlink" title="发展"></a>发展</h4><p>《Stereo matching by training a convolutional neural network to compare image patches》</p>
<blockquote>
<p>提出了一种基于深度学习的立体匹配方法，用卷积神经网络来学习小图像块间的相似性，该卷积神经网络输出的结果用于线性化立体匹配代价。</p>
</blockquote>
<p>《On the per-formance of ConvNet features for place recognition》</p>
<blockquote>
<p>通过整合局部敏感散列法和新的语义搜寻空间划分的优化技术，使用卷积神经网络和大的地图达到实时的位置识别。</p>
</blockquote>
<p>《Exploring representation learning with CNNs for frame-to-frame egomotion estimation》</p>
<blockquote>
<p>使用卷积神经网络去学习视觉里程计的最佳的视觉特征和最优的估计器。</p>
</blockquote>
<p>《Modelling uncertainty in deep learning for camera relocalization》</p>
<blockquote>
<p>提出了一种重定位系统，使用贝叶斯卷积神经网络从单个彩色图像计算出六个自由度的相机位姿及其不确定性。</p>
</blockquote>
<h2 id="视觉SLAM的优缺点分析"><a href="#视觉SLAM的优缺点分析" class="headerlink" title="视觉SLAM的优缺点分析"></a>视觉SLAM的优缺点分析</h2><h3 id="单目视觉SLAM"><a href="#单目视觉SLAM" class="headerlink" title="单目视觉SLAM"></a>单目视觉SLAM</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>单目相机应用灵活、简单、价格低。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>单目视觉SLAM在每个时刻只能获取一张图像，且只能依靠获得的图像数据计算环境物体的方向信息，无法直接获得可靠的深度信息，从而初始地图创建及特征点的深度恢复都比较困难。</p>
<p>此外，尺度不确定性是单目SLAM的主要特点，它是主要的误差源之一，但是正是尺度不确定性才使得单目SLAM能够在大尺度和小尺度环境之间进行自由转换。</p>
<h3 id="双目视觉SLAM"><a href="#双目视觉SLAM" class="headerlink" title="双目视觉SLAM"></a>双目视觉SLAM</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>双目视觉SLAM利用外极线几何约束的原理去匹配左右两个相机的特征，从而能够在当前帧速率的条件下直接提取完整的特征数据，因而应用比较广泛，它直接解决了系统地图特征的初始化问题。</p>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>但是系统设计比较复杂，系统成本比较高，且它的视角范围受到一定限制，不能够获取远处的场景，从而只能在一定的尺度范围内进行可靠的测量，从而缺乏灵活性。</p>
<h3 id="RGBD-SLAM"><a href="#RGBD-SLAM" class="headerlink" title="RGBD SLAM"></a>RGBD SLAM</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>深度相机在获得彩色图像的同时获得深度图像，从而方便获得深度信息，且能够获得稠密的地图</p>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>成本高，体积大，有效探测距离太短，从而可应用环境很有限。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>为了弥补视觉信息的不足，视觉传感器可以与惯性传感器（IMU）、激光等传感器融合，通过传感器之间的互补获得更加理想的结果。此外，为了能在实际环境中进行应用，SLAM的鲁棒性需要很高，从而足够在各种复杂环境下进行准确的处理，SLAM的计算复杂度也不能太高，从而达到实时效果。</p>
]]></content>
      <categories>
        <category>文献阅读</category>
      </categories>
      <tags>
        <tag>文献阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT1002_写出这个数</title>
    <url>/2021/10/30/PAT1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>输入格式：</p>
<blockquote>
<p> 每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p>
</blockquote>
<p>输出格式：</p>
<blockquote>
<p> 在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>
</blockquote>
<p>输入样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1234567890987654321123456789</span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yi san wu</span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>)n[i] - <span class="number">48</span>;</span><br><span class="line">        sum = x + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum= &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">order</span>(sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果 n/10==0，则输出n</span></span><br><span class="line"><span class="comment">// 否则 先对n/10进行相同处理，之后输出n%10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    string c_num[<span class="number">10</span>]=&#123;<span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">order</span>(num/<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> num1 = num%<span class="number">10</span>;</span><br><span class="line">        cout &lt;&lt; c_num[num1]&lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; c_num[num] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT1001_害死人不偿命的(3n+1)猜想</title>
    <url>/2021/10/30/PAT1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>卡拉兹(Callatz)猜想：对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<span id="more"></span>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？<br>输入格式：</p>
<blockquote>
<p>每个测试输入包含 1 个测试用例，即给出正整数 n 的值。</p>
</blockquote>
<p>输出格式：</p>
<blockquote>
<p>输出从 n 计算到 1 需要的步数。</p>
</blockquote>
<p>输入样例：</p>
<blockquote>
<p>3<br>  结尾无空行</p>
</blockquote>
<p>输出样例：</p>
<blockquote>
<p>5<br>  结尾无空行<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeParity</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deal</span><span class="params">(<span class="keyword">bool</span> flag,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="built_in">judgeParity</span>(n);</span><br><span class="line">        n = <span class="built_in">deal</span>(flag,n);</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;count = &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeParity</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deal</span><span class="params">(<span class="keyword">bool</span> flag,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        n = n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        n = (<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<div class="note success"><p>初学,待进一步优化......</p></div>
</blockquote>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
