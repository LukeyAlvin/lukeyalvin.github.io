<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robot Go!</title>
  
  <subtitle>一份耕耘,一份收获</subtitle>
  <link href="http://lukeyalvin.top/atom.xml" rel="self"/>
  
  <link href="http://lukeyalvin.top/"/>
  <updated>2021-10-30T16:42:13.076Z</updated>
  <id>http://lukeyalvin.top/</id>
  
  <author>
    <name>Lukey Alvin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>视觉SLAM综述简介</title>
    <link href="http://lukeyalvin.top/2021/10/30/%E8%A7%86%E8%A7%89%20SLAM%E7%BB%BC%E8%BF%B0%E7%AE%80%E4%BB%8B/"/>
    <id>http://lukeyalvin.top/2021/10/30/%E8%A7%86%E8%A7%89%20SLAM%E7%BB%BC%E8%BF%B0%E7%AE%80%E4%BB%8B/</id>
    <published>2021-10-30T15:52:04.195Z</published>
    <updated>2021-10-30T16:42:13.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本文选&lt;权美香，朴松昊，李国． 视觉 ＳＬＡＭ 综述&gt;一文,对整个论文进行梳理,让自己对整个SLAM的框架有一定的了解.</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="视觉SLAM综述简介"><a href="#视觉SLAM综述简介" class="headerlink" title="视觉SLAM综述简介"></a>视觉SLAM综述简介</h1><blockquote><p>参考文献：</p><p>[1]权美香，朴松昊，李国． 视觉 ＳＬＡＭ 综述［Ｊ］． 智能系统学报， ２０１６， １１（６）： ７６８－７７６．</p></blockquote><h2 id="视觉SLAM方法介绍"><a href="#视觉SLAM方法介绍" class="headerlink" title="视觉SLAM方法介绍"></a>视觉SLAM方法介绍</h2><h3 id="视觉-SLAM的概念"><a href="#视觉-SLAM的概念" class="headerlink" title="视觉 SLAM的概念"></a>视觉 SLAM的概念</h3><p>视觉 SLAM指的是相机作为唯一的外部传感器，在进行自身定位的同时创建环境地图。 SLAM创建的地图<br>的好坏对之后自主的定位、路径规划以及壁障的性能起到一个决定性的作用。</p><h3 id="视觉SLAM的分类"><a href="#视觉SLAM的分类" class="headerlink" title="视觉SLAM的分类"></a>视觉SLAM的分类</h3><ul><li>单目视觉 SLAM (仅用一个相机作为唯一外部传感器)</li><li>立体视觉 SLAM (使用多个相机作为传感器)</li><li>RGB-D SLAM (基于单目相机与红外传感器结合构成的传感器)</li></ul><h3 id="视觉SLAM的方法介绍"><a href="#视觉SLAM的方法介绍" class="headerlink" title="视觉SLAM的方法介绍"></a>视觉SLAM的方法介绍</h3><p>根据利用图像信息的不同</p><ul><li>基于特征的 SLAM 方法</li><li>direct SLAM 方法</li></ul><h4 id="基于特征的-SLAM-方法"><a href="#基于特征的-SLAM-方法" class="headerlink" title="基于特征的 SLAM 方法"></a>基于特征的 SLAM 方法</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>基于特征的 SLAM 方法指的是对输入的图像进行<strong>特征点检测及提取</strong>，并基于 ２⁃Ｄ 或 ３⁃Ｄ 的特征匹配<strong>计算相机位姿及对环境</strong>进行建图。如果对整幅图像进行处理，则计算复杂度太高，由于特征在保存图像重要信息的同时有效减少了计算量，从而被广泛使用。</p><h5 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h5><h6 id="借助于滤波器实现的单目视觉SLAM"><a href="#借助于滤波器实现的单目视觉SLAM" class="headerlink" title="借助于滤波器实现的单目视觉SLAM"></a>借助于<strong>滤波器</strong>实现的单目视觉SLAM</h6><ul><li><p>扩展卡尔曼滤波器（extended Kalman filter，EKF）</p><p><strong>原理：</strong>利用扩展卡尔曼滤波器来实现同时定位与地图创建，其主要思想是使用状态向量来存储相机位姿及地图点的三维坐标，利用概率密度函数来表示不确定性，从观测模型和递归的计算，最终获得更新的状态向量的均值和方差。</p><p><strong>缺点：</strong>由于EKF的引进，SLAM算法会有计算复杂度及由于线性化而带来的不确定性问题。</p></li><li><p>无迹卡尔曼滤波器（Unscented Kal-man filter，UKF）</p><p>该方法虽然对不确定性有所改善，但同时也增加了计算复杂度。</p></li><li><p>Rao-Blackwellized粒子滤波（Particle filter）</p><p>该方法避免了线性化，且对相机的快速运动有一定的弹力，但是为了保证定位精度，则需要使用较多的粒子，从而大大提高了计算复杂度</p></li></ul><h6 id="基于关键帧的单目视觉SLAM"><a href="#基于关键帧的单目视觉SLAM" class="headerlink" title="基于关键帧的单目视觉SLAM"></a>基于关键帧的单目视觉SLAM</h6><ul><li><p>Parallel Tracking and Mapping for Small AR Workspaces（PTAM）</p><p>该论文提出了一个简单、有效的提取关键帧的方法，且将定位和创建地图分为两个独立的任务，并在两个线程上进行。</p></li><li><p>A Versatile and Accurate Monocular SLAM System</p><p>在关键帧的基础上提出的一个单目视觉 SLAM 系统，将整个 SLAM 过程分为定位、创建地图、闭环 ３个线程，且对这 ３ 个任务使用相同的 ORB 特征，且引进本质图的概念来加速闭环校正过程。</p></li></ul><h6 id="基于RGB-D数据的SLAM"><a href="#基于RGB-D数据的SLAM" class="headerlink" title="基于RGB-D数据的SLAM"></a>基于RGB-D数据的SLAM</h6><p>微软公司推出的Kinect相机，能够同时获得图像信息及深度信息，从而简化了三维重建的过程，且由于价格便宜，基于RGB_D数据的SLAM得到了迅速的发展。</p><p>《RGB-D map-ping: using depth cameras for dense 3-D modeling of in-door environments》最早提出的使用<br>RGB-D相机对室内环境进行三维重建的方法，在彩色图像中提取 SHIF特征并在深度图像上查找相应的深度信息。然后使用RANSAC方法对3-D特征点进行匹配并计算出相应的刚体运动变换，再以此作为ICP (iterative closest point）的初始值来求出更精确的位姿。</p><p><img src="https://gitee.com/LukeyAlvin/img_mk/raw/master/img/image-20211009165001747.png" alt="image-20211009165001747"></p><h4 id="直接的SLAM-方法"><a href="#直接的SLAM-方法" class="headerlink" title="直接的SLAM 方法"></a>直接的SLAM 方法</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p>直接的SLAM方法指的是直接对<strong>像素点的强度</strong>进行操作，避免了特征点的提取，该方法能够使用图像的所有信息。此外，提供更多的环境几何信息，有助于对地图的后续使用。且对特征较少的环境有更高的准确性和鲁棒性。</p><h5 id="发展-1"><a href="#发展-1" class="headerlink" title="发展"></a>发展</h5><ul><li>《Real-time dense geometry from a handheld camera》</li></ul><p>相机定位方法依赖图像的每个像素点，即用稠密的图像对准来进行自身定位，并构建出稠密的3-D地图。</p><ul><li>《Semi-Dense Visual Odometry for a Monocular Camera 》</li></ul><p>对当前图像构建半稠密inverse深度地图，并使用稠密图像配准（dense image alignment）法计算相机位姿。构建半稠密地图即估计图像中梯度较大的所有像素的深度值，该深度值被表示为高斯分布，且当新的图像到来时，该深度值被更新。</p><ul><li>《Dense tracking and mapping in real-time》</li></ul><p>对每个像素点进行概率的深度测量，有效降低了位姿估计的不确定性。</p><ul><li>《Fast semi-direct monocular visual odometry 》</li></ul><p>提出了一种半直接的单目视觉里程计方法，该方法相比于直接法不是对整幅图像进行直接匹配从而获得相机位姿，而是通过在整幅图像中提取的图像块来进行位姿的获取，这样能够增强算法的鲁棒性。</p><ul><li>《Large-Scale Direct Monocular SLAM》</li></ul><p>为了构建稠密的三维环境地图，Engel等提出了LSD-SLAM算法（large-scale direct SLAM），相比之前的直接的视觉里程计方法，该方法在估计高准确性的相机位姿的同时能够创建大规模的三维环境地图。</p><ul><li>《Kinect-Fusion: Real-time dense surface mapping and tracking》27</li></ul><p>提出了kinect融合的方法，该方法通过Kinect获取的深度图像对每帧图像中的每个像素进行最小化距离测量而获得相机位姿，且融合所有深度图像，从而获得全局地图信息。</p><ul><li>《A dense map building approach from spherical RGBD images》28</li></ul><p>使用图像像素点的光度信息和几何信息来构造误差函数，通过最小化误差函数而获得相机位姿，且地图问题被处理为位姿图表示。</p><ul><li>《Dense visual SLAM for RGB-D cameras》29</li></ul><p>这是较好的直接RGBD SLAM方法，该方法结合像素点的强度误差与深度误差作为误差函数，通过最小化代价函数，从而求出最优相机位姿，该过程由g20实现，并提出了基于熵的关键帧提取及闭环检方法，从而大大降低了路径的误差。</p><ul><li>《Distinctive image features from scale-invariant keypoints》30</li></ul><h3 id="视觉-SLAM主要标志性成果"><a href="#视觉-SLAM主要标志性成果" class="headerlink" title="视觉 SLAM主要标志性成果"></a>视觉 SLAM主要标志性成果</h3><h4 id="MonoSLAM"><a href="#MonoSLAM" class="headerlink" title="MonoSLAM"></a>MonoSLAM</h4><blockquote><p>《Mono-SLAM: real-time single camera SLAM》</p></blockquote><p>Andrew Davison提出的第1个基于EKF方法的单目SLAM，能够达到实时但是不能确定漂移多少，能够在概率框架下在线创建稀疏地图。</p><h4 id="DTAM"><a href="#DTAM" class="headerlink" title="DTAM"></a>DTAM</h4><blockquote><p>《DTAM: Dense tracking and mapping in real-time》</p></blockquote><p>2011年提出的基于直接法的单目SLAM算法，该方法通过帧率的整幅图像对准来获得相对于稠密地图的相机的6个自由度位姿，能够在GPU上达到实时的效果。</p><h4 id="PTAM"><a href="#PTAM" class="headerlink" title="PTAM"></a>PTAM</h4><blockquote><p>《Parallel Tracking and Mapping for Small AR Workspaces》</p></blockquote><p>由Georg Klein提出的第1个用多线程处理SLAM的算法，将跟踪和建图分为两个单独的任务并在两个平行的线程进行处理。</p><h4 id="Ki-nectFusion"><a href="#Ki-nectFusion" class="headerlink" title="Ki-nectFusion"></a>Ki-nectFusion</h4><blockquote><p>《Kinect-Fusion: Real-time dense surface mapping and tracking》</p></blockquote><p>第1个基于Kinect的能在GPU上实时构建稠密三维地图的算法，该方法仅使用Kinect相机获取的深度信息去计算传感器的位姿以及构建精确的环境3-D地图模型。</p><h4 id="LSD-SLAM"><a href="#LSD-SLAM" class="headerlink" title="LSD-SLAM"></a>LSD-SLAM</h4><blockquote><p>《LSD-SLAM: Large-Scale Direct Monocular SLAM》</p></blockquote><p>直接的单目SLAM方法，即直接对图像的像素点进行处理，相比于之前的基于直接法的单目视觉里程计，不仅能计算出自身的位姿，还能构建出全局的半稠密且精确的环境地图。其中的追踪方法，直接在sim3上进行操作，从而能够准确地检测尺度漂移，可在CPU上实时运行。</p><h4 id="ORB-SLAM"><a href="#ORB-SLAM" class="headerlink" title="ORB_SLAM"></a>ORB_SLAM</h4><blockquote><p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM  System》</p></blockquote><p>2015年出的比较完整的基于关键帧的单目SLAM算法，将整个系统分为追踪、地图创建、闭环控制3个线程进行处理，且特征的提取与匹配、稀疏地图的创建、位置识别都是基于ORB特征，其定位精确度很高，且可以实时运行。</p><h3 id="SLAM的主要研究实验室"><a href="#SLAM的主要研究实验室" class="headerlink" title="SLAM的主要研究实验室"></a>SLAM的主要研究实验室</h3><p>1）<strong>苏黎世联邦理工学院的Autonomous System Lab</strong>:该实验室在tango项目上与谷歌合作，负责视觉-<br>惯导的里程计，基于视觉的定位和深度重建算法。<br>2）<strong>明尼苏达大学的Multiple Autonomous Robotic Systems Laboratory</strong>，主要研究四轴飞行器导航，合作建图，基于地图的定位，半稠密地图创建等。<br>3）<strong>慕尼黑理工大学的The Computer Vision Group</strong>，主要研究基于图像的3-D重建，机器人视觉视觉SLAM等。</p><h2 id="视觉-SLAM-关键性问题"><a href="#视觉-SLAM-关键性问题" class="headerlink" title="视觉 SLAM 关键性问题"></a>视觉 SLAM 关键性问题</h2><h3 id="特征检测与匹配"><a href="#特征检测与匹配" class="headerlink" title="特征检测与匹配"></a>特征检测与匹配</h3><p>目前点特征使用最多,使用最多的点特征如下</p><ul><li><strong>SIFT（scale invariant feature transform）特征</strong></li></ul><p>SIFT特征已发展10多年，且获得了巨大的成功。SIFT特征具有可辨别性，由于其描述符用高维向量（128维）表示，且具有旋转不变性、尺度不变性、放射变换不变性，对噪声和光照变化也有鲁棒性。[33-6]在视觉SLAM里使用了SIFT特征，但是由于SIFT特征的向量维数太高，导致时间复杂度高。</p><p>《Distinctive image features from scale-invariant keypoints》</p><ul><li><strong>SURT（speeded up robust features）[31]特征</strong></li></ul><p>SURF特征具有尺度不变性、旋转不变性，且相对于SIFT特征的算法速度提高了3到7倍。在文献[37-39]SURF被作为视觉SLAM的特征提取方法，与SIFT特征相比，时间复杂度有所降低。对两幅图像的SIFT和SURF特征进行匹配时通常是计算两个特征向量之间的欧氏距离，并以此作为特征点的相似性判断度量。</p><p>《spee-ded up robust features》</p><ul><li><strong>ORB（oriented fast and rotated BRIEF）[32]特征。</strong></li></ul><p>ORB特征是FAST特征检测算子与BRIEF描述符的结合，并在其基础上做了一些改进。ORB特征最大的优点是计算速度快，是SIFT特征的100倍，SURF特征的10倍，其原因是FAST特征检测速度就很快，再加上BRIEF描述符是二进制串，大大缩减了匹配速度，而且具有旋转不变性，但不具备尺度不变性。ORB特征匹配是以BRIEF二进制描述符的汉明距离为相似性度量的。</p><p>《An efficient alternative to SIFT or SURF》</p><p>在大量包含直线和曲线的环境下，使用点特征时，环境中很多信息都将被遗弃，为了弥补这个缺陷，从而也提出了<strong>基于边特征的视觉SLAM</strong>和<strong>基于区域特征的视觉SLAM</strong>方法。</p><blockquote><p>基于边特征的视觉SLAM《Edge landmarks in monocular SLAM》《Improving the agility of keyframe-based SLAM 》</p></blockquote><blockquote><p>基于区域特征的视觉SLAM《Using superpixels in monocular SLAM》</p></blockquote><h3 id="关键帧的选择"><a href="#关键帧的选择" class="headerlink" title="关键帧的选择"></a>关键帧的选择</h3><p>帧对帧的对准方法会造成大的累积漂浮，由于位姿估计过程中总会产生误差。为了减少帧对帧的对准方法带来的误差，基于关键帧的SLAM方法被提出。</p><p>《Parallel Tracking and Mapping for Small AR Workspaces》</p><p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM System》</p><blockquote><p>提出满足以下全部条件时该帧作为关键帧插入到地图里：从上一个关键帧经过了n个帧；当前帧至少能看到n个地图点，位姿估计准确性较高。</p></blockquote><p>《RGB-D Mapping: Using Depth Cameras for Dense 3-D Modeling of Indoor Environments》</p><blockquote><p>当两幅图像看到的共同特征点数低于一定阈值时，创建一个新的关键帧。</p></blockquote><p>《Dense visual SLAM for RGB-D cameras 》</p><blockquote><p>提出了一种基于熵的相似性的选择关键帧的方法，由于简单的阈值不适用于不同的场景，对每一帧计算一个熵的相似性比，如果该值小于一个预先定义的阈值，则前一帧被选为新的关键帧，并插入地图里，该方法大大减少了位姿漂浮。</p></blockquote><h3 id="闭环检测（loop-closing）方法"><a href="#闭环检测（loop-closing）方法" class="headerlink" title="闭环检测（loop closing）方法"></a>闭环检测（loop closing）方法</h3><p>闭环检测及位置识别，判断当前位置是否是以前已访问过的环境区域。三维重建过程中必然会产生误差累积，实现闭环是消除的一种手段。在位置识别算法中，视觉是主要的传感器。</p><p>文献《A compari-son of loop closing techniques in monocular SLAM》对闭环检测方法进行了比较</p><p>且得出图像对图像的匹配性能<strong>优于</strong>地图对地图，图像对地图的匹配方法。</p><ul><li><p>图像对图像《Tracking and mapping recognizable features》《Accelerated appearance-only SLAM》</p><blockquote><p>图像对图像的匹配方法中，词袋（bag of words）方法由于其有效性得到了广泛的应用</p><p>《Scalable Recognition with a Vocabulary Tree》</p></blockquote></li><li><p>地图对地图《Unscented SLAM for large-scale outdoor environments 》</p></li><li><p>图像对地图《Probabilistic Lo-calization and Mapping in the Space of Appearance》</p></li></ul><p>《Unified loop closing and recovery for real time monocular SLAM》</p><blockquote><p>对重定位和闭环检测提出了统一的方法，它们使用基于16维的SIFT特征的词典方法不断地搜索已访问过的位置。</p></blockquote><p>《Real-time loop detec-tion with bags of binary words 》《Appearance-only SLAM at large scale with FAB-MAP》</p><blockquote><p>使用基于SURF描述符的词典方法去进行闭环检测SURF特征，SURF特征提取需要花费400 ms去进行。</p></blockquote><p>《Distinctive Image features from scale-invariant keypoints》</p><blockquote><p>使用SIFT特征执行全局定位，且用KD树来排列地图点。</p></blockquote><p>《Bags of binary words for fast place recognition in image sequences》</p><blockquote><p>提出了一种使用基于FAST特征检测与BRIEF二进制描述符词典，且添加了直接索引（direct index），直接索引的引入使得能够有效地获得图像之间的匹配点，从而加快闭环检测的几何验证。</p></blockquote><p>《Fast relocalisation andloop closing in keyframe-based SLAM》</p><blockquote><p>用基于ORB特征的词典方法进行位置识别，由于ORB特征具有旋转不变性且能处理尺度变化，该方法能识别位置从不同的视角。</p></blockquote><p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM System》</p><blockquote><p>该文献的位置识别方法建于文献《Fast relocalisation andloop closing in keyframe-based SLAM》的主要思想上，即使用基于ORB特征的词典方法选出候选闭环，再通过相似性计算进行闭环的几何验证。</p></blockquote><h3 id="地图优化"><a href="#地图优化" class="headerlink" title="地图优化"></a>地图优化</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>对于一个在复杂且动态的环境下工作的机器人，3-D地图的快速生成是非常重要的，且创建的环境地图对之后的定位、路径规划及壁障的性能起到一个关键性的作用，从而精确的地图创建也是非常重要的。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>闭环检测成功后，往地图里添加闭环约束，执行闭环校正。闭环问题可以描述为<strong>大规模的光束平差法（bundle adjustment）问题</strong>，即对相机位姿及所有的地图点3-D坐标进行优化，但是该优化计算复杂度太高，从而很难实现实时。</p><h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><ul><li>通过位姿图优化（pose graph optimization）方法来对闭环进行优化</li></ul><p>顶点为相机位姿，边表示位姿之间相对变换的图称为位姿图，位姿图优化即将闭环误差沿着图进行分配，即均匀分配到图上的所有位姿上。图优化通常由图优化框架g2o（general graph optimization）《A general framework for graph optimization 》里的LM（leven-berg-marquardt）算法实现。</p><p>《Dense visual SLAM for RGB-D cameras》</p><blockquote><p>提出的RGB-D SLAM算法的位姿图里每个边具有一个权重，从而在优化过程中，不确定性高的边比不确定性低的边需要变化更多去补偿误差，并在最后，对图里的每个顶点进行额外的闭环检测且重新优化整个图。</p></blockquote><p>《Scale drift-aware large scale monocular SLAM》</p><blockquote><p>在闭环校正步骤使用了位姿图优化技术去实现旋转，平移及尺度漂浮的有效校正。</p></blockquote><p>《ORB-SLAM: A Versatile and Accurate Monocular SLAM System》</p><blockquote><p>在闭环检测成功后构建了本质图，并对该图进行位姿图优化。本质图包含所有的关键帧，但相比于covisibility图，减少了关键帧之间的边约束。本质图包含生成树、闭环连接及covisibility图里权重较大的边。</p></blockquote><h2 id="视觉SLAM主要发展趋势与研究热点"><a href="#视觉SLAM主要发展趋势与研究热点" class="headerlink" title="视觉SLAM主要发展趋势与研究热点"></a>视觉SLAM主要发展趋势与研究热点</h2><h3 id="多传感器融合"><a href="#多传感器融合" class="headerlink" title="多传感器融合"></a>多传感器融合</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>相机能够捕捉场景的丰富细节，而惯性测量单元（inertial measurement unit，IMU）有高的帧率且相对小的能够获得准确的短时间估计，这两个传感器能够相互互补，从而一起使用能够获得更好的结果。</p><h4 id="发展-2"><a href="#发展-2" class="headerlink" title="发展"></a>发展</h4><p>最初的视觉与IMU结合的位姿估计是用<strong>滤波方法</strong>解决的，用IMU的测量值作为预测值，视觉的测量值用于更新。</p><p>《A multi-state con-straint Kalman filter for vision-aided inertial navigation》</p><blockquote><p>提出了一种基于EKF的IMU与单目视觉的实时融合方法，提出一种测量模型能够表示一个静态特征被多个相机所观察时的几何约束，该测量模型是最优的且不需要在EKF的状态向量里包括特征的3-D坐标。</p></blockquote><p>《A dual-layer estima-tor architecture for long-term localization》</p><blockquote><p>将融合问题分为两个线程进行处理，连续图像之间的惯性测量和特征跟踪被局部地在第1个线程进行处理，提供高频率的位置估计，第2个线程包含一个间歇工作的光束法平差的迭代估计，能够减少线性误差的影响。许多结果都已证明在准确性上基于优化的视觉SLAM优于基于滤波的SLAM方法。</p></blockquote><p>《Keyframe-based visual-inertial slam using nonlinear opti-mization》</p><blockquote><p>将IMU的误差以全概率的形式融合到路标的重投影误差里，构成将被优化的联合非线性误差函数，其中通过关键帧来边缘化之前的状态去维持一个固定大小的优化窗口，保证实时操作。考虑到基于优化方法的视觉-惯导导航的计算复杂度问题，</p></blockquote><p>参考<a href="https://www/">https://www</a>. google. com/a-tap/projecttango/.</p><blockquote><p>通过预积分选出的关键帧之间的惯性测量来进行解决，预积分能够精确地概括数百个惯性测量到一个单独的相对运动约束，这个预积分的IMU模型能被完美地融合到视觉-惯性的因子图的框架下。该系统的实验结果表明该系统要比Google的Tango还要精确。</p></blockquote><h3 id="SLAM与深度学习的结合"><a href="#SLAM与深度学习的结合" class="headerlink" title="SLAM与深度学习的结合"></a>SLAM与深度学习的结合</h3><p>随着深度学习在计算机视觉领域的大成功，大家对深度学习在机器人领域的应用有很大的兴趣。SLAM是一个大系统，里面有很多子模块，例如闭环检测，立体匹配等，都可通过深度学习的使用来获得更优的结果。</p><h4 id="发展-3"><a href="#发展-3" class="headerlink" title="发展"></a>发展</h4><p>《Stereo matching by training a convolutional neural network to compare image patches》</p><blockquote><p>提出了一种基于深度学习的立体匹配方法，用卷积神经网络来学习小图像块间的相似性，该卷积神经网络输出的结果用于线性化立体匹配代价。</p></blockquote><p>《On the per-formance of ConvNet features for place recognition》</p><blockquote><p>通过整合局部敏感散列法和新的语义搜寻空间划分的优化技术，使用卷积神经网络和大的地图达到实时的位置识别。</p></blockquote><p>《Exploring representation learning with CNNs for frame-to-frame egomotion estimation》</p><blockquote><p>使用卷积神经网络去学习视觉里程计的最佳的视觉特征和最优的估计器。</p></blockquote><p>《Modelling uncertainty in deep learning for camera relocalization》</p><blockquote><p>提出了一种重定位系统，使用贝叶斯卷积神经网络从单个彩色图像计算出六个自由度的相机位姿及其不确定性。</p></blockquote><h2 id="视觉SLAM的优缺点分析"><a href="#视觉SLAM的优缺点分析" class="headerlink" title="视觉SLAM的优缺点分析"></a>视觉SLAM的优缺点分析</h2><h3 id="单目视觉SLAM"><a href="#单目视觉SLAM" class="headerlink" title="单目视觉SLAM"></a>单目视觉SLAM</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>单目相机应用灵活、简单、价格低。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>单目视觉SLAM在每个时刻只能获取一张图像，且只能依靠获得的图像数据计算环境物体的方向信息，无法直接获得可靠的深度信息，从而初始地图创建及特征点的深度恢复都比较困难。</p><p>此外，尺度不确定性是单目SLAM的主要特点，它是主要的误差源之一，但是正是尺度不确定性才使得单目SLAM能够在大尺度和小尺度环境之间进行自由转换。</p><h3 id="双目视觉SLAM"><a href="#双目视觉SLAM" class="headerlink" title="双目视觉SLAM"></a>双目视觉SLAM</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>双目视觉SLAM利用外极线几何约束的原理去匹配左右两个相机的特征，从而能够在当前帧速率的条件下直接提取完整的特征数据，因而应用比较广泛，它直接解决了系统地图特征的初始化问题。</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>但是系统设计比较复杂，系统成本比较高，且它的视角范围受到一定限制，不能够获取远处的场景，从而只能在一定的尺度范围内进行可靠的测量，从而缺乏灵活性。</p><h3 id="RGBD-SLAM"><a href="#RGBD-SLAM" class="headerlink" title="RGBD SLAM"></a>RGBD SLAM</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>深度相机在获得彩色图像的同时获得深度图像，从而方便获得深度信息，且能够获得稠密的地图</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>成本高，体积大，有效探测距离太短，从而可应用环境很有限。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>为了弥补视觉信息的不足，视觉传感器可以与惯性传感器（IMU）、激光等传感器融合，通过传感器之间的互补获得更加理想的结果。此外，为了能在实际环境中进行应用，SLAM的鲁棒性需要很高，从而足够在各种复杂环境下进行准确的处理，SLAM的计算复杂度也不能太高，从而达到实时效果。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本文选&amp;lt;权美香，朴松昊，李国． 视觉 ＳＬＡＭ 综述&amp;gt;一文,对整个论文进行梳理,让自己对整个SLAM的框架有一定的了解.&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="文献阅读" scheme="http://lukeyalvin.top/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="文献阅读" scheme="http://lukeyalvin.top/tags/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>tf坐标变换实践一_静态坐标变化</title>
    <link href="http://lukeyalvin.top/2021/10/30/tf%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%AE%9E%E8%B7%B5_%E9%9D%99%E6%80%81%E5%9D%90%E6%A0%87%E5%8F%98%E5%8C%96/"/>
    <id>http://lukeyalvin.top/2021/10/30/tf%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E5%AE%9E%E8%B7%B5_%E9%9D%99%E6%80%81%E5%9D%90%E6%A0%87%E5%8F%98%E5%8C%96/</id>
    <published>2021-10-30T15:52:04.179Z</published>
    <updated>2021-10-30T15:52:04.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>案例描述:现有一机器人模型，核心构成包含主体与雷达，各对应一坐标系，坐标系的原点分别位于主体与雷达的物理中心，已知雷达原点相对于主体原点位移关系如下: x=0.2 y=0.0 z=0.5。当前雷达检测到一障碍物，在雷达坐标系中障碍物的坐标为 (2.0 3.0 5.0),请问，该障碍物相对于主体的坐标是多少？</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p><strong>实现分析:</strong></p><ol><li>坐标系相对关系，可以通过发布方发布</li><li>订阅方，订阅到发布的坐标系相对关系，再传入坐标点信息(可以写死)，然后借助于 tf 实现坐标变换，并将结果输出</li></ol><p><strong>实现流程:</strong></p><ol><li>新建功能包，添加依赖</li><li>编写发布方实现</li><li>编写订阅方实现</li><li>执行并查看结果</li></ol><h1 id="命令实现"><a href="#命令实现" class="headerlink" title="命令实现"></a>命令实现</h1><h2 id="发布者命令实现"><a href="#发布者命令实现" class="headerlink" title="发布者命令实现"></a>发布者命令实现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun tf2_ros static_transform_publisher 0.2 0 0.5 0 0 0 /baselink /laser</span><br></pre></td></tr></table></figure><p>解释:rosrun tf2_ros static_transform_publisher x偏移量 y偏移量 z偏移量 z偏航角度 y俯仰角度 x翻滚角度 父级坐标系 子级坐标系</p><h2 id="查看发布信息"><a href="#查看发布信息" class="headerlink" title="查看发布信息"></a>查看发布信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rostopic list</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br><span class="line">/tf_static</span><br><span class="line">/turtle1/cmd_vel</span><br><span class="line">/turtle1/color_sensor</span><br><span class="line">/turtle1/pose</span><br><span class="line">alvin@ros:~/catkin_ws$ rostopic <span class="built_in">echo</span> /tf_static</span><br><span class="line">transforms: </span><br><span class="line">  - </span><br><span class="line">    header: </span><br><span class="line">      seq: 1</span><br><span class="line">      stamp: </span><br><span class="line">        secs: 1635601530</span><br><span class="line">        nsecs: 483203886</span><br><span class="line">      frame_id: <span class="string">&quot;base_link&quot;</span></span><br><span class="line">    child_frame_id: <span class="string">&quot;laser&quot;</span></span><br><span class="line">    transform: </span><br><span class="line">      translation: </span><br><span class="line">        x: 0.2</span><br><span class="line">        y: 0.0</span><br><span class="line">        z: 0.5</span><br><span class="line">      rotation: </span><br><span class="line">        x: 0.0</span><br><span class="line">        y: 0.0</span><br><span class="line">        z: 0.0</span><br><span class="line">        w: 1.0</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="C-代码实现"><a href="#C-代码实现" class="headerlink" title="C++代码实现"></a>C++代码实现</h1><h2 id="发布者实现"><a href="#发布者实现" class="headerlink" title="发布者实现"></a>发布者实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/static_transform_broadcaster.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/TransformStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2/LinearMath/Quaternion.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;static_pub&quot;</span>);</span><br><span class="line">    <span class="comment">//创建发布者对象</span></span><br><span class="line">    tf2_ros::StaticTransformBroadcaster broadcaster;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//坐标信息</span></span><br><span class="line">    geometry_msgs::TransformStamped tfs;</span><br><span class="line">    tfs.header.seq = <span class="number">1</span>;</span><br><span class="line">    tfs.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;base_link&quot;</span>;</span><br><span class="line">    tfs.child_frame_id = <span class="string">&quot;laser&quot;</span>;</span><br><span class="line">    tfs.transform.translation.x = <span class="number">0.2</span>;</span><br><span class="line">    tfs.transform.translation.y = <span class="number">0</span>;</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将欧拉角转换成四元数</span></span><br><span class="line">    tf2::Quaternion qtn;</span><br><span class="line">    qtn.<span class="built_in">setRPY</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    tfs.transform.rotation.x = qtn.<span class="built_in">getX</span>();</span><br><span class="line">    tfs.transform.rotation.y = qtn.<span class="built_in">getY</span>();</span><br><span class="line">    tfs.transform.rotation.z = qtn.<span class="built_in">getZ</span>();</span><br><span class="line">    tfs.transform.rotation.w = qtn.<span class="built_in">getW</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发布坐标</span></span><br><span class="line">    broadcaster.<span class="built_in">sendTransform</span>(tfs);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="订阅者实现"><a href="#订阅者实现" class="headerlink" title="订阅者实现"></a>订阅者实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/buffer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_ros/transform_listener.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/PointStamped.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tf2_geometry_msgs/tf2_geometry_msgs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">init</span>(argc,argv,<span class="string">&quot;static_sub&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建监听者对象</span></span><br><span class="line">    tf2_ros::Buffer buffer;</span><br><span class="line">    <span class="function">tf2_ros::TransformListener <span class="title">listener</span><span class="params">(buffer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(ros::<span class="built_in">ok</span>())&#123;</span><br><span class="line">        <span class="comment">//定义某坐标点在laser坐标系下的值</span></span><br><span class="line">        geometry_msgs::PointStamped point_laser;</span><br><span class="line">        point_laser.header.frame_id = <span class="string">&quot;laser&quot;</span>;</span><br><span class="line">        point_laser.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        point_laser.point.x = <span class="number">1</span> ;</span><br><span class="line">        point_laser.point.y = <span class="number">2</span> ;</span><br><span class="line">        point_laser.point.z = <span class="number">7.3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将laser坐标系的点的坐标,转换成基坐标系下的坐标</span></span><br><span class="line">            geometry_msgs::PointStamped point_base;</span><br><span class="line">            point_base = buffer.<span class="built_in">transform</span>(point_laser,<span class="string">&quot;base_link&quot;</span>);</span><br><span class="line">            <span class="built_in">ROS_INFO</span>(<span class="string">&quot;转换后的数据:(%.2f,%.2f,%.2f),参考的坐标系是:%s&quot;</span>,</span><br><span class="line">                     point_base.point.x,</span><br><span class="line">                     point_base.point.y,</span><br><span class="line">                     point_base.point.z,</span><br><span class="line">                     point_base.header.frame_id.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> std::exception&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="built_in">ROS_INFO</span>(<span class="string">&quot;程序异常.....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        rate.<span class="built_in">sleep</span>();</span><br><span class="line">        ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line"><span class="keyword">add_executable</span>(static_tf_pub src/static_tf_pub.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(static_tf_sub src/static_tf_sub.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Add cmake target dependencies of the executable</span></span><br><span class="line"><span class="comment">## same as for the library above</span></span><br><span class="line"><span class="keyword">add_dependencies</span>(static_tf_pub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(static_tf_sub <span class="variable">$&#123;$&#123;PROJECT_NAME&#125;</span>_EXPORTED_TARGETS&#125; <span class="variable">$&#123;catkin_EXPORTED_TARGETS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Specify libraries to link a library or executable target against</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(static_tf_pub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(static_tf_sub</span><br><span class="line">  <span class="variable">$&#123;catkin_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rosrun tf_pratice static_tf_pub </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alvin@ros:~/catkin_ws$ rosrun tf_pratice static_tf_sub </span><br><span class="line">[ INFO] [1635601858.503067357]: 程序异常.....</span><br><span class="line">[ INFO] [1635601859.503191179]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601860.503162320]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601861.503066538]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601862.503088002]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601863.503098757]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br><span class="line">[ INFO] [1635601864.503162287]: 转换后的数据:(1.20,2.00,7.80),参考的坐标系是:base_link</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;案例描述:现有一机器人模型，核心构成包含主体与雷达，各对应一坐标系，坐标系的原点分别位于主体与雷达的物理中心，已知雷达原点相对于主体原点位移关系如下: x=0.2 y=0.0 z=0.5。当前雷达检测到一障碍物，在雷达坐标系中障碍物的坐标为 (2.0 3.0 5.0),请问，该障碍物相对于主体的坐标是多少？&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="ROS" scheme="http://lukeyalvin.top/categories/ROS/"/>
    
    
    <category term="ros" scheme="http://lukeyalvin.top/tags/ros/"/>
    
    <category term="tf坐标变换" scheme="http://lukeyalvin.top/tags/tf%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>PAT1002_写出这个数</title>
    <link href="http://lukeyalvin.top/2021/10/30/PAT1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/"/>
    <id>http://lukeyalvin.top/2021/10/30/PAT1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/</id>
    <published>2021-10-30T03:05:01.000Z</published>
    <updated>2021-10-30T15:52:04.163Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p>输入格式：</p><blockquote><p> 每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p></blockquote><p>输出格式：</p><blockquote><p> 在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p></blockquote><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br><span class="line">结尾无空行</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>)n[i] - <span class="number">48</span>;</span><br><span class="line">        sum = x + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sum= &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">order</span>(sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果 n/10==0，则输出n</span></span><br><span class="line"><span class="comment">// 否则 先对n/10进行相同处理，之后输出n%10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    string c_num[<span class="number">10</span>]=&#123;<span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">order</span>(num/<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> num1 = num%<span class="number">10</span>;</span><br><span class="line">        cout &lt;&lt; c_num[num1]&lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; c_num[num] &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;读入一个正整数 &lt;em&gt;n&lt;/em&gt;，计算其各位数字之和，用汉语拼音写出和的每一位数字。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="c++笔记" scheme="http://lukeyalvin.top/categories/c-%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="c++" scheme="http://lukeyalvin.top/tags/c/"/>
    
    <category term="算法" scheme="http://lukeyalvin.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PAT1001_害死人不偿命的(3n+1)猜想</title>
    <link href="http://lukeyalvin.top/2021/10/30/PAT1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/"/>
    <id>http://lukeyalvin.top/2021/10/30/PAT1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/</id>
    <published>2021-10-30T02:44:42.000Z</published>
    <updated>2021-10-31T01:11:01.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>卡拉兹(Callatz)猜想：对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？<br>输入格式：</p><blockquote><p>每个测试输入包含 1 个测试用例，即给出正整数 n 的值。</p></blockquote><p>输出格式：</p><blockquote><p>输出从 n 计算到 1 需要的步数。</p></blockquote><p>输入样例：</p><blockquote><p>3<br>  结尾无空行</p></blockquote><p>输出样例：</p><blockquote><p>5<br>  结尾无空行</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeParity</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deal</span><span class="params">(<span class="keyword">bool</span> flag,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n!=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="built_in">judgeParity</span>(n);</span><br><span class="line">        n = <span class="built_in">deal</span>(flag,n);</span><br><span class="line">        ++count;</span><br><span class="line">    &#125;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;count = &quot;</span> &lt;&lt; count &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeParity</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deal</span><span class="params">(<span class="keyword">bool</span> flag,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        n = n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        n = (<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success"><p>初学,待进一步优化......</p></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;卡拉兹(Callatz)猜想：对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="c++笔记" scheme="http://lukeyalvin.top/categories/c-%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="c++" scheme="http://lukeyalvin.top/tags/c/"/>
    
    <category term="算法" scheme="http://lukeyalvin.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
