<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lukey Alvin</title>
  
  <subtitle>一份耕耘,一份收获</subtitle>
  <link href="https://lukeyalvin.top/atom.xml" rel="self"/>
  
  <link href="https://lukeyalvin.top/"/>
  <updated>2022-05-08T13:17:50.885Z</updated>
  <id>https://lukeyalvin.top/</id>
  
  <author>
    <name>爱喝烫水的阿水哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【文献阅读】On-Manifold Preintegration for Real-Time Visual-Inertial Odometry</title>
    <link href="https://lukeyalvin.top/posts/e6b6704d.html"/>
    <id>https://lukeyalvin.top/posts/e6b6704d.html</id>
    <published>2022-05-08T13:16:58.000Z</published>
    <updated>2022-05-08T13:17:50.885Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本文对经典的预积分理论的原始论文进行了翻译，但是里面的细节暂时不是很理解。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="On-Manifold-Preintegration-for-Real-Time-Visual-Inertial-Odometry"><a href="#On-Manifold-Preintegration-for-Real-Time-Visual-Inertial-Odometry" class="headerlink" title="On-Manifold Preintegration for Real-Time Visual-Inertial Odometry"></a>On-Manifold Preintegration for Real-Time Visual-Inertial Odometry</h1><p>摘要：当前的视觉惯性里程计（VIO）方法能够通过非线性优化获得高度准确的状态估计。然而，随着轨迹随着时间的推移，实时优化很快变得不可行。尤其是惯性测量以高速率出现的时候，这个问题变得更加突出，因此导致优化中变量数量的快速增长。在本文中，我们<strong>通过预积分关键帧之间的惯性测量以得到单个相对运动约束</strong>。</p><p>我们的第一个贡献是一个预积分理论，它正确地解决了<strong>旋转群的流形结构</strong>。我们正式讨论生成测量模型以及旋转噪声的性质，并推导出最大后验状态估计器的表达式。我们的理论发展能够计算所有必要的雅可比矩阵，以分析形式的优化和后验偏差校正。</p><p>第二个贡献是表明预积分的 IMU 模型可以在因子图的统一框架下被整合到视觉-惯性流程中。这使得<strong>增量平滑算法</strong>的应用和<strong>视觉测量的无结构模型</strong>的使用成为可能，避免了对 3D 点的优化，进一步加速了计算。</p><p>我们在真实和模拟数据集上对我们的单目 VIO 流程进行了广泛的评估。结果证实，我们的建模工作可以实时进行准确的状态估计，优于最先进的方法。</p><h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>使用相机和惯性传感器进行三维结构和运动估计已经受到机器人界的极大关注。两种传感器类型都便宜、无处不在且互补。<strong>移动相机</strong>是一种外感知传感器，它允许我们测量三维场景的外观和几何形状，直至未知的度量尺度；<strong>惯性测量单元 (IMU)</strong> 是一种本体感受传感器，可呈现单目视觉和重力可视化的度量尺度 [1]，并提供稳健且准确的帧间运动估计。<strong>视觉惯性里程计（VIO）</strong>的应用范围从无GPS环境的自动驾驶到3D重建和增强现实。</p><p>现有的关于 VIO 的文献在准确性和计算效率之间进行了权衡（第 II 节给出了详细的回顾）。一方面，<strong>滤波方法</strong>可以实现快速推断，但其准确性会因线性化误差的累积而下降。另一方面，<strong>基于非线性优化的完全平滑方法</strong>是准确的，但计算量很大。固定滞后平滑（$Fixed-lag\ Smoothing$）在精度和效率之间提供折中；但是，尚不清楚如何设置估计窗口的长度以保证给定的性能水平。</p><p>在这项工作中，我们表明可以克服这种权衡。我们设计了一个 VIO 系统，可以实现快速增量平滑并实时计算最优的最大后验 (MAP) 估计。第IV给出了我们方法的概述。</p><p>实现这一目标的第一步是发展一个新的预积分理论。在 [2] 中首次提出使用预积分 IMU 测量，其组合两个关键帧间的许多惯性测量为单个相对运动约束。我们在这项工作的基础上提出了一个预积分理论，该理论正确地<strong>解决了旋转群 $SO(3)$ 的流形结构</strong>。我们的预积分理论在第 V-VI 节中介绍。与[2]相比，我们的理论对旋转噪声提供了更正式的处理，并避免了旋转表示中的奇异性。此外，我们能够以解析形式推导出所有必要的雅可比矩阵：具体来说，我们在本文的附录中报告了残差、噪声传播和后验偏差校正的解析雅可比矩阵。</p><p>我们的第二个贡献是<strong>将 IMU 预积分理论框架化为因子图模型</strong>。这使得增量平滑算法的应用成为可能，如 iSAM2 [3]，它避免了线性化误差的累积，并提供了一种优雅的方式来权衡精度和效率。受 [4, 5] 的启发，我们还<strong>采用无结构模型进行视觉测量</strong>，允许在增量平滑期间消除大量变量（即所有 3D 点），从而进一步加速计算（第 VII 节）。与 [5] 相比，我们在增量平滑框架中使用无结构模型。这有两个主要优点：我们不需要延迟视觉测量的处理，我们可以多次重新线性化视觉测量。</p><p>为了证明我们模型的有效性，我们将提议的 IMU 预积分集成到最先进的 VIO 流程中，并在真实和模拟数据集 2（第 VIII 节）上对其进行了测试。我们的理论发展带来了切实的实际优势：本文提出的方法的实现以 100 Hz 的速率执行完全平滑，并相对于具有竞争力的最先进的过滤和优化方法实现了卓越的精度。</p><p>除了技术贡献，论文还为实践者提供了教程贡献。在第III部分和整篇论文中，我们对流形上的不确定性表示以及不确定性传播和雅可比计算的示例推导进行了简短而简洁的总结。所有方程和雅可比矩阵的完整推导——实现我们的模型所必需的——在附录中给出。</p><p>本文是我们之前工作 [6] 的扩展，包括额外的实验、对相关工作的深入讨论和全面的技术推导。新实验的结果突出了偏差估计的准确性，证明了我们方法的一致性，并提供了与全批次估计的比较。我们在 GTSAM 4.0 优化工具箱中发布了预集成 IMU 和无结构视觉因素的实现。</p><h1 id="二、相关工作"><a href="#二、相关工作" class="headerlink" title="二、相关工作"></a>二、相关工作</h1><p>视觉惯性里程计的相关工作可以沿着三个主要维度进行划分。<strong>第一个维度是 在估计中涉及的相机位姿的数量。</strong>虽然完全平滑器（$full\ smoothers$）（或批量非线性最小二乘算法（$batch\ nonlinear\ least-squares\ algorithms$）估计姿势的完整历史，但固定滞后平滑器（$fixed-lag\ smoothers$）（或滑动窗口估计器（$fixed-lag\ smoothers$）考虑最新姿势的窗口，而过滤方法仅估计最新状态。固定滞后平滑器和滤波器都会<strong>边缘化</strong>旧状态并<strong>吸收</strong>高斯先验中的相应信息。</p><p><strong>第二个维度是 关于测量不确定性和高斯先验的表示</strong>：扩展卡尔曼滤波器 (EKF) 使用协方差矩阵表示不确定性；相反，信息滤波器和平滑器求助于信息矩阵（协方差的倒数）或信息矩阵的平方根 [3, 8]</p><p>最后，<strong>第三个维度 通过查看测量模型线性化的次数来区分现有方法。</strong>虽然标准 EKF（与迭代 EKF 相比）只处理一次测量，但平滑方法允许多次线性化。</p><p>虽然术语很多，但底层算法是紧密相关的。例如，可以证明<strong>迭代扩展卡尔曼滤波器方程等价于高斯牛顿算法</strong>，通常用于平滑 [9]</p><h2 id="A-滤波"><a href="#A-滤波" class="headerlink" title="A. 滤波"></a>A. 滤波</h2><p>滤波算法通过将推理过程限制在系统的最新状态来实现有效的估计。 EKF 的复杂性在估计的地标数量上呈二次增长，因此，通常会跟踪少量地标（大约 20 个）以允许实时操作 [10-12]。另一种方法是采用<strong>“无结构”方法</strong>，其中地标位置被<strong>边缘化</strong>出状态向量。这种策略的一个很好的例子是<strong>多状态约束卡尔曼滤波器</strong>（$Multi-State\ Constraint\ Kalman\ filter\ ，MSC-KF$）[5]。无结构方法需要通过<strong>随机克隆</strong>（$stochastic\ cloning$） [13] 将先前的姿势保留在状态向量中。</p><p>使用无结构方法进行过滤的一个缺点是，<strong>地标测量的处理</strong>需要延迟，直到获得地标的所有测量值 [5]。这会妨碍准确性，因为滤波器不能使用所有当前的视觉信息。<strong>边缘化</strong>也是错误的来源，因为它锁定了<strong>线性化误差</strong>和<strong>错误的异常值测量</strong>。因此，滤除虚假测量值尤为重要，因为单个异常值会不可逆转地破坏滤波器 [14]。此外，<strong>线性化误差</strong>会在估计中引入漂移并导致滤波器不一致。不一致的一个影响是<strong>估计器</strong>变得过于自信，导致非最优信息融合。通常，VIO 问题有四个不可观察的方向：<strong>全局位置</strong>和围绕重力方向（<strong>偏航</strong>，yaw）的方向 [15, 16]。在 [16] 中表明，<strong>错误估计的线性化</strong>仅导致三个不可观察的方向（全局位置）；因此，错误的线性化将偏航方向的虚假信息添加到高斯先验中，从而导致滤波器不一致。这个问题已通过<strong>首次估计雅可比方法</strong> （$first-estimates\ jacobian$）[17] 得到解决，<strong>该方法确保状态不会使用不同的线性化点进行更新</strong>——这是不一致的来源。在可观察性约束（$observability-constrained$）的 EKF (OC-EKF) 中，维持对不可观察方向的估计，这允许仅在可观察的方向上更新滤波器 [16, 18]。在 [1, 15, 19] 中给出了对 VIO 可观察性属性的全面分析。</p><h2 id="B-固定滞后平滑"><a href="#B-固定滞后平滑" class="headerlink" title="B.固定滞后平滑"></a>B.固定滞后平滑</h2><p>固定滞后平滑器（$fixed-lag\ smoothers$）估计落在给定时间窗口内的状态，同时边缘化较旧的状态[20-24]。在最大似然估计设置中，固定滞后平滑器会<strong>导致一组最近状态的优化问题</strong>。对于非线性问题，<strong>平滑方法</strong>通常比滤波更准确，因为它们会<strong>重新线性化过去的测量</strong> [25]。此外，这些方法<strong>对异常值更具弹性</strong>，可以在后验（即优化之后）丢弃，或者可以通过使用鲁棒代价函数来缓解。不利的一面是，<strong>估计窗口外的状态边缘化会导致密集的高斯先验，从而阻碍有效的推理。</strong>出于这个原因，有人提出为了<strong>稀疏性</strong>而放弃某些测量值[24]。此外，由于边缘化，固定滞后平滑器具有过滤的部分问题（一致性、线性化误差的累积）[18、22、26]。</p><h2 id="C-完全平滑"><a href="#C-完全平滑" class="headerlink" title="C. 完全平滑"></a>C. 完全平滑</h2><p>完全平滑（$Full\ Smoothing$）方法<strong>通过解决大型非线性优化问题来估计状态的整个历史</strong>（相机轨迹和 3D 地标）[27-31]。全平滑保证了最高精度；然而，随着轨迹和地图随着时间的推移而增长，实时操作很快变得不可行。因此，已经提出丢弃除选定<strong>关键帧</strong>之外的帧 [24, 32-34] 或使用<strong>跟踪和建图双重架构</strong> [20, 35] 在并行线程中运行优化。一项突破是<strong>增量平滑技术</strong>（$incremental\ smoothing\ techniques$）（iSAM [36]、iSAM2 [3]）的发展，该技术<strong>利用因子图的表达性来保持稀疏性，并仅识别和更新受新测量影响的通常较小的变量子集。</strong></p><p>尽管如此，高频率的惯性测量（通常为 $100 Hz$ 至 $1 kHz$）仍然对平滑方法构成挑战。一个简单的实现需要在每次 IMU 测量时添加一个新状态，这很快就会变得非常慢 [37]。因此，惯性测量通常在帧之间集成以形成相对运动约束[24,30,38-40]。<strong>对于两帧之间的标准 IMU 集成，初始条件由第一帧的状态估计给出。</strong>因此，惯性测量通常在帧之间集成以形成相对运动约束[24,30,38-40]。对于两帧之间的标准 IMU 积分，初始条件由第一帧的状态估计给出。然而，<strong>在优化的每次迭代中，状态估计都会发生变化，这需要在所有帧之间重复 IMU 积分</strong>[24]。 Lupton 和 Sukkarieh [2] 表明，<strong>通过重新参数化相对运动约束可以避免这种重复积分。这种重新参数化称为 IMU 预积分。</strong></p><p>在目前的工作中，我们以开创性工作 [2] 为基础，通过适当<strong>解决旋转群 SO(3) 的流形结构</strong>，使 IMU 预积分理论走向成熟。工作[2]采用欧拉角作为旋转的全局参数。在刚性变换的作用下，使用欧拉角并应用欧几里得空间的通常平均和平滑技术进行状态传播和协方差估计并不具有不变性[41, 42]。此外，欧拉角具有奇异性。我们的研究，另一方面，提供了一个正式的旋转测量的表示（和对应噪声），并提供了完整的最大后验估计量的推导。我们还推导出雅可比矩阵的解析表达式（优化所需），据我们所知，这些表达式以前没有在文献中报道过。在实验部分，我们表明旋转流形的正确表示会导致更高的准确性和鲁棒性，从而比原始提议 [2] 带来切实的优势。</p><h1 id="三、预备知识"><a href="#三、预备知识" class="headerlink" title="三、预备知识"></a>三、预备知识</h1><p>在本文中，我们根据 MAP 估计来制定 VIO。在我们的模型中，MAP 估计会导致非线性优化问题，该问题涉及存在于<strong>平滑流形</strong>上的量（例如，旋转、姿势）。因此，在深入研究细节之前，我们方便地回顾一些有用的几何概念。专家读者可以跳过本节。</p><p>我们将本节结构如下：第 III-A 节提供了与两个主要<strong>黎曼流形</strong>相关的有用概念：<strong>特殊正交群</strong> $SO(3)$ 和<strong>特殊欧几里得群</strong>$ SE(3)$。我们的介绍基于 [43, 44]。第 III-B 节描述了一个合适的模型来描述$ SO(3) $中的不确定旋转。第 III-C 节根据标准参考文献 [45] 回顾了流形上的优化。</p><h2 id="A-黎曼几何的概念"><a href="#A-黎曼几何的概念" class="headerlink" title="A. 黎曼几何的概念"></a>A. 黎曼几何的概念</h2><p>a) 特殊正交群：SO(3) 描述了一组 3D 旋转矩阵，正式定义为$SO(3)\doteq \{R\in\mathbb{R}^{3\times3}:R^TR=I,\det(R)=1\}.$群运算就是通常的矩阵乘法，逆运算就是矩阵转置。群 $ SO(3) $也形成一个<strong>光滑的流形</strong>。流形（恒等式）的<strong>切线空间表示</strong>为 $\mathfrak{so}(3)$，也称为<strong>李代数</strong>，与 $3\times3$ 斜对称矩阵的空间重合。我们可以使用$hat$算子在 R3 中用一个向量识别每个倾斜对称矩阵：</p><script type="math/tex; mode=display">w^{\land}=\begin{bmatrix}w_1\\w_2\\w_3\end{bmatrix}^{\land}=\begin{bmatrix}0&-w_3&w_2\\w_3&0&-w_1\\-w_2&w_1&0\end{bmatrix}\in\mathfrak{so}(3).\tag{1}</script><p>类似地，我们可以使用 $vee $算子$(\cdot)^{\lor}$ 将斜对称矩阵映射到$\mathbb{R}^3 $中的向量：对于<strong>斜对称矩阵</strong> $S= ω^{\land}$，$vee $ 算子使得 $S^{\lor}= ω$。稍后将有用的斜对称矩阵的属性是：</p><script type="math/tex; mode=display">a^{\land}b=-b^{\land}a,\forall a,b\in\mathbb{R}^3.\tag{2}</script><p><strong>指数映射</strong>（恒等式）$ \exp : \mathfrak{so}(3)\rightarrow SO(3)$将李代数的一个元素与旋转相关联，并与标准矩阵指数（罗德里格斯公式）一致：</p><script type="math/tex; mode=display">\exp(\phi)^{\land}=I+\frac{\sin(\parallel\phi\parallel)}{\parallel\phi\parallel}\phi^{\land}+\frac{1-\cos(\parallel\phi\parallel)}{\parallel\phi\parallel}(\phi^{\land})^2.\tag{3}</script><p>我们稍后将使用的指数映射的一阶近似是：</p><script type="math/tex; mode=display">\exp(\phi)^{\land}\approx I+\phi^{\land}.\tag{4}</script><p><strong>对数映射</strong>（恒等式）将 $SO(3)$ 中的矩阵 $R\ne I $与斜对称矩阵相关联：</p><script type="math/tex; mode=display">\log(R)=\frac{\varphi\cdot(R-R^T)}{2\sin(\varphi)},\varphi=\cos^{-1}(\frac{\tr(R)-1}{2}).\tag{5}</script><p>注意$ \log(R)^{\lor}= a\varphi$，其中 $a $和 $\varphi $分别是 $R$ 的旋转轴和旋转角度。如果 $R = I$，则 $\varphi= 0 $，并且 $a$ 是不确定的，因此可以任意选择。</p><p>如果限制在一个开放的球内$\parallel\phi\parallel&lt;\pi$，<strong>指数映射</strong>是<strong>双射</strong>，对应的逆是<strong>对数映射</strong>。然而，如果我们不限制定义域，指数映射就会变成<strong>满射</strong>的，因为每个向量$ \phi= (\varphi + 2k\pi)a, k \in \mathbb{Z}$ 将是 $R$ 的一个可容许对数。</p><p><img src="/images/【文献阅读】On-Manifold-Preintegration-for-Real-Time-Visual-Inertial-Odometry/image-20220507100016617.png" alt="image-20220507100016617"></p><p>为了符号方便，我们采用指数和对数图的“矢量化”版本：</p><script type="math/tex; mode=display">\begin{align*}Exp&:\ \mathbb{R}^3\rightarrow SO(3)\ ;\ \phi\mapsto \exp(\phi^{\land})\\Log&:\ SO(3)\rightarrow \mathbb{R}^3\ ;\ R\mapsto \log(R)^{\lor}\end{align*}\tag{6}</script><p>它直接对向量进行操作，而不是对$ \mathfrak{so}(3) $中的斜对称矩阵进行操作。</p><p>稍后，我们将使用以下一阶近似：</p><script type="math/tex; mode=display">Exp(\phi+\delta\phi)\approx Exp(\phi)\ Exp(J_r(\phi)\delta\phi).\tag{7}</script><p>$J_r(\phi)$是$SO(3)$ [43, p.40] 的右雅可比行列式，并将切线空间中的加法增量与右侧应用的乘法增量相关联（图 1）：</p><script type="math/tex; mode=display">J_r(\phi)=I-\frac{1-\cos(\parallel\phi\parallel)}{\parallel\phi\parallel^2}\phi^{\land}+\frac{\parallel\phi\parallel-\sin(\parallel\phi\parallel)}{\parallel\phi^3\parallel}(\phi^{\land})^2.\tag{8}</script><p><img src="/images/【文献阅读】On-Manifold-Preintegration-for-Real-Time-Visual-Inertial-Odometry/image-20220507102404953.png" alt="image-20220507102404953" style="zoom: 50%;" /></p><blockquote><p>图 1：右雅可比$ J_r $将切线空间中的加性微扰 $\delta\phi$ 与流形$ SO(3)$ 上的乘性微扰联系起来，如方程。 (7)。</p></blockquote><p>类似的一阶近似适用于对数：</p><script type="math/tex; mode=display">Log(Exp(\phi)\ Exp(\delta\phi))\approx\phi+J_r^{-1}(\phi)\delta\phi.\tag{9}</script><p>右雅可比行列式的倒数是:</p><script type="math/tex; mode=display">\begin{align*}J_r^{-1}=I+\frac{1}{2}\phi^{\land}+\left(\frac{1}{\parallel\phi\parallel^2}+\frac{1+\cos(\parallel\phi\parallel)}{2\parallel\phi\parallel\sin(\parallel\phi\parallel)}\right)(\phi^{\land})^2,\end{align*}</script><p>当$\parallel\phi\parallel= 0$ 时，右雅可比 $J_r(\phi)$ 及其逆$J_r^{-1}(\phi)$简化为单位矩阵。</p><p>指数映射的另一个有用属性是：</p><script type="math/tex; mode=display">\begin{align*}&R \ Exp(\phi)R^T=\exp(R\phi^{\land}R^T)=Exp(R\phi)\tag{10} \\ &\Leftrightarrow Exp(\phi)R=RExp(R^T\phi)\tag{11}\end{align*}</script><p>b) 特殊欧几里得群：$SE(3)$ 描述了 $3D$ 中刚体运动的群，是 $SO(3)$ 和 $\mathbb{R}^3 $的半直积，定义为 $SE(3) \doteq \{(R, p ) : R \in SO(3), p \in\mathbb{R}^3\}$。给定 $T_1, T_2 ∈ SE(3)$，组运算为$ T_1 \cdot T_2 = (R_1R_2 , p_1 + R_1p_2)$，逆运算为$ T_1^{-1} = (R^T_1 , −R^T_1 p_1)$。 $SE(3)$的指数映射和对数映射在 [44] 中定义。但是，本文不需要这些，原因将在第 III-C 节中明确说明。</p><h2 id="B-SO-3-中的不确定性描述"><a href="#B-SO-3-中的不确定性描述" class="headerlink" title="B. SO(3) 中的不确定性描述"></a>B. SO(3) 中的不确定性描述</h2><p>$SO(3)$中不确定性的自然定义是定义切线空间中的分布，然后通过指数映射$(6)$[44, 46, 47] 将其映射到$ SO(3)$：</p><script type="math/tex; mode=display">\tilde{R}=R\ Exp(\epsilon),\epsilon \sim\mathcal{N}(0,\Sigma),\tag{12}</script><p>其中 $R$是给定的无噪声旋转（平均值）并且$\epsilon$是一个小的正态分布扰动，均值为零，协方差为$\Sigma$。</p><p>为了获得 $R$分布的显式表达式，我们从$\mathbb{R}^3$中高斯分布的积分开始：</p><script type="math/tex; mode=display">\int_{\mathbb{R}^3}p(\epsilon)d\epsilon=\int_{\mathbb{R}^3}\alpha e^{-\frac{1}{2}\parallel\epsilon\parallel^2_{\Sigma} }d\epsilon=1,\tag{13}</script><p>其中$ \alpha= 1/\sqrt{(2\pi)^3 \det(\Sigma)} $， $\parallel\epsilon\parallel^2_{\Sigma}\doteq\epsilon^T\Sigma^{-1}\epsilon$是具有协方差 $\Sigma$ 的平方<strong>马氏距离</strong>。然后，应用坐标的变化$\epsilon = Log(R^{−1}\tilde{R})$ （当$ \parallel\epsilon\parallel&lt;\pi$ 时，这是 $(12)$ 的倒数），积分 $(13)$ 变为：</p><script type="math/tex; mode=display">\int_{SO(3)}\beta(\tilde{R})e^{-\frac{1}{2} \parallel Log(R^{-1}\tilde{R}) \parallel^2_{\Sigma}}d\tilde{R}=1,\tag{14}</script><p>其中 $\beta(\tilde{R})$是归一化因子。归一化因子的形式为 $\beta(\tilde{R})= α/|\det\left(\mathcal{J} (\tilde{R})\right)|$，其中$ \mathcal{J} (\tilde{R}) \doteq J_r( Log(R^{-1}\tilde{R})) $，并且$ J_r(·)$ 是右雅可比行列式 $(8)$；$\mathcal{J} (\tilde{R})$ 是变量变化的副产品，推导参见 [46]。</p><p>根据$ (14) $的论点，我们可以直接读取 $SO(3)$ 中的“高斯”分布：</p><script type="math/tex; mode=display">p(\tilde{R})=\beta(\tilde{R})e^{-\frac{1}{2} \parallel Log(R^{-1}\tilde{R}) \parallel^2_{\Sigma} }.\tag{15}</script><p>对于小的协方差，我们可以逼近$ β\simeqα$，因为当接$\tilde{R}$近 $R$ 时，$J_r( Log(R^{-1}\tilde{R}))$ 可以很好地由单位矩阵逼近。请注意，$(14)$ 已经假设协方差 $\Sigma$相对较小，因为它“剪裁”了半径为 $\pi$的开放球之外的概率尾部（这是由于重新参数化$\epsilon = Log(R^{−1}\tilde{R})$，将 $\epsilon $限制为 $\parallel\epsilon\parallel &lt; \pi$）。将$ β$ 近似为一个常数，给定一个如$(15)$中分布的测量值$\tilde{R}$，旋转 $R$ 的负对数似然是：</p><script type="math/tex; mode=display">\mathcal{L}(R)=\frac{1}{2}\parallel Log(R^{−1}\tilde{R}) \parallel^2_{\Sigma}+const=\frac{1}{2}\parallel Log(\tilde{R}^{−1}R) \parallel^2_{\Sigma}+const.\tag{16}</script><p>几何上可以解释为由逆不确定性$Σ^{-1}$加权的$\tilde{R}$和$R$之间的平方角（$SO(3)$中的测地线距离）。</p><h2 id="C-流形上的高斯-牛顿法"><a href="#C-流形上的高斯-牛顿法" class="headerlink" title="C. 流形上的高斯-牛顿法"></a>C. 流形上的高斯-牛顿法</h2><p>欧几里得空间中的标准高斯-牛顿方法通过反复优化（通常为非凸的）目标函数的二次近似来工作。求解二次近似简化为求解一组线性方程（正规方程），并且这个局部近似的解用于更新当前估计。在这里，我们回顾一下如何将这种方法扩展到（无约束的）优化问题，其变量属于某个流形 $\mathcal{M}$。让我们考虑以下优化问题：</p><p>让我们考虑以下优化问题：</p><script type="math/tex; mode=display">\underset{x\in\mathcal{M} }{\min}f(x),\tag{17}</script><p>其中变量 $x$ 属于流形$\mathcal{M}$；为简单起见，我们在 $(17)$ 中考虑单个变量，而描述很容易推广到多个变量。</p><p>与欧几里得情况相反，不能直接将 $(17) $近似为 $x$ 的二次函数。这是由于两个主要原因。首先，直接在 $x$上工作会导致问题的过度参数化（例如，我们对具有 $9$ 个元素的旋转矩阵进行参数化，而 $3D$ 旋转完全由 $\mathbb{R}^3$中的向量定义），这会使正规方程不确定，其次，所得近似的解一般不属于 $\mathcal{M}$。</p><p>流形优化的标准方法 [45, 48] 包括定义<strong>回缩</strong>（$retraction$）$ \mathcal{R}_x$，它是切线空间（在$ x$ 处）的元素 $\delta x$ 和 $x \in\mathcal{M} $的邻域之间的<strong>双射映射</strong>。使用回缩（$retraction$），我们可以将我们的问题重新参数化如下：</p><script type="math/tex; mode=display">\underset{x\in\mathcal{M} }{\min}f(x)  \Longrightarrow \underset{\delta x\in\mathbb{R}^n }{\min}f(\mathcal{R}_x(\delta x)).\tag{18}</script><p>重新参数化通常称为<strong>提升</strong>（$lifting$） [45]。粗略地说，我们在当前估计定义的切空间中工作，该空间在局部表现为欧几里得空间。使用<strong>回缩</strong>（$retraction$）允许在合适维度的欧几里德空间上构建优化问题（例如，当我们在 $SO(3) $中工作时，$\delta x ∈ \mathbb{R}^3$）。</p><p>我们现在可以将标准优化技术应用于 $(18) $右侧的问题。在 Gauss-Newton 框架中，我们将当前估计的成本平方。然后我们求解二次逼近得到一个向量$\delta x^{\star}$在切线空间。最后，流形上的当前猜测被更新为:</p><script type="math/tex; mode=display">\hat{x}\leftarrow \mathcal{R}_{\hat{x} }(\delta x^{\star}).\tag{19}</script><p>这种“lift-solve-retract”方案可以推广到任何信任区域方法[45]。此外，它提供了错误状态模型的基础和统一概括，该模型通常用于航空航天文献中的过滤[49]，最近在机器人技术中用于优化[23, 34]。</p><p>我们通过讨论<strong>回缩</strong>（$retraction$）$ \mathcal{R}_x$的选择来结束本节。一个可能的<strong>回缩</strong>（$retraction$）是指数映射。众所周知，在计算上，这可能不是最方便的选择，参见 [50]。</p><p>这项工作中，我们对 $SO(3)$ 使用以下<strong>回缩</strong>（$retraction$），</p><script type="math/tex; mode=display">\mathcal{R}_R(\phi)=R\ Exp(\delta\phi),\ \ \delta\phi\in\mathbb{R}^3,\tag{20}</script><p>对于$SE(3)$，我们使用$ T \doteq(R, p) $处的<strong>回缩</strong>（$retraction$）：</p><script type="math/tex; mode=display">\mathcal{R}_T(\delta\phi,\delta p)=(R\ Exp(\delta\phi),p+R\delta p),\ \ [\delta\phi\ \delta p]\in\mathbb{R}^6,\tag{21}</script><p>这就解释了为什么在第 III-A 节中我们只定义了 $SO(3)$ 的指数映射：通过这种<strong>回缩</strong>（$retraction$）选择，我们永远不需要计算 SE(3) 的指数映射。</p><h1 id="四、最大后验视觉惯性状态估计"><a href="#四、最大后验视觉惯性状态估计" class="headerlink" title="四、最大后验视觉惯性状态估计"></a>四、最大后验视觉惯性状态估计</h1><p>我们考虑一个VIO问题，其中我们想跟踪一个<strong>感知系统</strong>（$sensing\ system$）（例如，一个自主机器人，一个UAV，或者一个手持设备）的状态，其装备一个IMU和一个单目相机。我们假设IMU坐标系“B”和我们想要跟踪的身体坐标系重合，相机和IMU之间的变换是固定的，并且通过之前的标定已经知道（见图2）。此外，我们假设一个前端提供在未知位置的3D路标的图片测量。前端还选择一组图片，称为<strong>关键帧</strong>[32]，我们想计算它的位姿估计。第7节-B1讨论了应用，包括我们实验的前端选择。</p><p><img src="/images/【文献阅读】On-Manifold-Preintegration-for-Real-Time-Visual-Inertial-Odometry/image-20220507153228526.png" alt="image-20220507153228526" style="zoom:50%;" /></p><blockquote><p>图 2：$T_{WB}\doteq  (R_{WB}, _\mathrm{W}\mathbf{p})$ 是Body坐标系相对于世界坐标系 $W$的位姿。我们假设Body坐标与 IMU 坐标系重合。 $T_{BC}$ 是相机在Body坐标中的位姿，由先验标定已知。</p></blockquote><h2 id="A-状态"><a href="#A-状态" class="headerlink" title="A. 状态"></a>A. 状态</h2><p>系统在时间 $i $的状态由 IMU 方向、位置、速度和偏差描述：</p><script type="math/tex; mode=display">\mathrm{x}_i\doteq    [R_i,\mathbf{p}_i,\mathbf{v}_i,\mathbf{b}_i].\tag{22}</script><p>姿态 $(R_i,\mathbf{p}_i)$属于$ SE(3)$，而速度存在于向量空间中，即 $\mathbf{v}_i \in \mathbb{R}^3$。 IMU 偏差可以写为 $\mathbf{b}_i = [\mathbf{b}_i^g\ \ \mathbf{b}_i^a] \in \mathbb{R}^6$，其中 $\mathbf{b}_i^g\ , \mathbf{b}_i^a\in \mathbb{R}^3 $分别是陀螺仪和加速度计偏差。</p><p>令 $\mathcal{K}_k$ 表示直到时间 $k$ 的所有关键帧的集合。在我们的方法中，我们估计所有关键帧的状态：</p><script type="math/tex; mode=display">\mathcal{X}_k\doteq    \{\mathrm{x}_i\}_{i\in\mathcal{K_k} }.\tag{23}</script><p>在我们的实现中，我们采用了<strong>无结构</strong>的方法（参见第 VII 节），因此 3D 地标不是要估计的变量。但是，提出的方法可以推广到一般方法来估计路标和相机内参以及外参。</p><h2 id="B-测量"><a href="#B-测量" class="headerlink" title="B. 测量"></a>B. 测量</h2><p>我们估计问题的<strong>输入是来自相机和 IMU 的测量值</strong>。我们用 $\mathcal{C}_i$表示关键帧$i$处的图像测量值。在时间 $i$，相机可以观察到多个地标 $l$，因此 $\mathcal{C}_i$包含多个图像测量值 $\mathrm{z}_{il}$。我们稍微滥用符号，我们记 $ l \in \mathcal{C}_i$ 为在 $i$ 时刻看到地标 $l$ 。</p><p>我们用 $\mathcal{I}_{ij}$ 表示在两个连续关键帧 $i$ 和 $j$ 之间获得的<strong>一组 IMU 测量值</strong>。根据 IMU 测量速率和所选关键帧的频率，每个集合 $\mathcal{I}_{ij}$ 可以包含从少量到数百个 IMU 测量值。到时间 $k$ 收集的测量值集是:</p><script type="math/tex; mode=display">\mathcal{Z}_k\doteq\{\mathcal{C}_i,\mathcal{I}_{ij}\}_{(i,j)\in\mathcal{K}_k}.\tag{24}</script><h2 id="C-因子图和-MAP-估计"><a href="#C-因子图和-MAP-估计" class="headerlink" title="C. 因子图和 MAP 估计"></a>C. 因子图和 MAP 估计</h2><p>给定可用的视觉和惯性测量 $\mathcal{Z}_k$ 和先验 $p(\mathcal{X}_0)$，变量 $\mathcal{X}_k$ 的后验概率为：</p><script type="math/tex; mode=display">\begin{align*}p(\mathcal{X}_k|\mathcal{Z}_k)&\propto p(\mathcal{X}_0)\ p(\mathcal{X}_k|\mathcal{Z}_k)\overset{(a)}{=}p(\mathcal{X}_0)\prod_{(i,j)\in\mathcal{K}_k}p(\mathcal{C}_i,\mathcal{I}_{ij}|\mathcal{X}_k)\\&\overset{(b)}{=}p(\mathcal{X}_0)\prod_{(i,j)\in\mathcal{K}_k}p(\mathcal{I}_{ij}|\mathrm{x}_i,\mathrm{x}_j)\prod_{i\in\mathcal{K}_k}\prod_{l\in\mathcal{C}_i}p(\mathrm{z}_{il}|\mathrm{x}_i)\end{align*}\tag{25}</script><p>分解 $(a)$ 和 $(b)$ 遵循测量之间的标准独立假设。此外，马尔可夫属性应用于$(b)$（例如，时间 $i$ 的图像测量仅取决于时间 $i$ 的状态）。</p><p>由于测量值 $\mathcal{Z}_k$ 是已知的，我们可以自由地将它们作为变量消除，并将它们视为<strong>实际未知数的联合概率因子</strong>的参数。这自然会导致众所周知的因子图表示，这是一类可用于表示这种因子密度的<strong>二分图模型</strong> [51, 52]。图 3 给出了 VIO 问题背后的因子图的连通性示意图（无结构视觉因子的连通性将在第 VII 节中阐明）。<strong>因子图</strong>由<strong>未知数节点</strong>和定义在其上的<strong>概率因子节点</strong>组成，<strong>图结构表示每个因子涉及哪些未知数</strong>。</p><p><img src="/images/【文献阅读】On-Manifold-Preintegration-for-Real-Time-Visual-Inertial-Odometry/image-20220507162306950.png" alt="image-20220507162306950"></p><blockquote><p>图 3：左：VIO 中的视觉和惯性测量。右图：因子图，其中几个 IMU 测量值汇总在单个预积分 IMU 因子中，无结构视觉因子约束关键帧观察相同的地标。</p></blockquote><p>MAP 估计 $\mathcal{X}_k^{\star}$ 对应于 $(25)$ 的最大值，或者等效地，负对数后验的最小值。在零均值高斯噪声的假设下，<strong>负对数后验</strong>可以写为<strong>残差平方和</strong>：</p><script type="math/tex; mode=display">\begin{align*}\mathcal{X}_k^{\star}&\doteq\arg\underset{\mathcal{X}_k}{\min}-\log_ep(\mathcal{X}_k|\mathcal{Z}_k)\\&=\arg\underset{\mathcal{X}_k}{\min}\parallel r_0 \parallel^2_{\Sigma_0}+\sum_{(i,j)\in\mathcal{K}_k}\parallel r_{\mathcal{I}_{ij} } \parallel^2_{\Sigma_{ij} }+\sum_{i\in\mathcal{K}_k}\sum_{j\in\mathcal{C}_i}\parallel r_{\mathcal{C}_{il} } \parallel^2_{\Sigma_{\mathcal{C} } }\end{align*}\tag{26}</script><p>其中 $r_0,r_{\mathcal{I}_{ij} },r_{\mathcal{C}_{il} }$ 是与测量相关的<strong>残差</strong>，而 $\Sigma_0,\Sigma_{ij} $和 $\Sigma_{\mathcal{C} }$ 是相应的<strong>协方差矩阵</strong>。粗略地说，残差是 $\mathcal{X}_k$ 的函数，其在给定状态 $\mathcal{X}_k$ 和先验的前提下，量化测量值和预测值的差。以下部分的目标是提供残差和协方差的表达式。</p><h1 id="五、IMU模型与运动积分"><a href="#五、IMU模型与运动积分" class="headerlink" title="五、IMU模型与运动积分"></a>五、IMU模型与运动积分</h1><p>IMU 通常包括一个 3 轴加速度计和一个 3 轴陀螺仪，，并允许我们来测量传感器相对一个惯性坐标系的旋转速度和加速度。测量值，即 $_B\tilde{a}(t)$ 和 $_B\tilde{w}_{WB}(t)$，受加性白噪声 $\eta$ 和缓慢变化的传感器偏差 $\mathbf{b}$ 的影响：</p><script type="math/tex; mode=display">\begin{align*}_\mathrm{B}\tilde{\omega}_{\mathrm{WB} }(t)&= \ _\mathrm{B}\omega_{\mathrm{WB} }(t)+\mathbf{b}^g(t)+\mathbf{\eta}^g(t)\tag{27}\\_\mathrm{B}\tilde{a}(t)&=R^T_{\mathrm{WB} }(t)(\ _\mathrm{W}\mathbf{a}(t)-\ _\mathrm{W}\mathbf{g})+\mathbf{b}^a(t)+\mathbf{\eta}^a(t)\tag{28}\end{align*}</script><p>在我们的符号中，前缀 $\mathrm{B}$ 表示相应的量在坐标系中 $\mathrm{B}$ 表示（参见图 2）。 IMU 的位姿由变换 $\{R_\mathrm{WB},\ _\mathrm{W}p\}$ 描述，该变换将传感器坐标系 $\mathrm{B}$ 中的一个点映射到 $\mathrm{W}$ 。向量 $ \ _\mathrm{B}\omega_{\mathrm{WB} }(t)\in \mathbb{R}^3$ 是坐标系 $\mathrm{B}$ 中表示的 $\mathrm{B}$ 相对于 $\mathrm{W}$ 的<strong>瞬时角速度</strong>，而$\ _\mathrm{W}\mathbf{a}(t)\in \mathbb{R}^3$是传感器的<strong>加速度</strong>； $\ _\mathrm{W}\mathbf{g}$ 是世界坐标中的<strong>重力加速度</strong>。我们忽略了地球自转的影响，这相当于假设 $\mathrm{W}$ 是一个惯性系。</p><p>现在的目标是从 IMU 测量中推断系统的运动。为此，我们引入了以下运动学模型 [49, 53]：</p><script type="math/tex; mode=display">\begin{align*}\dot{R}_\mathrm{WB}&={R}_\mathrm{WB}\ _B{\omega}^{\land}_\mathrm{WB}\\_\mathrm{W}\dot{\mathbf{v} }&=\ _\mathrm{W}\mathbf{a}\\_\mathrm{W}\dot{\mathbf{p} }&=\ _\mathrm{W}\mathbf{v}\end{align*}\tag{29}</script><p>它描述了 $\mathrm{B}$ 的姿势和速度的演变。</p><p> $t + \Delta t $时刻的状态是通过积分方程$(29)$获得的：</p><script type="math/tex; mode=display">\begin{align*}{R}_\mathrm{WB}(t + \Delta t )&={R}_\mathrm{WB}(t)Exp\left(\int^{t + \Delta t }_t\ _B{\omega}_\mathrm{WB}(\tau)d\tau\right) \\_\mathrm{W}\mathbf{v}(t + \Delta t)&=\ _\mathrm{W}\mathbf{v}(t)+ \int^{t + \Delta t }_t\  _\mathrm{W}\mathbf{a}(\tau)d\tau\\_\mathrm{W}\mathbf{p}(t + \Delta t)&=\ _\mathrm{W}\mathbf{p}(t)+\int^{t + \Delta t }_t\  _\mathrm{W}\mathbf{v}(\tau)d\tau+\iint^{t + \Delta t }_t\  _\mathrm{W}\mathbf{a}(\tau)d\tau^2\end{align*}</script><p>假设 $\ _\mathrm{W}\mathbf{a}$ 和 $ \ _\mathrm{B}\omega_{\mathrm{WB} }(t)$ 在时间间隔 $[t, t + \Delta t]$ 内保持不变，我们可以写成：</p><script type="math/tex; mode=display">\begin{align*}{R}_\mathrm{WB}(t + \Delta t )&={R}_\mathrm{WB}(t)Exp\left(\ _B{\omega}_\mathrm{WB}(t)\Delta t\right) \\_\mathrm{W}\mathbf{v}(t + \Delta t)&=\ _\mathrm{W}\mathbf{v}(t)+\ _\mathrm{W}\mathbf{a}(t)\Delta t\\_\mathrm{W}\mathbf{p}(t + \Delta t)&=\ _\mathrm{W}\mathbf{p}(t)+\  _\mathrm{W}\mathbf{v}(t)\Delta t+\frac{1}{2}\  _\mathrm{W}\mathbf{a}(t)\Delta t^2\end{align*}\tag{30}</script><p>使用方程式。 (27)–(28)，我们可以将  $\ _\mathrm{W}\mathbf{a}$ 和 $ \ _\mathrm{B}\omega_{\mathrm{WB} }(t)$  写为 IMU 测量的函数，因此 (30) 变为:</p><script type="math/tex; mode=display">\begin{align*}{R}(t + \Delta t )&={R}(t)Exp\left(\ (\tilde{\omega}(t)-\mathbf{b}^g(t)-\mathbf{\eta}^{gd}(t))\Delta t\right) \\\mathbf{v}(t + \Delta t)&=\ \mathbf{v}(t)+\mathbf{g}\Delta t+\ R(t)(\tilde{\mathbf{a} }(t)-\mathbf{b}^a(t)-\mathbf{\eta}^{ad}(t))\Delta t\\\mathbf{p}(t + \Delta t)&=\ \mathbf{p}(t)+\  \mathbf{v}(t)\Delta t+\frac{1}{2}\  \mathbf{g}\Delta t^2+\frac{1}{2}R(t)(\tilde{\mathbf{a} }(t)-\mathbf{b}^a(t)-\mathbf{\eta}^{ad}(t))\Delta t^2\end{align*}\tag{31}</script><p>为了便于阅读，我们删除了坐标系下标（从现在开始，符号应该是明确的）。速度和位置的这种数值积分假定两个测量之间 $R(t)$是常数，对于具有非零旋转速率的测量，这不是微分方程 $(29)$ 的精确解。在实践中，使用高速IMU 可以减轻这种近似的影响。我们采用 $(31)$ 的积分方案，<strong>因为它简单，且对于建模和不确定性传播是经得起检验的。</strong>虽然我们表明这种积分方案在实践中表现非常好，但我们注意到对于较慢的 IMU 测量速率，可以考虑使用高阶数值积分方法 [54-57]。</p><p>离散时间噪声 $\eta^{gd}$ 的协方差是采样率的函数，并且通过 $Cov(\eta^{gd}(t)) = \frac{1}{\Delta t}Cov(\eta^{g}(t))$ 与连续时间频谱噪声 $\eta^{g}$ 相关。同样的关系也适用于 $\eta^{ad}$（参见 [58, 附录]）。</p><h1 id="六、-流形上的IMU预积分"><a href="#六、-流形上的IMU预积分" class="headerlink" title="六、 流形上的IMU预积分"></a>六、 流形上的IMU预积分</h1><p>虽然等式 $(31)$  可以很容易地被视为因子图中的概率约束，它需要在因子图中以高速率包含状态。直观地说，方程。 $(31)$  将时间 $t$ 和 $t + \Delta t$ 的状态关联起来，其中 $\Delta t$ 是 IMU 的采样周期。因此，我们必须在每次新的 IMU 测量时在估计中添加新状态 [37]。</p><p>在这里，我们展示了在时间 $k = i$ 和 $k = j$（见图 4）的两个关键帧之间的所有测量值可以总结为单个复合测量值，称为预积分 IMU 测量值，它限制了连续关键帧之间的运动。这个概念最初是在 [2] 中使用欧拉角提出的，我们通过开发一种适用于流形 $SO(3)$ 上的预积分的理论来扩展它。</p><p><img src="/images/【文献阅读】On-Manifold-Preintegration-for-Real-Time-Visual-Inertial-Odometry/image-20220507202527649.png" alt="image-20220507202527649"></p><blockquote><p>图 4：IMU 和相机的不同速率。</p></blockquote><p>我们假设 IMU 与相机同步，并在离散时间 $k$ 处提供测量值（参见图 4）。在时间 $k = i$ 和 $k= j$ 处对两个连续关键帧之间的所有 $\Delta t$ 间隔迭代使用 IMU 积分 (31)，我们发现：</p><script type="math/tex; mode=display">\begin{align*}{R}_j&={R}_i\prod^{j-1}_{k=i} Exp\left( (\tilde{\omega}_k-\mathbf{b}^g_k-\mathbf{\eta}^{gd}_k)\Delta t\right) \\\mathbf{v}_j&=\ \mathbf{v}_i+\mathbf{g}\Delta t_{ij}+\ \prod^{j-1}_{k=i}R_k(\tilde{\mathbf{a} }_k-\mathbf{b}^a_k-\mathbf{\eta}^{ad}_k)\Delta t\\\mathbf{p}_j&=\mathbf{p}_i+\sum^{j-1}_{k=i}\left[\  \mathbf{v}(t)\Delta t+\frac{1}{2}\  \mathbf{g}\Delta t^2+\frac{1}{2}R_k(\tilde{\mathbf{a} }_k-\mathbf{b}^a_k-\mathbf{\eta}^{ad}_k)\Delta t^2\right] \end{align*}\tag{32}</script><p>为了便于阅读，我们引入了简写 $\Delta t_{ij} \doteq  \sum^{j−1}_{k=i} \Delta t$ 和 $(·)_i \doteq (·)(t_i)$。虽然等式。 $(32)$ 已经提供了时间 $t_i$ 和 $t_j$ 之间运动的估计，它的缺点是，只要时间 $t_i$  的线性化点发生变化，就必须重复 $(32)$ 中的积分 [24]（直观地说，旋转 $R_i$ 的变化，意味着所有未来旋转 $R_k、k = i,…,j-1$ 的变化，因此有必要重新评估 $(32)$ 中的求和和乘积。</p><p>我们希望避免在时间 $t_i$ 的线性化点发生变化时重新计算上述积分。因此，我们遵循 [2] 并定义以下相对运动增量，这些增量与 $t_i$ 处的位姿和速度无关:</p><script type="math/tex; mode=display">\begin{align*}\Delta{R}_{ij}&\doteq{R}^T_iR_j\prod^{j-1}_{k=i} Exp\left( (\tilde{\omega}_k-\mathbf{b}^g_k-\mathbf{\eta}^{gd}_k)\Delta t\right) \\\Delta\mathbf{v}_{ij}&\doteq{R}^T_i(\mathbf{v}_j-\mathbf{v}_i-\mathbf{g}\Delta t_{ij})\ = \sum^{j-1}_{k=i}\Delta R_{ij}(\tilde{\mathbf{a} }_k-\mathbf{b}^a_k-\mathbf{\eta}^{ad}_k)\Delta t\\\Delta\mathbf{p}_{ij}&\doteq{R}^T_i(\mathbf{p}_j-\mathbf{p}_i-\mathbf{v}_i\Delta t_{ij}-\frac{1}{2}\sum^{j-1}_{k=i}\mathbf{g}\Delta t^2)\\&=\sum^{j-1}_{k=i}\left[\  \mathbf{v}_{ik}\Delta t+\frac{1}{2}\Delta R_{ik}(\tilde{\mathbf{a} }_k-\mathbf{b}^a_k-\mathbf{\eta}^{ad}_k)\Delta t^2\right] \end{align*}\tag{33}</script><p>其中 $\Delta{R}_{ik}\doteq R^T_i R_k $ 和 $\Delta\mathbf{v}_{ik} \doteq R^T_i (\mathbf{v}_{k}−\mathbf{v}_{i}−\mathbf{g}\Delta t_{ik})$。我们强调，与“delta”旋转 $\Delta{R}_{ij}$ 相比， $\Delta\mathbf{v}_{ij}$  和 $\Delta\mathbf{p}_{ij}$都不对应于速度和位置的真实物理变化，而是以一种方式定义的，使得 $(33)$ 的右侧独立于时间 $i$ 的状态以及引力效应。事实上，我们将能够直接从两个关键帧之间的惯性测量中计算 $(33)$ 的右侧。</p><p>不幸的是，$(33)$ 中的求和和乘积仍然是偏差估计的函数。我们分两步解决这个问题。在第 VI-A 节中，我们假设$\mathbf{b}_{i}$ 是已知的；然后，在第 VI-C 节中，我们展示了如何在偏差估计发生变化时避免重复积分。</p><p>在本文的其余部分，我们假设两个关键帧之间的偏差保持不变：</p><script type="math/tex; mode=display">\mathbf{b}^g_{i}=\mathbf{b}^g_{i+1}=···=\mathbf{b}^g_{j-1},\ \ \ \ \mathbf{b}^a_{i}=\mathbf{b}^a_{i+1}=···=\mathbf{b}^a_{j-1}.\tag{34}</script><h2 id="A-预积分-IMU-测量"><a href="#A-预积分-IMU-测量" class="headerlink" title="A. 预积分 IMU 测量"></a>A. 预积分 IMU 测量</h2><p>等式 $(33)$ 将关键帧 $i$ 和 $j$ 的状态（左侧）与测量值（右侧）相关联。从这个意义上说，它已经可以理解为一种测量模型。不幸的是，它对测量噪声有相当复杂的依赖性，这使得 MAP 估计的直接应用变得复杂。直观地说，MAP 估计器需要清楚地定义测量的密度（及其对数似然）。在本节中，我们修改 $(33)$  以便更容易推导测量对数似然。在实践中，我们在 $(33)$ 中隔离了单个惯性测量的噪声项。如上所述，在本节中，假设时间 $t_i$ 的偏差是已知的。</p><p>让我们从 $(33)$ 中的旋转增量 $\Delta{R}_{ij}$ 开始。我们使用一阶近似 $(7)$（旋转噪声“小”）并重新排列术语，通过使用关系$(11)$将噪声“移动”到末尾：</p><script type="math/tex; mode=display">\begin{align*}\Delta{R}_{ij} &\overset{eq.(7)}{\simeq}\prod^{j-1}_{k=i}\left[Exp((\tilde{\omega}_k-\mathbf{b}^g_i)\Delta t)Exp(-J^k_r\eta^{gd}_k\Delta t)\right]\\&\overset{eq.(11)}{\simeq}\Delta{\tilde R}_{ij}\prod^{j-1}_{k=i}Exp(-\Delta \tilde R^T_{k+1 j} J^k_r \eta^{gd}_k \Delta t)\\&\doteq    \Delta{\tilde R}_{ij}Exp(-\delta \phi_{ij})    \end{align*}\tag{35}</script><p>其中，$J^k_r \doteq J^k_r(( \tilde\omega_k − b^g_i )Δt)$。在 $(35)$ 的最后一行，我们定义了预积分旋转测量 $\Delta{\tilde R}_{ij} \doteq \prod^{j−1}_{k=i} Exp (( \tilde\omega_k − b^g_i) Δt)$，及其噪声 $\delta\phi_{ij}$，将在下一节中分析。</p><p>将 $(35)$ 代回 $(33)$ 中 $\Delta\mathbf{v}_{ij}$ 的表达式，使用 $Exp(-\delta \phi_{ij})    $ 的一阶近似 $(4)$，并去掉高阶噪声项，我们得到：</p><script type="math/tex; mode=display">\begin{align*}\Delta\mathbf{v}_{ij} &\overset{eq.(4)}{\simeq}\sum^{j-1}_{k=i}\Delta{\tilde R}_{ik}(I-\delta\phi^{\land}_{ik})(\tilde{\mathbf{a} }_{k}-\mathbf{b}^a_i)\Delta t -\Delta{\tilde R}_{ik}\eta^{gd}_k\Delta t\\&\overset{eq.(2)}{\simeq}\Delta\tilde{\mathbf{v} }_{ij}+\sum^{j-1}_{k=i}\left[\Delta{\tilde R}_{ik}(\tilde{\mathbf{a} }_{k}-\mathbf{b}^a_i)^{\land}\delta\phi_{ik}\Delta t - \Delta{\tilde R}_{ik}\eta^{ad}_k\Delta t\right]\\&\doteq    \Delta\tilde{\mathbf{v} }_{ij}-\delta\mathbf{v}_{ij}\end{align*}\tag{36}</script><p>其中，我们定义了预积分速度测量 $\Delta\tilde{\mathbf{v} }_{ij}\doteq\sum^{j-1}_{k=i}<br>\Delta{\tilde R}_{ik}(\tilde{\mathbf{a} }_{k}-\mathbf{b}^a_i)^{\land}\Delta t $及其噪声 $\delta\mathbf{v}_{ij}$。</p><p>类似地，将$(35)$ 和$(36)$ 代入$(33)$ 中的 $\Delta\mathbf{p}_{ij}$ 表达式，并使用一阶近似 $(4)$，我们得到：</p><script type="math/tex; mode=display">\begin{align*}\Delta\mathbf{p}_{ij} &\overset{eq.(4)}{\simeq}\sum^{j-1}_{k=i}\left[(\Delta\tilde{\mathbf{v} }_{ik}-\delta\mathbf{v}_{ik})\Delta t+\frac{1}{2}\Delta{\tilde R}_{ik}(I-\delta\phi^{\land}_{ik})(\tilde{\mathbf{a} }_{k}-\mathbf{b}^a_i)\Delta t^2 -\frac{1}{2}\Delta{\tilde R}_{ik}\eta^{ad}_k\Delta t^2 \right]\\&\overset{eq.(2)}{\simeq}\Delta\tilde{\mathbf{p} }_{ij}+\sum^{j-1}_{k=i}\left[-\delta\mathbf{v}_{ik}\Delta t+\frac{1}{2}\Delta{\tilde R}_{ik}(\tilde{\mathbf{a} }_{k}-\mathbf{b}^a_i)^{\land}\delta\phi_{ik}\Delta t^2 - \frac{1}{2}\Delta{\tilde R}_{ik}\eta^{ad}_k\Delta t^2\right]\\&\doteq    \Delta\tilde{\mathbf{p} }_{ij}-\delta\mathbf{p}_{ij}\end{align*}\tag{37}</script><p>其中我们定义了预集成的位置测量 $\Delta\tilde{\mathbf{p} }_{ij}$ 及其噪声 $\delta\mathbf{p}_{ij}$。</p><p>将表达式 $(35), (36), (37)$ 代入$ (33)$ 中 $\Delta{R}_{ij}, \Delta\mathbf{v}_{ij}, \Delta\mathbf{p}_{ij}$ 的原始定义，我们最终得到了我们的<strong>预积分测量模型</strong>（记住 $Exp(-\delta\phi_{ij})^T = Exp(\delta\phi_{ij})$):</p><script type="math/tex; mode=display">\begin{align*}\Delta{\tilde R}_{ij}&=R^T_iR_j\mathrm{Exp}(\delta\phi_{ij})\\R^T_i\Delta\tilde{\mathbf{v} }_{ij}&=R^T_i(\mathbf{v}_j-\mathbf{v}_i-\mathbf{g}\Delta t_{ij})+\delta\mathbf{v}_{ij}\\\Delta\tilde{\mathbf{p} }_{ij}&=R^T_i(\mathbf{p}_j-\mathbf{p}_i-\mathbf{v}_i\Delta t_{ij}-\frac{1}{2}\mathbf{g}\Delta t_{ij}^2)+\delta\mathbf{p}_{ij}\end{align*}\tag{38}</script><p>其中我们的复合测量被写为（待估计）状态“加上”随机噪声的函数，由随机向量 $[\delta\phi^T_{ij},\ \delta\mathbf{v}_{ij}^T,\ \delta\mathbf{p}_{ij}^T]^T$ 描述。</p><p>为了总结本节的内容，我们将 $(33)$ 的测量模型重新写为 $(38)$。$(38)$ 的优势在于，对于一个合适的噪声分布，它直接定义了对数似然。例如，具有零均值加性高斯噪声（ $(38)$的最后两行）测量的（负）对数是一个二次函数。类似地，如果 $\delta\phi_{ij}$  是零均值高斯噪声，我们计算与 $\Delta\tilde R_{ij}$ 相关的（负）对数似然。噪声项的性质将在下一节中讨论。</p><h2 id="B-噪声传播"><a href="#B-噪声传播" class="headerlink" title="B. 噪声传播"></a>B. 噪声传播</h2><p>在本节中，我们推导出噪声向量  $[\delta\phi^T_{ij},\ \delta\mathbf{v}_{ij}^T,\ \delta\mathbf{p}_{ij}^T]^T$ 的统计量。虽然我们已经观察到将噪声向量近似为零均值正态分布是很方便的，但准确地建模噪声协方差是至关重要的。实际上，噪声协方差对 MAP 估计器有很大的影响（逆噪声协方差用于对优化中的项进行加权 $(26)$）。因此，在本节中，我们提供了预积分测量的协方差 $\Sigma_{ij}$ 的推导：</p><script type="math/tex; mode=display">\eta^{\Delta}_{ij}\doteq[\delta\phi^T_{ij},\ \delta\mathbf{v}_{ij}^T,\ \delta\mathbf{p}_{ij}^T]^T\sim\mathcal{N}(0_{9\times1},\Sigma_{ij})\tag{39}</script><p>我们首先考虑预积分的旋转噪声 $\delta\phi_{ij}$。回想一下 $(35)$</p><script type="math/tex; mode=display">\mathrm{Exp}(-\delta\phi_{ij})\doteq\prod^{j-1}_{k=1}\mathrm{Exp}(-\Delta\tilde R^T_{K+1j} J^k_r\eta^{gd}_k\Delta t)\tag{40}</script><p>取两边的对数并改变符号，我们得到：</p><script type="math/tex; mode=display">\delta\phi_{ij}=-\mathrm{Log}\left(\prod^{j-1}_{k=1}\mathrm{Exp}(-\Delta\tilde R^T_{K+1j} J^k_r\eta^{gd}_k\Delta t)\right)\tag{41}</script><p>一阶近似 $(9)$ 的重复应用（回想一下，$\eta^{gd}_k$ 和 $\delta\phi_{ij}$ 都是小的旋转噪声，因此右雅可比矩阵接近恒等式）产生：</p><script type="math/tex; mode=display">\delta\phi_{ij}\simeq\sum^{j-1}_{k=1}\Delta\tilde R^T_{K+1j}J^k_r\eta^{gd}_k\Delta t\tag{42}</script><p>保留到一阶，噪声  $\delta\phi_{ij}$ 是零均值和高斯的，因为它是零均值噪声项 $\eta^{gd}_k$ 的线性组合。这是可取的，因为它使旋转测量模型 $(38)$ 完全符合形式 $(12)$。</p><script type="math/tex; mode=display">\begin{align*}\delta \mathbf{v}_{ij}&\simeq \sum^{j-1}_{k=i}\left[-\Delta{\tilde R}_{ik}(\tilde{\mathbf{a} }_{k}-\mathbf{b}^a_i)^{\land}\delta\phi_{ik}\Delta t +\Delta{\tilde R}_{ik}\eta^{ad}_k\Delta t\right]\\\delta\mathbf{p}_{ij} &\simeq\sum^{j-1}_{k=i}\left[\delta\mathbf{v}_{ik}\Delta t-\frac{1}{2}\Delta{\tilde R}_{ik}(\tilde{\mathbf{a} }_{k}-\mathbf{b}^a_i)^{\land}\delta\phi_{ik}\Delta t ^2 +\frac{1}{2}\Delta{\tilde R}_{ik}\eta^{ad}_k\Delta t^2 \right]\end{align*}\tag{43}</script><p>其中关系到一阶都是正确的。</p><p>方程。 $(42)-(43)$ 将预积分噪声 $\eta^{\Delta}_{ij}$ 表示为 IMU 测量噪声 $\eta^d_k \doteq [\eta^{gd}_k , \eta^{ad}_k ], k = 1, . . .,j − 1$, 的线性函数。因此，根据 $\eta^{d}_{k}$  的协方差知识（在 IMU 规范中给出），我们可以通过简单的线性传播计算 $\eta^{\Delta}_{ij}$ 的协方差，即 $\Sigma_{ij}$。</p><p>在附录 IX-A 中，我们提供了一种更巧妙的方法来计算$\Sigma_{ij}$。特别是，我们展示了 $\Sigma_{ij}$ 可以方便地以迭代形式计算：当一个新的 IMU 测量到达时，我们只更新 $\Sigma_{ij}$，而不是从头开始重新计算。迭代计算导致更简单的表达式并且更适合在线推理。</p><h2 id="C-组合偏差更新"><a href="#C-组合偏差更新" class="headerlink" title="C. 组合偏差更新"></a>C. 组合偏差更新</h2><p>在上一节中，我们假设在 $k = i$ 和 $k = j$ 之间的预积分期间使用的偏差 $\{\overline{b}^a_i , \overline{b}^g_i\}$ 是正确的并且不会改变。然而，更有可能的是，偏差估计在优化过程中会发生少量 $\delta\mathbf{b}$ 的变化。一种解决方案是在偏差发生变化时重新计算 delta 测量值；但是，这在计算上是昂贵的。相反，给定偏差更新 $\mathbf{b}\gets \mathbf{b} + \delta\mathbf{b}$，我们可以使用一阶展开更新 delta 测量：</p><script type="math/tex; mode=display">\begin{align*}\Delta\tilde{R}_{ij}(\mathbf{b}^g_i)&\simeq\Delta\tilde{R}_{ij}(\overline{\mathbf{b} }^g_i)\mathrm{Exp}\left(\frac{\partial\Delta\overline{R}_{ij} }{\partial\mathbf{b}^g}\delta\mathbf{b}^g \right)\\\Delta\tilde{\mathbf{v} }_{ij}(\mathbf{b}^g_i,\mathbf{b}^a_i) &\simeq\Delta\tilde{\mathbf{v} }_{ij}(\overline{\mathbf{b} }^g_i,\overline{\mathbf{b} }^a_i)+\frac{\partial\Delta\overline{\mathbf{v} }_{ij} }{\partial\mathbf{b}^g}\delta\mathbf{b}^g_i+\frac{\partial\Delta\overline{\mathbf{v} }_{ij} }{\partial\mathbf{b}^a}\delta\mathbf{b}^a_i\\\Delta\tilde{\mathbf{p} }_{ij}(\mathbf{b}^g_i,\mathbf{b}^a_i) &\simeq\Delta\tilde{\mathbf{p} }_{ij}(\overline{\mathbf{b} }^g_i,\overline{\mathbf{b} }^a_i)+\frac{\partial\Delta\overline{\mathbf{p} }_{ij} }{\partial\mathbf{b}^g}\delta\mathbf{b}^g_i+\frac{\partial\Delta\overline{\mathbf{p} }_{ij} }{\partial\mathbf{b}^a}\delta\mathbf{b}^a_i\end{align*}\tag{44}</script><p>这类似于 [2] 中的偏差校正，但直接在 $SO(3)$ 上运行。雅可比矩阵 $\{ \frac{\partial\Delta\overline{R}_{ij} }{\partial\mathbf{b}^g} , \frac{\partial\Delta\overline{\mathbf{v} }_{ij} }{\partial\mathbf{b}^g} , . . .\}$（在  $\overline{\mathbf{b} }_i$ 计算，积分时的偏差估计）描述了测量值如何由于偏差估计的变化而变化。雅可比矩阵保持不变，并且可以在预积分期间预先计算。雅可比矩阵的推导与我们在第 VI-A 节中用于将测量值表示为大值加上小扰动的推导非常相似，并在附录 IX-B 中给出。</p><h2 id="D-预积分IMU因子"><a href="#D-预积分IMU因子" class="headerlink" title="D. 预积分IMU因子"></a>D. 预积分IMU因子</h2><p>给定 $(38)$ 中的预积分测量模型，并且由于测量噪声是零均值和高斯（协方差 $\Sigma_{ij}$）直到一阶 $(39)$，现在很容易写出残差 $r_{\mathcal{I}_{ij} }\doteq [r^T_{\Delta R_{ij} }, r^T_{\Delta \mathbf{v}_{ij} },r^T_{\Delta \mathbf{p}_{ij} }]^T \in \mathbb{R}^9$, 其中:</p><script type="math/tex; mode=display">\begin{align*}r_{\Delta R_{ij} }&\doteq \mathrm{Log}\left(\left(\Delta\tilde{R}_{ij}(\overline{\mathbf{b} }^g_i)\mathrm{Exp}\left(\frac{\partial\Delta\overline{R}_{ij} }{\partial\mathbf{b}^g}\delta\mathbf{b}^g \right)\right)^TR^T_iR_j\right)\\r_{\Delta \mathbf{v}_{ij} }&\doteq R^T_i(\mathbf{v}_j-\mathbf{v}_i-\mathbf{g}\Delta t_{ij})-\left[\Delta\tilde{\mathbf{v} }_{ij}(\overline{\mathbf{b} }^g_i,\overline{\mathbf{b} }^a_i)+\frac{\partial\Delta\overline{\mathbf{v} }_{ij} }{\partial\mathbf{b}^g}\delta\mathbf{b}^g+\frac{\partial\Delta\overline{\mathbf{v} }_{ij} }{\partial\mathbf{b}^a}\delta\mathbf{b}^a\right]\\r_{\Delta \mathbf{p}_{ij} }&\doteq R^T_i(\mathbf{p}_j-\mathbf{p}_i-\mathbf{v}_i\Delta t_{ij}-\frac{1}{2}\mathbf{g}\Delta t_{ij}^2)-\left[\Delta\tilde{\mathbf{p} }_{ij}(\overline{\mathbf{b} }^g_i,\overline{\mathbf{b} }^a_i)+\frac{\partial\Delta\overline{\mathbf{p} }_{ij} }{\partial\mathbf{b}^g}\delta\mathbf{b}^g+\frac{\partial\Delta\overline{\mathbf{p} }_{ij} }{\partial\mathbf{b}^a}\delta\mathbf{b}^a\right]\\\end{align*}\tag{45}</script><p>其中我们还包括了方程的偏差更新 $(44)$。</p><p>根据“lift-solve-retract”方法（第 III-C 节），在每次 Gauss-Newton 迭代中，我们需要使用<strong>回缩($retraction$)</strong> $(21)$重新参数化 $(45)$。然后，“解决”步骤需要围绕当前估计线性化结果成本。出于线性化的目的，计算残差的雅可比行列式分析表达式很方便，我们在附录 IX-C 中推导出了该表达式。</p><h2 id="E-偏置模型"><a href="#E-偏置模型" class="headerlink" title="E. 偏置模型"></a>E. 偏置模型</h2><p>在介绍 IMU 模型 $(27)$ 时，我们说偏差是缓慢随时间变化的量。因此，我们用“布朗运动”对它们进行建模，即综合白噪声：</p><script type="math/tex; mode=display">\dot{b}^g(t)=\eta^{bg}, \ \ \ \ \dot{b}^a(t)=\eta^{ba}\tag{46}</script><p>在两个连续关键帧 $i$ 和 $j$ 之间的时间间隔 $[t_i, t_j]$ 上对 $(46)$ 进行积分，我们得到：</p><script type="math/tex; mode=display">\mathbf{b}^g_j(t)=\mathbf{b}^g_i+\eta^{bgd}, \ \ \ \ \ \mathbf{b}^a_j(t)=\mathbf{b}^a_i+\eta^{bad}\tag{47}</script><p>其中，如前所述，我们使用简写 $\mathbf{b}^g_j\doteq \mathbf{b}^g(t_i)$，我们定义离散噪声 $\eta^{bgd}$ 和 $\eta^{bad}$，它们的均值和协方差为零 $\Sigma^{bgd}\doteq \Delta t_{ij} Cov(\eta^{bg})$ 和 $\Sigma^{bad}\doteq \Delta t_{ij} Cov(\eta^{ba})$，分别（参见[58，附录]）。</p><p>模型 $(47)$ 可以很容易地包含在我们的因子图中，作为 $(26)$ 中所有连续关键帧的进一步附加项：</p><script type="math/tex; mode=display">\parallel r_{b_{ij} } \parallel^2 \doteq\parallel \mathbf{b}^g_j- \mathbf{b}^g_i \parallel^2_{\Sigma_{bgd} }+\parallel \mathbf{b}^a_j- \mathbf{b}^a_i \parallel^2_{\Sigma_{bad} }\tag{48}</script><h1 id="七、无结构视觉因子"><a href="#七、无结构视觉因子" class="headerlink" title="七、无结构视觉因子"></a>七、无结构视觉因子</h1><p>在本节中，我们将介绍我们用于视觉测量的无结构模型。我们方法的关键特征是地标的线性消除。请注意，在每次 Gauss-Newton 迭代中都会重复消除，因此我们仍然可以保证获得最佳 MAP 估计。</p><p>视觉测量通过如下求和贡献到代价函数 $(26)$ 中:</p><script type="math/tex; mode=display">\sum_{i\in\mathcal{K}_k}\sum_{l\in\mathcal{C}_i}\parallel r_{\mathcal{C}_{il} } \parallel^2=\sum^L_{l=1}\sum_{i\in\mathcal{X}(l)}\parallel r_{\mathcal{C}_{il} } \parallel^2_{\Sigma_{\mathcal{C} } }\tag{49}</script><p>其中，在右侧，我们将其重写为每个地标 $l = 1 ,. . , L$, 的贡献的总和。在 (49) 中，$\mathcal{X}(l)$ 表示看到 $l$ 的关键帧的子集。</p><p>单个图像测量 $\mathbf{z}_{il}$ 的残差的一个相当标准的模型是重投影误差：</p><script type="math/tex; mode=display">r_{\mathcal{c}_{il} }=\mathbf{z}_{il}-\pi(R_i,\mathbf{p}_{i},ρ_l)\tag{50}</script><p>其中 $ρ_l \in \mathbb{R}^3$ 表示第 $l$ 个地标的位置，$π(·)$ 是标准透视投影，它也编码了（已知的）IMU 相机变换 $T_{BC}$。</p><p>直接使用 $(50)$ 将需要包括地标位置 $ρ_l, l = 1, 。 . . , L$ 在优化中，这对计算产生负面影响。因此，在下文中，我们采用了一种无结构的方法，避免对地标进行优化，从而确保检索 MAP 估计</p><p>正如在第 III-C 节中回顾的那样，在每次 GN 迭代中，我们使用<strong>回缩($retraction$)</strong> $(21)$来提升成本函数。对于视觉因素，这意味着原始残差 $(49)$ 变为：</p><script type="math/tex; mode=display">\sum^L_{l=1}\sum_{i\in\mathcal{X}(l)}\parallel \mathbf{z}_{il}-\check{\pi}(\delta\phi_i,\delta\mathbf{p}_i,\deltaρ_l)\parallel^2_{\Sigma_{\mathcal{C} } }\tag{51}</script><p>其中 $\delta\phi_i,\delta\mathbf{p}_i,\deltaρ_l$ 是欧几里得修正，$\check{\pi}(·)$ 是提升的成本函数。 GN 方法中的“求解”步骤基于残差的线性化：</p><script type="math/tex; mode=display">\sum^L_{l=1}\sum_{i\in\mathcal{X}(l)}\parallel \mathbf{F}_{il}\delta\mathbf{T}_{i}+\mathbf{E}_{il}\delta ρ_l-\mathbf{b}_{il}\parallel^2\tag{52}</script><p>其中 $\delta \mathbf{T}_i \doteq [\delta\phi_i,\delta\mathbf{p}_i]^T$; 雅可比矩阵 $\mathbf{F}_{il},\mathbf{E}_{il}$ 和向量 $\mathbf{b}_{il}$（均由 $\Sigma^{1/2}_{\mathcal{C}}$ 归一化）来自线性化。向量$\mathbf{b}_{il}$是线性化点处的残差。将 $(52)$ 中的第二个和写成矩阵形式，我们得到：</p><script type="math/tex; mode=display">\sum^L_{l=1}\parallel \mathbf{F}_{l}\delta\mathbf{T}_{\mathcal{X}(l)}+\mathbf{E}_{l}\delta ρ_l-\mathbf{b}_{l}\parallel^2\tag{53}</script><p>其中，对于所有 $i \in \mathcal{X}(l)，\mathbf{F}_{il},\mathbf{E}_{il},\mathbf{b}_{il}$ 分别通过堆叠 $\mathbf{F}_{il},\mathbf{E}_{il},\mathbf{b}_{il}$ 获得。</p><p>由于地标 $l$ 出现在总和 $(53)$ 的单个项中，因此对于任何给定的姿态扰动 $\delta\mathbf{T}_{\mathcal{X}(l)}$ 选择，最小化代价函数 $\parallel<br>\mathbf{F}_{l}\delta\mathbf{T}_{\mathcal{X}(l)}+\mathbf{E}_{l}\delta ρ_l-\mathbf{b}_{l}<br>\parallel^2$ 的地标扰动 $\deltaρ_l$ 是：</p><script type="math/tex; mode=display">\deltaρ_l=-(\mathbf{E}_{l}^T\mathbf{E}_{l})^{-1}\mathbf{E}_{l}^T(\mathbf{F}_{l}\delta\mathbf{T}_{\mathcal{X}(l)}-\mathbf{b}_{l})\tag{54}</script><p>将 $(54)$ 代回 $(53)$ 我们可以从优化问题中消除变量 $\deltaρ_l$ ：</p><script type="math/tex; mode=display">\sum^L_{l=1}\parallel (\mathbf{I}-\mathbf{E}_{l}(\mathbf{E}_{l}^T\mathbf{E}_{l})^{-1}\mathbf{E}_{l}^T)(\mathbf{F}_{l}\delta\mathbf{T}_{\mathcal{X}(l)}-\mathbf{b}_{l})\parallel^2\tag{55}</script><p>其中 $\mathbf{I}-\mathbf{E}_{l}(\mathbf{E}_{l}^T\mathbf{E}_{l})^{-1}\mathbf{E}_{l}^T$ 是 $\mathbf{E}_{l}$的正交投影。在附录 IX-D 中，我们展示了可以进一步操纵成本 $(55)$，从而实现更有效的实施。</p><p>这种方法在BA文献中被称为 Schur 补码技巧($Schur\ complement\ trick$)，其中一种标准做法是通过反向替换来更新 $ρ_l$ 的线性化点 [61]。相反，我们使用快速线性三角测量从姿势的线性化点获得更新的地标位置。使用这种方法，我们将涉及姿势和地标的大量因子 $(51)$ 减少为仅涉及姿势的较小 $L$ 因子集 $(55)$。特别是，与界标 $l$ 对应的因子仅涉及观察 $l$ 的状态 $\mathcal{X}(l)$，创建图 3 的连接模式。MSCKF [5] 中也使用相同的方法来避免在状态向量中包含界标.</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本文对经典的预积分理论的原始论文进行了翻译，但是里面的细节暂时不是很理解。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="VIO" scheme="https://lukeyalvin.top/tags/VIO/"/>
    
    <category term="预积分理论" scheme="https://lukeyalvin.top/tags/%E9%A2%84%E7%A7%AF%E5%88%86%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>外积、内积、张量积、Kronecker积</title>
    <link href="https://lukeyalvin.top/posts/bdcf3114.html"/>
    <id>https://lukeyalvin.top/posts/bdcf3114.html</id>
    <published>2022-05-08T13:08:37.000Z</published>
    <updated>2022-05-08T13:26:11.947Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本文主要讨论数学上的内积、外积，为了不在学习中混淆，其中SLAM中用的比较多的还是点乘和叉乘。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="内积"><a href="#内积" class="headerlink" title="内积"></a>内积</h1><p>内积又称为点积，有两种定义方式，一种是代数方式，一种是集合方式。</p><ul><li><strong>代数定义</strong></li></ul><p>两个向量$\vec{a}=[a_1,a_2,···,a_n]$和$\vec{b}=[b_1,b_2,···,b_n]$的点积定义为：</p><script type="math/tex; mode=display">\vec{a}\cdot\vec{b}=\sum^{n}_{i=1}a_ib_i=a_1b_1+a_2b_2+···+a_nb_n\tag{1}</script><p>点积也可以写成$\vec{a}\vec{b}^T$</p><ul><li><strong>几何定义</strong></li></ul><p>在欧几里得空间中，点积可以直观地定义为:</p><script type="math/tex; mode=display">\vec{a}\cdot\vec{b}=|\vec{a}||\vec{b}|\cos\theta\tag{2}</script><p>其中，$|\vec{x}|$表示$\vec{x}$的模长，$\theta$表示两个向量之间的夹角。</p><h1 id="叉积（Cross-product）"><a href="#叉积（Cross-product）" class="headerlink" title="叉积（Cross product）"></a>叉积（Cross product）</h1><ul><li><strong>定义</strong></li></ul><p>叉积又称为向量积（有时候也说是外积，这里为了区分，就不这么说，因为你会发现好多外积），是对三维空间中的两个向量的二元运算，使用符号$\times$。与点积不同，它的运算结果是向量。对于线性无关的两个向量$a$和$b$，它们的外积写作 $a\times b$，是 $ a $和$b$所在平面的法线向量，与$ a $和$b$都垂直。</p><p><img src="/images/外积、内积、张量积、Kronecker积/image-20220506153837169.png" alt="image-20220506153837169" style="zoom: 25%;" /></p><p>两个向量$a$和$b$的叉积仅在三维空间有定义，写作 $a\times b$，叉积也可以定义为：</p><script type="math/tex; mode=display">a\times b=\parallel a \parallel \parallel b\parallel \sin(\theta)n\tag{3}</script><p>其中$\theta$表示$a$和$b$在它们所定义的平面上的夹角，$\parallel a \parallel$和$\parallel b \parallel$表示向量$a$和$b$的模长，而$n$则是一个与$a$和$b$所构成的平面的垂直的单位向量，方向由右手定则决定。</p><ul><li><strong>矩阵表示</strong></li></ul><p>叉积也可以定义为：</p><script type="math/tex; mode=display">a\times b=\left|\begin{matrix}i&j&k\\a_1&a_2&a_3\\b_1&b_2&b_3\end{matrix}\right|=\begin{bmatrix}a_2b_3-a_3b_2\\a_3b_1-a_1b_3\\a_1b_2-a_2b_1\end{bmatrix}=\begin{bmatrix}0&-a_3&a_2\\a_3&0&-a_1\\-a_2&a_1&0\end{bmatrix}b\triangleq a^{\land}b\tag{4}</script><p>这里引入符号$^{\land}$，成为反对称符号，这样就可以把外积$a\times b$写成了矩阵与向量的乘法$a^{\land}b$，把它变成可线性运算。在《视觉SLAM十四讲》中也有提及。</p><h1 id="张量积"><a href="#张量积" class="headerlink" title="张量积"></a>张量积</h1><p>在数学中，张量积，记为$\otimes$，可以应用于不同的上下文中如向量、矩阵、张量、向量空间、代数、拓扑向量空间和模。在各种情况下这个符号的意义是同样的:最一般的双线性运算。在某些上下文中也叫做外积。</p><script type="math/tex; mode=display">b\otimes a \rightarrow \begin{bmatrix}b_1\\b_2\\b_3\\b_4\end{bmatrix}_{4\times 1}\begin{bmatrix}a_1&a_2&a_3\end{bmatrix}_{1\times 3}=\begin{bmatrix}a_1b_1&a_2b_1&a_3b_1\\a_1b_2&a_2b_2&a_3b_2\\a_1b_3&a_2b_3&a_3b_3\\a_1b_4&a_2b_4&a_3b_4\\\end{bmatrix}_{4\times 3}\tag{5}</script><p>对于张量积之后的秩：</p><script type="math/tex; mode=display">rank(V\otimes U)=rank(V)+rank(U)\tag{6}</script><h1 id="Kronecker积"><a href="#Kronecker积" class="headerlink" title="Kronecker积"></a>Kronecker积</h1><p>数学上，克罗内克积（英语：Kronecker product）是两个任意大小的矩阵间的运算，表示为⊗。克罗内克积是外积从向量到矩阵的推广，也是张量积在标准基下的矩阵表示。</p><p>如果$A$是一个$m\times n$的矩阵，$B$是一个$p\times q$的矩阵，克罗内克积为$A\otimes B$则是一个$mp\times nq$的矩阵：</p><p><img src="/images/外积、内积、张量积、Kronecker积/image-20220506162341626.png" alt="image-20220506162341626" style="zoom: 20%;" /></p><p>更具体的表示为：</p><p><img src="/images/外积、内积、张量积、Kronecker积/image-20220506162438902.png" alt="image-20220506162438902" style="zoom:40%;" /></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本文主要讨论数学上的内积、外积，为了不在学习中混淆，其中SLAM中用的比较多的还是点乘和叉乘。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="数学基础" scheme="https://lukeyalvin.top/categories/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="内积与外积" scheme="https://lukeyalvin.top/tags/%E5%86%85%E7%A7%AF%E4%B8%8E%E5%A4%96%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>相机模型简要分析</title>
    <link href="https://lukeyalvin.top/posts/ddbf64.html"/>
    <id>https://lukeyalvin.top/posts/ddbf64.html</id>
    <published>2022-05-08T13:06:11.000Z</published>
    <updated>2022-05-08T13:08:07.811Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本节主要对相机模型做详细的解读，在此基础之上对VO以及VIO重投影误差问题作简要的概括。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="相机成像模型"><a href="#相机成像模型" class="headerlink" title="相机成像模型"></a>相机成像模型</h1><p>相机模型基于小孔成像：</p><p><img src="/images/相机模型简要分析/image-20220505170737171.png" alt="image-20220505170737171" style="zoom: 67%;" /></p><p>这里出现了几个坐标系：</p><ul><li>世界坐标系$\{W\}$，在世界坐标系下，特征点$P$在世界坐标系下的坐标为$P_w=(X_w,Y_w,Z_w)$</li><li><p>相机坐标系$\{C\}$，对相机来说，也有一个相机坐标系，也可以称之为机器人本体坐标系，因为相机属于机器人，特征点$P$在相机坐标系下的坐标为$P_c=(X_c,Y_c,Z_c)$</p></li><li><p>像素平面坐标系$\{P^{\prime}\}$，这个是通过相机内部得到的投影平面坐标系，它是一个二维的平面，特征点$P$在像素平面坐标系下的坐标为$P^{\prime}=(X^{\prime},Y^{\prime})$，</p></li><li><p>像素坐标系$\{P_{uv}\}$，像素坐标系是素平面坐标系$\{P^{\prime}\}$经过缩放和平移得到的，后面介绍。</p></li></ul><p>那么我们需要明白这几个坐标系之间的关系：</p><p><img src="/images/相机模型简要分析/image-20220505171918452.png" alt="image-20220505171918452"></p><h2 id="世界坐标系——相机坐标系"><a href="#世界坐标系——相机坐标系" class="headerlink" title="世界坐标系——相机坐标系"></a>世界坐标系——相机坐标系</h2><p>这个很简单，两者就相差一个刚体变换，这变换矩阵为$T_{cw}$，则对于特征点$P$来说，就有：</p><script type="math/tex; mode=display">P_{c}=(T_{cw}P_{w})_{(1:3)}=(T_{cw}\begin{bmatrix}X_{w}\\Y_{w}\\Z_{w}\end{bmatrix})_{(1:3)}\tag{1}</script><p>这里$(T_{cw})_{(1:3)}$指的是纯旋转的情况下，考虑他的前三项。</p><h2 id="相机坐标系——像平面坐标系"><a href="#相机坐标系——像平面坐标系" class="headerlink" title="相机坐标系——像平面坐标系"></a>相机坐标系——像平面坐标系</h2><p><img src="/images/相机模型简要分析/image-20220505172602891.png" alt="image-20220505172602891"></p><p>如图所示，展示相机内部投影的过程，</p><script type="math/tex; mode=display">\begin{align*}X^{\prime}=f\frac{X_c}{Z_c}\\Y^{\prime}=f\frac{Y_c}{Z_c}\end{align*}\tag{2}</script><h2 id="像平面坐标系——像素坐标系"><a href="#像平面坐标系——像素坐标系" class="headerlink" title="像平面坐标系——像素坐标系"></a>像平面坐标系——像素坐标系</h2><p>像素坐标系与成像平面之间，相差了一个缩放和一个原点的平移。我们设像素坐标在$u$ 轴上缩放了 $\alpha$倍，在 $v$上缩放了 $\beta$ 倍。同时，原点平移了$ [c_x,c_y]^T$。那么， $P^′$ 的坐标与像素坐标 $[u,v]^T $的关系为：  </p><script type="math/tex; mode=display">\left\{\begin{array}{L}u=\alpha X^{\prime}+c_x\\v=\alpha Y^{\prime}+c_y\end{array}\right.\\tag{3}</script><p>将$(2)$带入$(3)$:</p><script type="math/tex; mode=display">\left\{\begin{array}{L}u=f_x \frac{X_c}{Z_c}+c_x\\v=f_y \frac{Y_c}{Z_c}+c_y\end{array}\right.\\tag{3}</script><p>其中$f_x= \alpha f$，$f_y= \beta f$，$f$ 的单位为米， $\alpha,\beta$ 的单位为像素每米，所以 $f_x,f_y $的单位为像素 。</p><h2 id="相机坐标系——像素坐标系"><a href="#相机坐标系——像素坐标系" class="headerlink" title="相机坐标系——像素坐标系"></a>相机坐标系——像素坐标系</h2><script type="math/tex; mode=display">\begin{bmatrix}u\\v\\1\end{bmatrix}=\frac{1}{Z_c}\begin{bmatrix}f_x&0&c_x\\0&f_y&c_y\\0&0&1\end{bmatrix}\begin{bmatrix}X_c\\Y_c\\Z_c\end{bmatrix}\triangleq \lambda KP_c\tag{4}</script><p>其中，$\lambda$称为逆深度，$K$表示相机的内参。</p><ul><li>采用逆深度的方式，表达一个点的坐标$(x,y,z)$变成成了$1/λ * [u,v,1]^T$，将$3$个优化变量，变成了一个优化变量（$u,v$为归一化相机坐标系下的三维点的坐标，通过观测数据是可知的），所以优化变量少。</li><li>同时，对于深度很大的点，在数值上很大，采用逆深度的方式，倒一下，数值上变小了，有利于优化过程中数值的稳定性，不会因为很远的点（深度值很大）导致一次优化过程中出现较大的误差函数的变换，因此再远的点（如天空中的点）也能表达了，所以能表达非常远的点。</li><li>将深度值倒数一下，变成小数，跟接近高斯分布的函数表达形式，方便优化。</li></ul><p><strong>归一化坐标</strong></p><p>另外我们引入归一化坐标的概念，它位于相机前方 $z = 1$ 处的平面上。该平面称为<strong>归一化平面</strong>。  比如对$P_c$进行归一化处理得到$\overline{P}$</p><script type="math/tex; mode=display">\overline{P}=\frac{1}{Z_c}\begin{bmatrix}X_c\\Y_c\\Z_c\end{bmatrix}=\begin{bmatrix}\frac{X_c}{Z_c}\\\frac{Y_c}{Z_c}\\1\end{bmatrix}\tag{5}</script><p>因此，可以得到像素坐标与归一化坐标之间的关系为：</p><script type="math/tex; mode=display">\begin{bmatrix}u\\v\\1\end{bmatrix}=\frac{1}{Z_c}\begin{bmatrix}f_x&0&c_x\\0&f_y&c_y\\0&0&1\end{bmatrix}\begin{bmatrix}X_c\\Y_c\\Z_c\end{bmatrix}\triangleq  K\overline{P}\tag{6}</script><p>可以发现相机归一化坐标$\overline{P}$经过相机内参就可以得到像素坐标，所以我们可以把像素坐标$[u,v]^T$ ，看成对归一化平面上的点进行量化测量的结果。  </p><h2 id="相机坐标系——世界坐标系"><a href="#相机坐标系——世界坐标系" class="headerlink" title="相机坐标系——世界坐标系"></a>相机坐标系——世界坐标系</h2><script type="math/tex; mode=display">\begin{bmatrix}u\\v\\1\end{bmatrix}=\frac{1}{Z_c}\begin{bmatrix}f_x&0&c_x\\0&f_y&c_y\\0&0&1\end{bmatrix}(R_{cw}P_w+t)\triangleq \lambda KT_{cw}P_w\tag{7}</script><h1 id="VO重投影误差"><a href="#VO重投影误差" class="headerlink" title="VO重投影误差"></a>VO重投影误差</h1><p>重投影误差如图示，我们通过特征匹配可知，观测值$p_1$和$p_2$是同一个空间点$P$的投影，而实际上我们利用帧间的位姿估计，可以通过观测值$p_1$求得对应的匹配$\hat{p}_2$，理论上，我们的计算值$\hat{p}_2$与观测值$p_1$应该是重合的，但是，由于我们估计的帧间位姿并不是准确的，因此就会出现误差$e$，我们称之为重投影误差。</p><p><img src="/images/相机模型简要分析/image-20220505202300998.png" alt="image-20220505202300998" style="zoom:50%;" /></p><p>按照之前的基础知识，可以推导：</p><script type="math/tex; mode=display">s_iu_i=K\exp(\xi^{\land})P_i\tag{8}</script><p>其中，$u_i=[u_i,v_i]^T$表示特征点$P$的投影坐标，$s_i$表示深度，$K$表示相机内参，$\exp(\xi^{\land})$则是变换$T_{cw}$的李代数形式，这里的$P_i$是特征点的世界坐标。这里类似于公式$(7)$。</p><p>通过重投影误差的定义可知，我们的目的在于不断优化变量$\xi$，从而得到一个最优的$\xi$使得$e$的值达到最小，因此构建最小二乘：</p><script type="math/tex; mode=display">\xi^*=\arg\underset{\xi}{\min}\frac{1}{2}\sum^n_{i=1}\parallel u_i-\frac{1}{s_i}K\exp(\xi^{\land})P_i\parallel^2_2\tag{9}</script><p>然后就是对其优化的内容了，这里可以参考：<a href="https://lukeyalvin.top/posts/20908.html#1-%E9%87%8D%E6%8A%95%E5%BD%B1%E8%AF%AF%E5%B7%AE">PnP_重投影误差</a></p><h1 id="VIO重投影误差"><a href="#VIO重投影误差" class="headerlink" title="VIO重投影误差"></a>VIO重投影误差</h1><p>由构建于VIO重投影误差省略了相机内参$K$，那么，我们在公式$(6)$的基础上把$K$去掉，就发现<strong>特征点在相机归一化平面的坐标就是像素坐标</strong>$[u,v]^T$，其中$[u,v]^T$是观测值，由于$T_{cw}$是估计出来的，所以等式右边是估计值，理想情况下有：</p><script type="math/tex; mode=display">\begin{bmatrix}u\\v\\1\end{bmatrix}=T_{cw}\begin{bmatrix}\frac{X_w}{Z_w}\\\frac{Y_w}{Z_w}\\1\end{bmatrix}=\begin{bmatrix}\frac{X_c}{Z_c}\\\frac{Y_c}{Z_c}\\1\end{bmatrix}\triangleq  \overline{P}</script><p>而此时的重投影误差就变成了：</p><script type="math/tex; mode=display">r_c=\begin{bmatrix}\frac{X_c}{Z_c}-u\\\frac{Y_c}{Z_c}-v\end{bmatrix}</script><p>熟悉这个之后，我们再来学习一下VIO重投影误差。</p><p><img src="/images/相机模型简要分析/image-20220505205125811.png" alt="image-20220505205125811" style="zoom: 33%;" /></p><p>特征点逆深度在第$i$帧中初始化得到，在第 $j$ 帧又被观测到，预测其在第$ j$ 中的坐标为：  </p><script type="math/tex; mode=display">\begin{bmatrix}X_{cj}\\Y_{cj}\\Z_{cj}\\1\end{bmatrix}=T^{-1}_{bc}T^{-1}_{wb_j}T_{wb_i}T_{bc}\begin{bmatrix}\frac{1}{\lambda}u_{ci}\\\frac{1}{\lambda}v_{ci}\\\frac{1}{\lambda}\\1\end{bmatrix}\tag{10}</script><p>设特征点$P$经过特征匹配，得到在$i,j$两帧上的投影观测值，目前特征点在$i$帧的观测值是初始化值，所以在$i$帧相机坐标为$\begin{bmatrix}\frac{1}{\lambda}u_{cj}\\\frac{1}{\lambda}v_{cj}\\\frac{1}{\lambda}\\1\end{bmatrix}$，然后使用估计的位姿变换$T^{-1}_{bc}T^{-1}_{wb_j}T_{wb_i}T_{bc}$进行一系列坐标变换，得到的是该特征点在第$j$帧估计的相机坐标$\begin{bmatrix}X_{cj}\\Y_{cj}\\Z_{cj}\\1\end{bmatrix}$，把它化为归一化坐标，得到$\begin{bmatrix}\frac{X_{cj} }{Z_{cj} }\\\frac{Y_{cj} }{Z_{cj} }\end{bmatrix}$,我们知道，在忽略$K$的前提下，归一化坐标就是像素坐标，由于一直第$j$帧下的像素坐标观测值为$\begin{bmatrix}u_{c_j}\\v_{c_j}\end{bmatrix}$,所以，就可以构建如下的残差项：</p><script type="math/tex; mode=display">r_c=\begin{bmatrix}\frac{X_{cj} }{Z_{cj} }-u\\\frac{Y_{cj} }{Z_{cj} }-v\end{bmatrix}\tag{11}</script>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本节主要对相机模型做详细的解读，在此基础之上对VO以及VIO重投影误差问题作简要的概括。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="SLAM十四讲" scheme="https://lukeyalvin.top/categories/SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/"/>
    
    
    <category term="VIO" scheme="https://lukeyalvin.top/tags/VIO/"/>
    
    <category term="相机模型" scheme="https://lukeyalvin.top/tags/%E7%9B%B8%E6%9C%BA%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="VO" scheme="https://lukeyalvin.top/tags/VO/"/>
    
  </entry>
  
  <entry>
    <title>状态估计模型与贝叶斯滤波</title>
    <link href="https://lukeyalvin.top/posts/b04da399.html"/>
    <id>https://lukeyalvin.top/posts/b04da399.html</id>
    <published>2022-05-04T11:29:54.032Z</published>
    <updated>2022-05-08T13:27:20.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>基于滤波器的激光SLAM方法，目前已经相对落后，因为滤波是用于估计当前的状态，如果我们之前的数据出现错误，是没有办法进行修正的，所以这个方法的整体效果并不是特别好。但是这个方法在整个激光SLAM的发展中还是占有很重要的地位的，而且这里蕴含的很多数学知识是非常重要的。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p><strong>滤波器的本质：</strong>结合预测和观测，得到“最精确”的后验值。这个精确值是相对的，因为实际中，预测和观测均是从传感器而来的，因此滤波器的作用就是结合各个传感器得到一个最好的融合结果。这就是一个数据融合的过程，关于数据融合的介绍可以参考：<a href="https://lukeyalvin.top/posts/8369.html#%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88">数据融合</a></p><p><img src="/images/滤波器基本原理/image-20220504151009319.png" alt="image-20220504151009319" style="zoom:50%;" /></p><p>1) 实际中预测往往从IMU、编码器等传感器递推而来；<br>2) 观测往往从GPS、雷达、相机等传感器而来；<br>3) 后验为融合后的结果，即定位模块的输出。</p><h1 id="状态估计模型"><a href="#状态估计模型" class="headerlink" title="状态估计模型"></a>状态估计模型</h1><p>实际状态估计任务中，待估计的后验概率密度可以表示为：</p><script type="math/tex; mode=display">p(x_k|\tilde{x}_0,v_{1:k},y_{0:k})\tag{1}</script><p>其中：$\tilde{x}_0$表示的是状态初始值；$v_{1:k}$表示从第1时刻到第$k$时刻的输入；$y_{0:k}$表示从第0时刻到第$k$时刻的观测。</p><p>因此，滤波问题可以直观表示为，根据所有历史数据（输入、观测、初始状态），得出的最终的融合结果。历史数据之间的关系，可以用下面的图模型表示，</p><p><img src="/images/滤波器基本原理/image-20220504205031587.png" alt="image-20220504205031587" style="zoom: 33%;" /></p><p>图模型中体现了<strong>马尔可夫性</strong>，即当前状态只跟前一时刻状态相关，和其他历史时刻状态无关。数学表达该性质，</p><script type="math/tex; mode=display">\left\{\begin{aligned}运动方程：x_k&=f(x_{k-1},v_k,w_k)\\观测方程：y_k&=g(x_k,n_k)\end{aligned}\right.\tag{2}</script><h1 id="贝叶斯滤波"><a href="#贝叶斯滤波" class="headerlink" title="贝叶斯滤波"></a>贝叶斯滤波</h1><p>根据贝叶斯公式，$k$时刻后验概率密度可以表示为</p><script type="math/tex; mode=display">\begin{align*}p(x_k|\tilde{x}_0,v_{1:k},y_{0:k})&=\frac{p(y_k|x_k,\tilde{x}_0,v_{1:k},y_{0:k-1})p(x_k|\tilde{x}_0,v_{1:k},y_{0:k-1})}{p(y_k|\tilde{x}_0,v_{1:k},y_{0:k-1})}\\&=\eta p(y_k|x_k,\tilde{x}_0,v_{1:k},y_{0:k-1})p(x_k|\tilde{x}_0,v_{1:k},y_{0:k-1})\end{align*}\tag{3}</script><p>根据观测方程，$y_k$只与$x_k$相关，因此上式可以简写为：</p><script type="math/tex; mode=display">p(x_k|\tilde{x}_0,v_{1:k},y_{0:k})=\eta p(y_k|x_k)p(x_k|\tilde{x}_0,v_{1:k},y_{0:k-1})\tag{4}</script><p>应用系统的马尔可夫性进一步化简公式，</p><script type="math/tex; mode=display">\begin{align*}&p(x_k|\tilde{x}_0,v_{1:k},y_{0:k-1})\\&=\int p(x_k,x_{k-1}|\tilde{x}_0,v_{1:k},y_{0:k-1})dx_{k-1}\\&=\int p(x_k|x_{k-1}，\tilde{x}_0,v_{1:k},y_{0:k-1})p(x_{k-1}|\tilde{x}_0,v_{1:k},y_{0:k-1})dx_{k-1}\\&=\int p(x_k|x_{k-1},v_{k})p(x_{k-1}|\tilde{x}_0,v_{1:k},y_{0:k-1})dx_{k-1}\end{align*}\tag{3}</script><p>经过以上化简，最终后验概率可以写为</p><p><img src="/images/滤波器基本原理/image-20220504211503741.png" alt="image-20220504211503741" style="zoom: 50%;" /></p><p>根据以上结果，可以画出贝叶斯滤波的信息流图如下</p><p><img src="/images/滤波器基本原理/image-20220504210156815.png" alt="image-20220504210156815"></p><p>贝叶斯滤波分为很多种实现形式：</p><p><img src="/images/滤波器基本原理/image-20220504211643228.png" alt="image-20220504211643228" style="zoom: 50%;" /></p><p>实际中，粒子滤波（PF）多用于(早期的)2D激光SLAM方案中。在高斯假设前提下，用贝叶斯滤波的原始形式比较复杂，可以利用高斯的特征得到简化形式，即广义高斯滤波，后面KF、EKF、IEKF、UKF的推导均采用这种形式，只有PF例外，因为它是针对非高斯的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;基于滤波器的激光SLAM方法，目前已经相对落后，因为滤波是用于估计当前的状态，如果我们之前的数据出现错误，是没有办法进行修正的，所以这个方法的整体效果并不是特别好。但是这个方法在整个激光SLAM的发展中还是占有很重要的地位的，而且这里蕴含的很多数学知识是非常重要的。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    
    <category term="滤波器" scheme="https://lukeyalvin.top/tags/%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    
    <category term="概率基础" scheme="https://lukeyalvin.top/tags/%E6%A6%82%E7%8E%87%E5%9F%BA%E7%A1%80/"/>
    
    <category term="贝叶斯滤波" scheme="https://lukeyalvin.top/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%BB%A4%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>滤波器概要及其概率基础</title>
    <link href="https://lukeyalvin.top/posts/664a0a9d.html"/>
    <id>https://lukeyalvin.top/posts/664a0a9d.html</id>
    <published>2022-05-04T06:56:12.053Z</published>
    <updated>2022-05-08T13:27:42.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>基于滤波器的激光SLAM方法，目前已经相对落后，因为滤波是用于估计当前的状态，如果我们之前的数据出现错误，是没有办法进行修正的，所以这个方法的整体效果并不是特别好。但是这个方法在整个激光SLAM的发展中还是占有很重要的地位的，而且这里蕴含的很多数学知识是非常重要的。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="滤波器的作用"><a href="#滤波器的作用" class="headerlink" title="滤波器的作用"></a>滤波器的作用</h1><p><strong>滤波器的本质：</strong>结合预测和观测，得到“最精确”的后验值。这个精确值是相对的，因为实际中，预测和观测均是从传感器而来的，因此滤波器的作用就是结合各个传感器得到一个最好的融合结果。这就是一个数据融合的过程，关于数据融合的介绍可以参考：<a href="https://lukeyalvin.top/posts/8369.html#%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88">数据融合</a></p><p><img src="/images/滤波器及其概率基础/image-20220504151009319.png" alt="image-20220504151009319" style="zoom:50%;" /></p><p>1) 实际中预测往往从IMU、编码器等传感器递推而来；<br>2) 观测往往从GPS、雷达、相机等传感器而来；<br>3) 后验为融合后的结果，即定位模块的输出。</p><h1 id="概率基础知识"><a href="#概率基础知识" class="headerlink" title="概率基础知识"></a>概率基础知识</h1><h2 id="1-概率以及概率密度"><a href="#1-概率以及概率密度" class="headerlink" title="1. 概率以及概率密度"></a>1. 概率以及概率密度</h2><p><img src="/images/滤波器及其概率基础/image-20220504151219788.png" alt="image-20220504151219788" style="zoom:50%;" /></p><p>上图中，$p(x)$为$x$在区间$[a,b]$上的<strong>概率密度</strong>，它表示的是随机变量在区间的分布情况。$P_r$代表的是$x$在区间$[c,d]$上的<strong>概率</strong>，它是概率密度的积分。<br>我们平时所说“高斯分布”、“非高斯分布”均是指它的<strong>概率密度</strong>。</p><h2 id="2-联合概率"><a href="#2-联合概率" class="headerlink" title="2. 联合概率"></a>2. 联合概率</h2><p>$x\in[a,b]$和$y\in[r,s]$的联合概率密度函数可以表示为$p(x,y)$，其积分表示$x$和$y$同时处在某个区间的<br>概率，满足下式：</p><script type="math/tex; mode=display">\int^a_b\int^s_rp(x,y)dydx=1\tag{1}</script><p>特别地，当$x$和$y$相互独立的时候，有：</p><script type="math/tex; mode=display">p(x,y)=p(x)p(y)\tag{2}</script><h2 id="3-条件概率"><a href="#3-条件概率" class="headerlink" title="3. 条件概率"></a>3. 条件概率</h2><p>$x$关于$y$的条件概率密度函数可以表示为：</p><script type="math/tex; mode=display">p(x|y)</script><p>它的含义是，在$y\in[r,s]$的前提下，$x\in[a,b]$的概率分布。满足下式：</p><script type="math/tex; mode=display">p(x)=\int^s_rp(x|y)p(y)dy\tag{3}</script><p>特别地，当$x$和$y$相互独立的时候，有：</p><script type="math/tex; mode=display">p(x|y)=p(x)\tag{4}</script><h2 id="4-贝叶斯公式"><a href="#4-贝叶斯公式" class="headerlink" title="4. 贝叶斯公式"></a>4. 贝叶斯公式</h2><p>联合概率分解成条件概率和边缘概率的乘积，即:</p><script type="math/tex; mode=display">p(x,y)=p(x|y)p(y)=p(y|x)p(x)\tag{6}</script><p>重新整理:</p><script type="math/tex; mode=display">p(x|y)=\frac{p(y|x)p(x)}{p(y)}\tag{7}</script><h2 id="5-贝叶斯估计"><a href="#5-贝叶斯估计" class="headerlink" title="5. 贝叶斯估计"></a>5. 贝叶斯估计</h2><p>贝叶斯估计也叫贝叶斯推断，贝叶斯推断可以理解为贝叶斯公式的运用，它是指，如果已知<strong>先验概率密度函数</strong>$p(x)$，以及<strong>传感器模型</strong>$p(y|x)$，那么就可以根据贝叶斯公式推断出<strong>后验概率密度</strong>。</p><script type="math/tex; mode=display">p(x|y)=\frac{p(y|x)p(x)}{\int p(y|x)p(x)dx}\tag{8}</script><h2 id="6-高斯概率密度函数"><a href="#6-高斯概率密度函数" class="headerlink" title="6. 高斯概率密度函数"></a>6. 高斯概率密度函数</h2><ul><li>一维情况下，高斯概率密度函数表示为：</li></ul><script type="math/tex; mode=display">p(x|\mu,\sigma^2)=\frac{1}{\sqrt{2\pi\sigma^2} }\exp(-\frac{(x-\mu)^2}{2\sigma^2})\tag{9}</script><p>其中$\mu$为均值，$\sigma^2$为方差。</p><ul><li>多维的情况下，高斯概率密度函数表示为：</li></ul><script type="math/tex; mode=display">p(x|\mu,\Sigma)=\frac{1}{\sqrt{(2\pi)^N\det\Sigma} }\exp\left(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu)\right)\tag{10}</script><p>其中$\mu$为均值，$\Sigma$为方差。</p><p>一般把高斯分布写成$x\sim \mathcal{N}(\mu,\Sigma)$。</p><h2 id="7-联合高斯概率密度函数"><a href="#7-联合高斯概率密度函数" class="headerlink" title="7. 联合高斯概率密度函数"></a>7. 联合高斯概率密度函数</h2><p>如有高斯分布$p(x)= \mathcal{N}(\mu_x,\Sigma_{xx})$，$p(y)= \mathcal{N}(\mu_y,\Sigma_{yy})$。则它们的联合概率密度函数可以表示为：</p><script type="math/tex; mode=display">p(x,y)=\mathcal{N}\left(\begin{bmatrix}\mu_x\\\mu_y\end{bmatrix},\begin{bmatrix}\Sigma_{xx}&\Sigma_{xy}\\\Sigma_{yx}&\Sigma_{yy}\end{bmatrix}\right)\tag{11}</script><p>由于高斯分布中指数项包含方差的求逆，而此处联合概率的方差是一个高维矩阵，对它求逆的简洁办法是运用舒尔补。</p><p>舒尔补的主要目的是把矩阵分解成<strong>上三角矩阵、对角阵、下三角矩</strong>阵乘积的形式，方便运算，即</p><script type="math/tex; mode=display">\begin{bmatrix}A&B\\C&D\end{bmatrix}=\begin{bmatrix}I&BD^{-1}\\0&I\end{bmatrix}\begin{bmatrix}\Delta D&0\\0&D\end{bmatrix}\begin{bmatrix}I&0\\D^{-1}C&I\end{bmatrix}\tag{12}</script><p>其中$\Delta D=A-BD^{-1}C$称为矩阵$D$关于原矩阵的舒尔补。</p><p>此时有：</p><script type="math/tex; mode=display">\begin{bmatrix}A&B\\C&D\end{bmatrix}^{-1}=\begin{bmatrix}I&0\\-D^{-1}C&I\end{bmatrix}\begin{bmatrix}\Delta D^{-1}&0\\0&D^{-1}\end{bmatrix}\begin{bmatrix}I&-BD^{-1}\\0&I\end{bmatrix}\tag{12}</script><p>因此，利用舒尔补，联合分布的方差矩阵可以写为</p><script type="math/tex; mode=display">\begin{bmatrix}\Sigma_{xx}&\Sigma_{xy}\\\Sigma_{yx}&\Sigma_{yy}\end{bmatrix}=\begin{bmatrix}1&\Sigma_{xy}\Sigma_{yy}^{-1}\\0&1\end{bmatrix}\begin{bmatrix}\Sigma_{xx}-\Sigma_{xy}\Sigma_{yy}^{-1}\Sigma_{yx}&0\\0&\Sigma_{yy}\end{bmatrix}\begin{bmatrix}1&0\\\Sigma_{yy}^{-1}\Sigma_{yx}&1\end{bmatrix}\tag{13}</script><p>它的逆矩阵为:</p><script type="math/tex; mode=display">\begin{bmatrix}\Sigma_{xx}&\Sigma_{xy}\\\Sigma_{yx}&\Sigma_{yy}\end{bmatrix}^{-1}=\begin{bmatrix}1&0\\-\Sigma_{yy}^{-1}\Sigma_{yx}&1\end{bmatrix}\begin{bmatrix}\Sigma_{xx}-\Sigma_{xy}\Sigma_{yy}^{-1}\Sigma_{yx}&0\\0&\Sigma_{yy}\end{bmatrix}\begin{bmatrix}1&-\Sigma_{xy}\Sigma_{yy}^{-1}\\0&1\end{bmatrix}\tag{14}</script><p>对于$(11)$中的$p(x,y)$，它仍然是一个概率分布，它的指数部分的二次项包含如下内容</p><p><img src="/images/滤波器及其概率基础/image-20220504160750871.png" alt="image-20220504160750871"></p><p>由于联合概率满足下式:</p><script type="math/tex; mode=display">p(x,y)=p(x|y)p(y)</script><p>该式在高斯分布的前提下可以重新分解。且$p(y)= \mathcal{N}(\mu_y,\Sigma_{yy})$</p><p>最后得到两个二次项的和，由于同底数幂相乘后，底数不变，指数相加:</p><script type="math/tex; mode=display">p(x|y)=\frac{p(x,y)}{p(y)}=\mathcal{N}\left(\mu_x+\Sigma_{xy}\Sigma_{yy}^{-1}(y-\mu_y),\Sigma_{xx}-\Sigma_{xy}\Sigma_{yy}^{-1}\Sigma_{yx}\right)\tag{15}</script><h2 id="8-高斯随机变量的线性分布"><a href="#8-高斯随机变量的线性分布" class="headerlink" title="8. 高斯随机变量的线性分布"></a>8. 高斯随机变量的线性分布</h2><p>在前面的基础上，若已知$x$和$y$的关系有如下的关系：</p><script type="math/tex; mode=display">y=Gx+n\tag{16}</script><p>其中$G$是一个常量矩阵，$n\in\mathcal{N}(0,R)$为零均值白噪声，在实际中指的是观测噪声。则$x$和$y$的均值和方差之间必然存在联系，其联系可通过以下推导获得。</p><ul><li>均值</li></ul><script type="math/tex; mode=display">\begin{align*}\mu_y&=E[y]\\&=E[Gx+n]\\&=GE[x]+E[n]\\&=G\mu_x\end{align*}\tag{17}</script><ul><li>方差</li></ul><script type="math/tex; mode=display">\begin{align*}\Sigma_{yy}&=\Sigma(Gx)+\Sigma(n)\\&=E[(Gx-\mu_y)(Gx-\mu_y)^T]+R\\&=GE[(x-\mu_y)(x-\mu_y)^T]G^T+R\\&=G\Sigma_{xx}G^T+R\\\end{align*}\tag{18}</script><ul><li>方差的交叉项</li></ul><script type="math/tex; mode=display">\begin{align*}\Sigma_{xy}&=E[(x-\mu_x)(y-\mu_y)^T]\\&=E[(x-\mu_x)(Gx-G\mu_x+n)^T]\\&=E[(x-\mu_x)(Gx-G\mu_x)^T+(x-\mu_x)n^T]\\&=\Sigma_{xx}G^T+E[(x-\mu_x)n^T]\\&=\Sigma_{xx}G^T\end{align*}\tag{19}</script><p>同理可得：</p><script type="math/tex; mode=display">\Sigma_{yx}=\Sigma_{xy}^T=G\Sigma_{xx}\tag{20}</script>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;基于滤波器的激光SLAM方法，目前已经相对落后，因为滤波是用于估计当前的状态，如果我们之前的数据出现错误，是没有办法进行修正的，所以这个方法的整体效果并不是特别好。但是这个方法在整个激光SLAM的发展中还是占有很重要的地位的，而且这里蕴含的很多数学知识是非常重要的。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    
    <category term="滤波器" scheme="https://lukeyalvin.top/tags/%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    
    <category term="数学基础" scheme="https://lukeyalvin.top/tags/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>点云地图的建立、畸变补偿和定位</title>
    <link href="https://lukeyalvin.top/posts/f737dac5.html"/>
    <id>https://lukeyalvin.top/posts/f737dac5.html</id>
    <published>2022-05-03T10:44:59.183Z</published>
    <updated>2022-05-04T01:30:50.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>点云地图的建立</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="建图流程"><a href="#建图流程" class="headerlink" title="建图流程"></a>建图流程</h1><p>建图流程设计的核心原则是准确、高效地把<strong>里程计相对位姿</strong>、<strong>回环相对位姿</strong>、<strong>惯导先验位姿</strong>进行融合。</p><p><img src="/images/点云地图的建立/image-20220503190523343.png" alt="image-20220503190523343" style="zoom: 33%;" /></p><ul><li>轨迹对齐</li></ul><p>里程计的初始位姿是从激光雷达收到第一帧点云开始的，它的初始位姿就是单位阵，平移和旋转均为0；而对于惯导而言，它的旋转是以东北天坐标系为准的，因此它的初始位姿并不一定为0；因此里程计第一帧之间的位姿和惯导第一帧的位姿出现了相对旋转，这会导致里程计和先验之间出现很大的误差，所以我们求第一帧时里程计和惯导位姿之间的相对变换即可，这样就可以把里程计的轨迹拉到与惯导轨迹（一般和小车行进方向一致）一致的方向。这个过程就是<strong>轨迹对齐</strong>。</p><ul><li>回环检测</li></ul><p>这里涉及一个简单的回环检测的策略，比如如下的回环，我们检测回环不可能每一帧都进行检测，而是在一定的范围内，并且两帧之间的时间差必须大于一定的阈值，另外当某一帧被检测为闭环了，那么它相邻的一些帧则不做重复的检测，把相邻帧做“吸收化”之后，在后续段进行闭环检测。</p><p><img src="/images/点云地图的建立/image-20220503191428273.png" alt="image-20220503191428273" style="zoom: 50%;" /></p><ul><li>优化周期</li></ul><p>固定优化周期，可以在一定周期内进行优化，可以在误差累积相对较小的情况下进行优化，因为累积误差小，优化时间短，这样前端里程计构建过程中可以同步实现后端的优化，可以提高效率。</p><h1 id="畸变补偿"><a href="#畸变补偿" class="headerlink" title="畸变补偿"></a>畸变补偿</h1><ul><li><strong>产生原因：</strong></li></ul><p>由于一帧点云中的激光点是不同时刻采集的，激光点的坐标原点是采集时刻的雷达位姿，雷达在不同时刻的位姿有变化的时候，各个激光点原点不一致，拼接成一帧时，点云的形状便和实际物体形状不一致。</p><p><img src="/images/点云地图的建立/image-20220503193403250.png" alt="image-20220503193403250" style="zoom:50%;" /></p><p><img src="/images/loam论文深度解析/image-20220411193701848.png" alt="image-20220411193701848" style="zoom:33%;" /></p><ul><li><strong>补偿方法：</strong></li></ul><p>对于每一个激光点坐标做补偿，补偿量为激光点云与原点（即当时激光雷达坐标）相对于该帧起始时刻的变换。</p><h2 id="计算相对坐标"><a href="#计算相对坐标" class="headerlink" title="计算相对坐标"></a>计算相对坐标</h2><p>在匀速模型假设前提下，坐标 = 运动×时间。</p><p>假设第一帧点云的起始位姿为：</p><script type="math/tex; mode=display">T_0=\begin{bmatrix}R_0&t_0\\0&1\end{bmatrix}\tag{1}</script><p>第$i$个激光点采集时，雷达的位姿为：</p><script type="math/tex; mode=display">T_i=\begin{bmatrix}R_i&t_i\\0&1\end{bmatrix}\tag{2}</script><p>第$i$个激光点的坐标为：</p><script type="math/tex; mode=display">P_i=[p_{ix} \ p_{iy} \ p_{iz}]^T\tag{3}</script><p>则第$i$个激光点补偿畸变后的坐标应该为：</p><script type="math/tex; mode=display">\overline{P}_i=T_0^{-1}T_iP_i\tag{4}</script><p>上式可以理解为，只需要计算$0$到$i$时刻，激光雷达的相对旋转和相对平移变换即可。</p><p>实际上，雷达点云是局部坐标系下的表示，当以0时刻雷达的位姿为基准坐标系的时候，此时$T_0$为单位阵，$T_i$即为$0$到$i$时刻的相对旋转和平移。</p><p>此时有：</p><script type="math/tex; mode=display">\begin{align*}R_i&=\omega\nabla t\\t_i&=V\nabla t\end{align*}\tag{5}</script><p>即，只需要知道$0$到$i$时刻的平均角速度和平均速度即可。</p><p><strong>那么时间差如何进行求取呢？</strong></p><p>由于是顺序扫描，我们可以通过$\arctan\frac{y}{x}$来计算出该激光点相对于第一个激光点旋转过的角度$\beta$，已知雷达内部旋转$360°$用了$100ms$，那么旋转$\beta$角度所用的时间就可以计算出来了。</p><p>但是由于$\arctan\frac{y}{x}\in[-90°,90°]$的范围。而雷达的周期是$360°$，因此计算出来的$\arctan\frac{y}{x}$还需要进行角度补偿。</p><p>下面摘自：<a href="https://zhuanlan.zhihu.com/p/109379384">从零开始做自动驾驶定位(八): 点云畸变补偿</a></p><h2 id="点云数据排列方式"><a href="#点云数据排列方式" class="headerlink" title="点云数据排列方式"></a>点云数据排列方式</h2><p>做激光定位的多数都看过loam的程序，会发现在计算激光点采集时刻这一步上我们和它是有区别的，这就是这个点云排列方式导致的。</p><p>从激光雷达原理上讲，每次采集一列，边扫描边采集，所以数据应该是一列一列地存储，这样保证第一个点一定是最早时刻被采集的，最后一个点是最晚时刻被采集的，这样做有一个好处，那就是可以计算雷达真正扫描了多少度，因为它就是第一个点和最后一个点的角度差。</p><p>而在这个bag文件里，是按行存储的，也就是先索引第一根线上的点，再第二根，依次类推，直到最后一根，这样的缺点是，我们无法通过这个来计算雷达实际扫描角度了，因为第一个点不一定是时间最早的点，如果第一根线前半部分被遮挡，那么你就会得到错误的计算角度，所以这时候，像我们这样直接强制把扫描角度设置成360度是更稳妥的，缺点就是它不够精确。</p><p>这个问题的原因应该是数据的二次加工导致的，kitti先把数据存成bin文件，kitti2bag再转成bag文件，改变了原来的排列方式。一般雷达驱动中输出的数据都是按列排列的。</p><p>所以如果各位以后使用的数据是列排列的，那么时间计算上可以使用loam里的方法，会更准确。</p><h1 id="定位流程"><a href="#定位流程" class="headerlink" title="定位流程"></a>定位流程</h1><p>在地图匹配的过程中，鲁棒性和运行速度特别重要，因此实际中，基于NDT的匹配使用更为广泛。由于NDT匹配需要较准确的初始位姿，因此在定位之前需要初始化环节，给出载体的初始位姿。<br>按照难度由低到高，常见的初始化需求有这样几种：</p><p>1）已知位姿的初始化<br>2）位置已知而姿态未知的初始化<br>3）位置和姿态均未知的初始化</p><p><img src="/images/点云地图的建立/image-20220504092212456.png" alt="image-20220504092212456" style="zoom: 50%;" /></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;点云地图的建立&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="建图" scheme="https://lukeyalvin.top/tags/%E5%BB%BA%E5%9B%BE/"/>
    
    <category term="畸变补偿" scheme="https://lukeyalvin.top/tags/%E7%95%B8%E5%8F%98%E8%A1%A5%E5%81%BF/"/>
    
  </entry>
  
  <entry>
    <title>后端位姿图优化</title>
    <link href="https://lukeyalvin.top/posts/aed03174.html"/>
    <id>https://lukeyalvin.top/posts/aed03174.html</id>
    <published>2022-05-02T13:26:34.855Z</published>
    <updated>2022-05-03T10:35:42.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>BA 能精确地优化每个相机位姿与特征点位置。不过在更大的场景中，大量特征点的存在会严重降低计算效率，导致计算量越来越大以至于无法实时化。本讲介绍两种在更大场景下使用的后端优化方法：位姿图。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="后端优化的基本原理"><a href="#后端优化的基本原理" class="headerlink" title="后端优化的基本原理"></a>后端优化的基本原理</h1><ul><li><strong>后端优化的目的：</strong></li></ul><p>利用回环检测结果和惯导先验位姿修正里程计误差，而回环在此提供的是两帧之间的相对位姿。</p><ul><li><strong>后端优化的方法：</strong></li></ul><p>假设马尔可夫性，简单的一阶马氏性认为，$k $时刻状态只与$ k − 1 $时刻状态有关，而与再之前的无关。如果做出这样的假设，我们就会得到以扩展卡尔曼滤波（EKF）为代表的滤波器方法。在滤波方法中，我们会从某时刻的状态估计，推导到下一个时刻。</p><p>另外一种方法是依然考虑 $k$ 时刻状态与之前所有状态的关系，此时将得到非线性优化为主体的优化框架。在视觉SLAM中非线性优化如BA与图优化、位姿图优化等。</p><ul><li><strong>总结而言，后端优化的观测主要从这三个方面：</strong></li></ul><p>①连续两帧之间的相对位姿观测（里程计）</p><p>②闭环匹配得到的相对位姿观测（闭环检测）</p><p>③组合导航提供的先验位姿估计（IMU）</p><p>①②的观测构成了<strong>基于回环的位姿修正</strong>，①③的观测构成了<strong>基于先验观测的位姿修正，</strong>当然三者也可以结合使用。三者的关系是，②③在①的基础上对位姿进行修正，这里对里程计的平滑性有一定的要求。</p><h1 id="基于回环的位姿修正"><a href="#基于回环的位姿修正" class="headerlink" title="基于回环的位姿修正"></a>基于回环的位姿修正</h1><h2 id="回环检测"><a href="#回环检测" class="headerlink" title="回环检测"></a>回环检测</h2><p><img src="/images/后端位姿图优化/fc51f93b-322d-475b-bfa5-cae57a6750f9.jpeg" alt="回环检测是什么"></p><p>首先我们需要了解什么是回环检测，如是上图所示，对于里程计而言，它用来估计帧与帧之间的位姿估计，而这个位姿估计会因为噪声而产生漂移，（即使每一帧之间我们都进行了BA优化，但微小的漂移仍是无法避免的），由于里程计帧之间的位姿估计有很多，因此积少成多，漂移最终累积特别大，就会导致机器人在达到初始位置是，观测显示已经回到初始位置，而位姿估计却显示与初始位置相差一段距离，如上图所示。</p><p>我们通过构建位姿估计的位置和初始位置的残差项，对整个回环进行优化和修正，进而得到如下的地图。（理论而言，没有漂移的情况下，位姿估计的位置和初始位置是重合的。）</p><p><img src="/images/后端位姿图优化/32fa19ca-c057-4ccb-8075-802d0a456991.jpeg" alt="什么是回环检测"></p><p>因此，回环检测的目的就是消除累积误差。</p><h2 id="位姿图优化"><a href="#位姿图优化" class="headerlink" title="位姿图优化"></a>位姿图优化</h2><p>与之前的BA优化不同，比如我们之前学习的重投影模型，它考虑的是相邻帧之间的位姿估计，需要优化每个相机的位姿和特征点的位置，即使我们使用关键帧，对于大场景而言，特征点的观测是非常巨大的，这种计算量也是巨大的。</p><p>而位姿图优化，构建一个只有轨迹的图优化，而位姿节点之间的边，可以由两个关键帧之间通过特征匹配之后得到的运动估计来给定初始值。不同的是，一旦初始估计完成，我们就不再优化那些路标点的位置，而只关心所有的相机位姿之间的联系了。</p><p><img src="/images/后端位姿图优化/image-20220503095925699.png" alt="image-20220503095925699" style="zoom:50%;" /></p><h2 id="基于回环的位姿修正-1"><a href="#基于回环的位姿修正-1" class="headerlink" title="基于回环的位姿修正"></a>基于回环的位姿修正</h2><h3 id="构建残差"><a href="#构建残差" class="headerlink" title="构建残差"></a>构建残差</h3><p>在上文，我们找到如何构建残差项，下一步就是对残差项进行修正，那么我们就需要求得残差项对相应状态量的雅可比矩阵，从而才能知道从哪个方向修正状态量能够达到优化的目的。</p><p>位姿图优化关心的是两帧之间的观测，这两帧并不一定是相邻的两帧，比如回环检测中的两帧。设第$i$和第$j$帧之间的观测，在李群SE3上可以表示为：</p><script type="math/tex; mode=display">\Delta T_{ij}=T_i^{-1}T_j.\tag{1}</script><p>很容易理解，如果说第$i$和第$j$帧构成回环，那么$T_i^{-1}T_j=I$，也就不存在误差。</p><p>也可以用李代数表示：</p><script type="math/tex; mode=display">\Delta \xi_{ij}=\xi^{-1}_i◦\xi_j=\ln(T_i^{-1}T_j)^{\lor}.\tag{2}</script><p>构建残差：</p><script type="math/tex; mode=display">\begin{align*}e_{ij}&=\ln(\Delta T_{ij}^{-1}T_i^{-1}T_j)^{\lor}\\&=\ln(\exp((-\xi_{ij})^{\land})\exp((-\xi_i)^{\land})\exp(\xi^{\land}_j))^{\lor}\end{align*}.\tag{3}</script><p>位姿图优化的思想是通过调整状态量（即位姿），使残差项的值最小化，这就是需要用残差项求雅可比矩阵，才能使用梯度下降方法进行迭代优化。</p><h3 id="求雅可比矩阵"><a href="#求雅可比矩阵" class="headerlink" title="求雅可比矩阵"></a>求雅可比矩阵</h3><p>我们对位姿$T_i$和$T_j$分别左乘一个扰动$\Delta T=\exp(\delta\xi^{\land})$</p><script type="math/tex; mode=display">\begin{align*}\hat{e}_{ij}&=\ln \left(T_{ij}^{-1}T_i^{-1}\exp((-\delta\xi_i)^{\land})\exp(\delta\xi_j^{\land})T_j\right)^{\lor}\\&=\ln \left( T_{ij}^{-1}T_i^{-1}T_j\exp\left(  (-Ad(T_j^{-1})\delta\xi_i)^{\land}  \right)\exp\left(    (Ad(T_j^{-1})\delta\xi_j)^{\land} \right)\right)^{\lor}\\&\approx\ln \left( \exp(e_{ij})\exp\left((-Ad(T_j^{-1})\delta\xi_i)^{\land}+(Ad(T_j^{-1})\delta\xi_j)^{\land}\right)\right)^{\lor}\\&\approx e_{ij}-\mathcal{J}_r^{-1}(e_{ij})Ad(T_j^{-1})\delta\xi_i+\mathcal{J}_r^{-1}Ad(T_j^{-1})\delta\xi_j\end{align*}\tag{4}</script><hr><p>这里推导过程的第一步到第二步利用了李群的伴随性质：</p><ul><li><strong>SO(3)上的伴随性质</strong></li></ul><script type="math/tex; mode=display">R\exp(p^{\land})R^T=\exp((Rp)^{\land})\\</script><ul><li><strong>SE(3)上的伴随性质</strong></li></ul><script type="math/tex; mode=display">T\exp(\xi^{\land})T^{-1}=\exp((Ad(T)\xi)^{\land})\\</script><p>其中伴随矩阵的定义如下：</p><script type="math/tex; mode=display">Ad(T)=\begin{bmatrix}R&t^{\land}R\\ 0&R\end{bmatrix}</script><p>第二步第三步使用的是BCH公式：</p><ul><li><strong>SO(3)上的BCH公式</strong></li></ul><script type="math/tex; mode=display">\ln(\exp(\phi_1^{\land})\exp(\phi_2^{\land}))\approx\left\{\begin{aligned}J_l(\phi_2)^{-1}\phi_1+\phi_2\ ,\ 当\phi_1为小量 \\J_r(\phi_1)^{-1}\phi_2+\phi_1\ ,\ 当\phi_2为小量\end{aligned}\right.</script><p>其中左乘雅可比为：</p><script type="math/tex; mode=display">J_l=\frac{\sin\theta}{\theta}I+(1-\frac{\sin\theta}{\theta})aa^T+\frac{1-\cos\theta}{\theta}a^{\land}</script><p>所以：</p><script type="math/tex; mode=display">J_l^{-1}=\frac{\theta}{2}\cot\frac{\theta}{2}I+(1-\frac{\theta}{2}\cot\frac{\theta}{2})aa^T-\frac{\theta}{2}a^{\land}</script><p>右乘雅可比仅需要在左乘雅可比的基础上对自变量取负号，即：</p><script type="math/tex; mode=display">J_r(\phi)=J_l(-\phi)</script><ul><li><strong>SE(3)上的BCH公式</strong></li></ul><script type="math/tex; mode=display">\ln(\exp(\xi_1^{\land})\exp(\xi_2^{\land}))^{\lor}\approx\left\{\begin{aligned}J_l(\xi_2)^{-1}\xi_1+\xi_2\ ,\ 当\xi_1为小量 \\J_r(\xi_1)^{-1}\xi_2+\xi_1\ ,\ 当\xi_2为小量\end{aligned}\right.</script><p>其中右乘雅可比为：</p><script type="math/tex; mode=display">\mathcal{J}_r^{-1}(\xi)\approx I+\frac{1}{2}\begin{bmatrix}\phi^{\land}&\rho^{\land}\\0&\phi^{\land}\end{bmatrix}</script><p>一般情况下，若$\xi$非常小，该雅克比矩阵可以直接使用单位阵，此时：</p><script type="math/tex; mode=display">\ln(\exp(\xi_1^{\land})\exp(\xi_2^{\land}))^{\lor}\approx\ln(\exp(\xi_1^{\land}+\xi_2^{\land}))^{\lor}</script><p>这里第二步到第三步的推导用的就是这个式子。</p><hr><p>所以，残差关于$T_i$的雅可比为：</p><script type="math/tex; mode=display">A_{ij}=\frac{\partial e_{ij} }{\partial \delta \xi_i}=-\mathcal{J}_r^{-1}(e_{ij})Ad(T_j^{-1})\tag{5}</script><p>残差关于$T_j$的雅可比为：</p><script type="math/tex; mode=display">B_{ij}=\frac{\partial e_{ij} }{\partial \delta \xi_j}=\mathcal{J}_r^{-1}(e_{ij})Ad(T_j^{-1})\tag{6}</script><p>其中：</p><script type="math/tex; mode=display">\mathcal{J}_r^{-1}(\xi)\approx I+\frac{1}{2}\begin{bmatrix}\phi_e^{\land}&\rho_e^{\land}\\0&\phi_e^{\land}\end{bmatrix}\tag{7}</script><p>为了找到梯度方向，需要对残差进行一阶泰勒展开：</p><script type="math/tex; mode=display">\begin{align*}&e_{ij}(x_i+\Delta x_i,x_j+\Delta x_j)\\=&e_{ij}(x+\Delta x)\\\approx&e_{ij}+J_{ij}\Delta x\end{align*}\tag{8}</script><p>其中$J_{ij}$即为前面推导的残差关于位姿的雅可比组成的矩阵：</p><script type="math/tex; mode=display">J_{ij}=(0···0\ A_{ij}\ 0···0 \ B_{ij} \ 0···0)</script><p>至此，我们就把非线性优化变成了一个线性化问题。</p><h3 id="进行优化"><a href="#进行优化" class="headerlink" title="进行优化"></a>进行优化</h3><p>位姿图优化就是把所有的观测和状态放在一起优化，在实际使用中，各个残差会被分配一个权重，也就是信息矩阵，它相当于对残差进行加权，考虑信息矩阵后，总的残差可以表示为:</p><script type="math/tex; mode=display">F(x)=\sum_{i,j\in \mathcal{C} }F_{ij}=\sum_{i,j\in \mathcal{C}} e_{ij}^T\Omega_{ij}e_{ij}\tag{9}</script><blockquote><p>权重矩阵又称为信息矩阵，它是协方差矩阵的逆，即为：$\Omega_{ij}=\Sigma_{ij}^{-1}$，因为每个残差都看作高斯分布，而每个高斯分布都可以归一化为标准的高斯分布$N(0,1)$，这种归一化操作是减去均值求平方然后除以方差。残差预期均值为0，所以不用减只需要除以方差，扩展到多维的话就变成了信息矩阵加权形式。</p></blockquote><p>所以此时的优化问题就是：</p><script type="math/tex; mode=display">x^*=\arg\underset{x}{\min}\ F(x)\tag{10}</script><p>对于每一个残差块，都有：</p><script type="math/tex; mode=display">\begin{align*}&F_{ij}(x+\Delta x)\\&=e_{ij}(x+\Delta x)^T\Omega_{ij}e_{ij}(x+\Delta x)\\&\approx e_{ij}^T\Omega_{ij}e_{ij}+2e_{ij}^T\Omega_{ij}J_{ij}\Delta x+\Delta x^TJ_{ij}^T\Omega_{ij}J_{ij}\Delta x\\&=c_{ij}+2b^T_{ij}\Delta x+\Delta x^TH_{ij}\Delta x\end{align*}\tag{11}</script><p>其中：</p><script type="math/tex; mode=display">c_{ij}=e_{ij}^T\Omega_{ij}e_{ij}</script><script type="math/tex; mode=display">H^T_{ij}=J_{ij}^T\Omega_{ij}J_{ij}=\begin{bmatrix}··· & ··· & ··· & ··· \\··· &A^T_{ij}\Omega_{ij}A_{ij}&···&A^T_{ij}\Omega_{ij}B_{ij}\\··· & ··· & ··· & ··· \\··· &B^T_{ij}\Omega_{ij}A_{ij}&···&B^T_{ij}\Omega_{ij}B_{ij}\\··· & ··· & ··· & ··· \\\end{bmatrix}</script><script type="math/tex; mode=display">b_{ij}=e_{ij}^T\Omega_{ij}J_{ij}=\begin{bmatrix} ···\\A^T_{ij}\Omega_{ij}e_{ij}\\···\\B^T_{ij}\Omega_{ij}e_{ij}\\···\end{bmatrix}</script><p>所以，要使得误差最小，只需要使得：</p><script type="math/tex; mode=display">H\Delta x = -b\tag{11}</script><p>根据修正量，修正$x$的值，即完成依次迭代：</p><script type="math/tex; mode=display">x^*=x+\Delta x\tag{12}</script><p>多次迭代，直至残差满足收敛条件时，则终止循环，完成优化。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;BA 能精确地优化每个相机位姿与特征点位置。不过在更大的场景中，大量特征点的存在会严重降低计算效率，导致计算量越来越大以至于无法实时化。本讲介绍两种在更大场景下使用的后端优化方法：位姿图。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="SLAM十四讲" scheme="https://lukeyalvin.top/categories/SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/"/>
    
    
    <category term="后端优化" scheme="https://lukeyalvin.top/tags/%E5%90%8E%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
    <category term="位姿图优化" scheme="https://lukeyalvin.top/tags/%E4%BD%8D%E5%A7%BF%E5%9B%BE%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ScanContext解析与实践</title>
    <link href="https://lukeyalvin.top/posts/3df51dc4.html"/>
    <id>https://lukeyalvin.top/posts/3df51dc4.html</id>
    <published>2022-04-30T02:00:58.104Z</published>
    <updated>2022-05-02T11:19:41.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p><strong>Scan Context</strong> 由韩国KAIST大学的 Giseop Kim, Ayoung Kim 于2018年发表在<strong>IROS</strong>(International Conference on Intelligent Robots and Systems).Scan Context 应用于基于3D点云的重定位和场景识别，主要思想是将场景3维信息压缩，将笛卡尔坐标系的信息转换到极坐标系下计算。优势是高效利用场景点云分布特征，引入”旋转不变性”描述子，快速搜索。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p><img src="/images/ScanContext解析与实践/1-16512834289741.gif" alt="1"></p><p>对于SLAM来说，回环检测是重要的一步，我们知道，当机器人做一个回环时，可能会出现已经达到达起始点，但是由于漂移，位姿估计值却显示当前位置和初始位置还有相差一段距离，这时候，我们就依赖回环检测，把当前位置拉回初始位置，这样就消除了漂移，这个过程就是回环检测的目的。</p><p>所以回环检测的关键是，对于某一帧点云来说，它经过一个历史状态之后，我们如何去索引当前帧是否在历史帧中出现过，即检测有没有发生回环。当然，最容易想到的也是最朴素的做法就是，将这一帧的3D点云与历史所有帧做匹配，找到最接近的那一个。但是对于3D点云来这么做计算量无疑是巨大的，而且三维匹配还存在一个初值的问题。</p><p>因此，作者提出了ScanContext，上面的动画可以看出ScanContext的工作过程就是把3D点云通过俯视图的方式转换为2D，然后用过2D匹配找到回环，达到回环检测的目的，这样将三维降为两维进行匹配大大减小了计算量，并且它对初值相对不敏感。</p><p>ScanContext的主要流程如下：</p><p><img src="/images/ScanContext解析与实践/image-20220430131549451.png" alt="image-20220430131549451" style="zoom: 50%;" /></p><h1 id="点云切割"><a href="#点云切割" class="headerlink" title="点云切割"></a>点云切割</h1><p>首先是进行点云分割，如下图所示:</p><p>首先使用来自 3D 扫描的点云的俯视图，以扫描的中心充当全局关键点。对点云的俯视图进行圆环分割和扇区分割，可以看出以扫描中心为关键点，向外扩散形成$N_r$个同心圆，我们称之为$N_r$个环。然后以中心为关键点对圆环的$[0,2\pi]$进行均匀分割，得到$N_s$ 个扇区。论文中取 $N_s= 60$ 和 $N_r = 20$。</p><p><img src="/images/ScanContext解析与实践/image-20220430133756320.png" alt="image-20220430133756320" style="zoom: 33%;" /></p><p><img src="/images/ScanContext解析与实践/image-20220430132509355.png" alt="image-20220430132509355"></p><p>可以发现，沿着半径增大的方向（绿色箭头的方向），把点云分割成了$N_r$个圆环，每个圆环的宽度为：</p><script type="math/tex; mode=display">d_r=\frac{L_{max} }{N_r}\tag{1}</script><p>其中$L_{max}$表示激光雷达测得点云的最远距离。</p><p>通过图不难发现，我们一共得到$N_r$个环和$N_s$ 个扇区，每个环都与扇区有重叠区域，这个重叠区域称之为bin，而且远离传感器的 bin 的物理面积比近的 bin 更宽。设$\mathcal{P}_{ij}$是属于第$ i $个环和第 $j$ 个扇区重叠的 bin 的点集。设激光点经过分割后的集合为$\mathcal{P}$，则：</p><script type="math/tex; mode=display">\mathcal{P}=\underset{i\in[N_r],j\in[N_s]}{\cup}\mathcal{P}_{ij}\tag{2}</script><p>其中，符号 $[N_s] =\{1, 2, …, N_{s-1}, N_s\},[N_r] =\{1, 2, …, N_{r-1}, N_r\}$。</p><h1 id="生成ScanContext"><a href="#生成ScanContext" class="headerlink" title="生成ScanContext"></a>生成ScanContext</h1><p>经过分割后，我们发现分割后的点云的集合就是bin的集合，而bin是$N_r$个环和$N_s$ 个扇区的重叠区域，每个bin区域可能会有点云也可能没有点云（图（b）中的蓝色像素），而我们将bin的集合表示为矩阵形式，就可以得到一个$N_r\times N_s$的矩阵，其中矩阵的每一行代表一个圆环，则一共有$N_r$行，所以下图纵坐标范围为$[0,L_{max}]$；矩阵的每一列代表一个扇区，则一共有$N_s$列，所以下图横坐标范围为$[0,2\pi]$。</p><p><img src="/images/ScanContext解析与实践/image-20220430135402491.png" alt="image-20220430135402491" style="zoom: 67%;" /></p><p>那么bin的值如何确定呢？我们知道，没有点云的bin，我们对其赋值为0，图中用蓝色像素表示；那么有点云的bin如何表示呢？作者在这里使用的是<strong>最大高度</strong>。</p><p>设某个点云为$p$， $z(\cdot ) $是返回点 $p$ 的$ z $坐标值的函数，则任一个点云集合bin的值为：</p><script type="math/tex; mode=display">\phi(\mathcal{P}_{ij})=\underset{p\in\mathcal{P}_{ij}}{\max}z(p)\tag{3}</script><p>这么做有什么好处？我们知道，在开始我们把三维点云降为二维，损失了高度信息，而这里对高度信息相当于一次补偿作用，保留了信息的完整性。</p><h1 id="基于ScanContext的匹配"><a href="#基于ScanContext的匹配" class="headerlink" title="基于ScanContext的匹配"></a>基于ScanContext的匹配</h1><p>在得到ScanContext数据之后，我们如何利用ScanContext进行匹配，进而完成回环检测，这是ScanContext最终的目的。</p><p>设</p><ul><li><p>$I^q$为当前帧的ScanContext， $c^q_j $为$I^q$中的第$j$列；</p></li><li><p>$ I^c $为历史帧的ScanContext，$c^c_j $为$I^c$中的第$j$列；</p></li></ul><p>两帧之间的距离函数定义为：</p><script type="math/tex; mode=display">d(I^q,I^c)=\frac{1}{N_s}\sum^{N_s}_{j=1}(1-\frac{c^q_j\cdot c^c_j}{\parallel c^q_j \parallel \parallel c^c_j \parallel}).\tag{4}</script><p>通过这个距离函数可以发现，它反应了两帧之间的差异性，对于相似的两帧，它们的相同列向量的内积的模应该为1，即$\frac{c^q_j\cdot c^c_j}{\parallel c^q_j \parallel \parallel c^c_j \parallel}=1$，则距离接近为0，当然这仅仅是理想情况下，实际上，我们通过设置阈值的方式，当距离函数小于某一个阈值时，认为该历史帧为回环检测的回环帧。</p><p><strong>但是这里存在一个问题，就是历史帧有旋转的时候：</strong></p><p>这里我们定义的是当前帧与历史帧的相同列进行比较，这个条件是十分强的，假设激光雷达在经过一个地方的时候方向与之前的方向恰恰相反，或者该地方为一个十字路口，激光雷达从不同的方向经过一个地方，则雷达相对于全局坐标的坐标会发生变化，导致得到的ScanContext中的列向量顺序可能发生变化，进而使得两帧的距离函数比较大，导致经过相同地方的两帧点云的距离函数非常大，最终回环检测匹配失败。</p><p>如下图所示，这是经过相同地方的两帧点云，它们由于激光雷达的朝向发生了改变，导致两者的ScanContext中的列向量顺序发生变化，距离函数值随之变得非常大。</p><p><img src="/images/ScanContext解析与实践/image-20220430143355265.png" alt="image-20220430143355265" style="zoom:50%;" /></p><p>不难发现，将图(b)后半部分切割放到前面，如下图所示，就可以得到与(a)十分相似的ScanContext.</p><p><img src="/images/ScanContext解析与实践/image-20220430143946603.png" alt="image-20220430143946603" style="zoom:50%;" /></p><p>对于人而言，上述规律是非常容易发现的。但是实际程序中怎么切割，怎么移动才能达到上述效果？</p><p>最简单也是最朴素的做法就是，将历史帧$I^c$按列平移，得到$[N_s]$个ScanContext，依次与当前帧的ScanContext计算距离，选择距离最小的，即为闭环匹配的帧。</p><p>但是这种方法的计算量也是相对较大的，作者在代码中对此方法进行了优化，优化方法就是将当前帧与历史帧对应列分别求列和，然后根据列和我们找到可能的最佳切割点，但是由于我们降维之后会损失一部分信息，因此我们寻找的切割点并不是足够准确的，所以我们将在切割点附近对对应的二维$m$列依次进行切割平移，得到远远小于$n(n&lt;&lt;[N_s])$个的ScanContext，依次与当前帧的ScanContext计算距离，选择距离最小的，即为闭环匹配的帧。</p><p><img src="/images/ScanContext解析与实践/image-20220430153440012.png" alt="image-20220430153440012" style="zoom: 67%;" /></p><h1 id="计算相对位姿"><a href="#计算相对位姿" class="headerlink" title="计算相对位姿"></a>计算相对位姿</h1><p>设$I^c_n$ 是一个$\mathrm{Scan Context}$，它的第$n$列是从原始的$\mathrm{Scan Context}$偏移过来的。由于列向量代表的是分辨率为$\frac{2\pi}{N_s}$的扇区，所以每个列对应的角度为$\frac{2\pi}{N_s}$。整个过程，把历史帧切割，然后进行列平移之后，得到与当前帧的良好匹配， 良好的匹配意味着我们通过分割平移将历史帧对应的位姿旋转到当前帧对应位姿的朝向，那么，反过来，我们可以根据平移来求得旋转的角度。</p><p>假设距离最小时，对应的列的平移量为：</p><script type="math/tex; mode=display">n^*=\underset{n\in[N_s]}{\arg\min} \ d(I^q,I^c_n)\tag{5}</script><p>因此，历史帧与当前帧之间的旋转的角度为：</p><script type="math/tex; mode=display">\phi=\frac{2\pi}{N_s}\times n^*\tag{6}</script><p>这个旋转分辨率在作者代码中为$\frac{2\pi}{N_s}=\frac{2\pi}{60}=6°$，所以匹配的精确度小于$6°$，这并不是一个精确的值，需要进一步精确的话则需要使用ICP或者NDT匹配。因此可以作为ICP或者NDT匹配的初始位姿，用于<strong>精确匹配</strong>得到闭环约束相对位姿。</p><h1 id="解决时间复杂度问题"><a href="#解决时间复杂度问题" class="headerlink" title="解决时间复杂度问题"></a>解决时间复杂度问题</h1><p><strong>目的：</strong>ScanContext可以使用矩阵对应列的相似度来计算两帧的相似性，但是遍历所有历史帧的相似度计算量比较高，需要做一个快速初步筛选。</p><p><strong>思路：</strong>相似帧之间，落在同等半径的圆环中的点的数量应该相似，可以用来快速查找。</p><p>比如，某一帧中，在圆环$r_i,i\in[N_r]$中，被$[N_s]$个扇区分割为$[N_s]$个bin，对于相似的两帧，对应圆环中，含有点云的bin占有率应该相同，如公式$(8)$。通过这种方法可以进行<strong>第一阶段的粗略匹配</strong>。</p><p><strong>方法：</strong></p><p><img src="/images/ScanContext解析与实践/image-20220430164906076.png" alt="image-20220430164906076" style="zoom:50%;" /></p><p>这里作者引入了一个$ring\ key$的概念。</p><p><strong>（1）每一帧生成一个向量$k$</strong></p><p>$ring\ key$实质上就是$\mathrm{Scan Context}$的每一行$r$经过编码函数$\psi$编码成一个实数值后，$N_r$个圆环组成了一个$N_r$维向量的$ring\ key$，即为</p><script type="math/tex; mode=display">k=(\psi(r_1),...,\psi(r_{N_r})),\mathrm{where}\ \psi:r_i\rightarrow\mathbb{R}\tag{7}</script><p>其中，我们使用的环编码函数$\psi$是使用 $L_0$范数的环的占用率：</p><script type="math/tex; mode=display">\psi(r_i)=\frac{\parallel r_i \parallel_0}{N_s}\tag{8}</script><p>$\parallel r_i \parallel_0$表示半径$r_i$对应的圆环中非空分割单元的个数。</p><p><strong>（2）根据（1）中计算的向量，所有历史帧共同构建KDtree;</strong></p><p><strong>（3）使用当前帧对应的向量，在KDtree中查找，找到$n$个可能的相似帧，作为候选索引$\mathcal{C}$ 。</strong></p><p><strong>（4）使用$\mathrm{Scan Context}$进行第二阶段的精确匹配</strong></p><p>虽然不如$\mathrm{Scan Context}$信息丰富，但$ring\ key$支持快速搜索，以找到$n$个可能的候选闭环。使用距离公式将这些恒定数量的候选$\mathrm{Scan Context}$与要查询的$\mathrm{Scan Context}$进行比较。最接近的满足给定阈值$\tau$ 的候选项被选为重新访问的位置：</p><script type="math/tex; mode=display">c^*=\underset{c_k\in\mathcal{C} }{\arg\min}\ D(I^q,I^c),s.t. \ D<\tau\tag{9}</script><p>其中 $\mathcal{C}$ 是从 KD 树中提取的一组候选索引，$\tau$ 是给定的接受阈值。 $c^∗ $是确定为闭环的位置的索引。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;&lt;strong&gt;Scan Context&lt;/strong&gt; 由韩国KAIST大学的 Giseop Kim, Ayoung Kim 于2018年发表在&lt;strong&gt;IROS&lt;/strong&gt;(International Conference on Intelligent Robots and Systems).Scan Context 应用于基于3D点云的重定位和场景识别，主要思想是将场景3维信息压缩，将笛卡尔坐标系的信息转换到极坐标系下计算。优势是高效利用场景点云分布特征，引入”旋转不变性”描述子，快速搜索。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    
    <category term="ScanContext" scheme="https://lukeyalvin.top/tags/ScanContext/"/>
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
  </entry>
  
  <entry>
    <title>ScanContext论文翻译</title>
    <link href="https://lukeyalvin.top/posts/79ac789e.html"/>
    <id>https://lukeyalvin.top/posts/79ac789e.html</id>
    <published>2022-04-29T08:07:21.546Z</published>
    <updated>2022-05-02T01:35:44.943Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p><strong>Scan Context</strong> 由韩国KAIST大学的 Giseop Kim, Ayoung Kim 于2018年发表在<strong>IROS</strong>(International Conference on Intelligent Robots and Systems).Scan Context 应用于基于3D点云的重定位和场景识别，主要思想是将场景3维信息压缩，将笛卡尔坐标系的信息转换到极坐标系下计算。优势是高效利用场景点云分布特征，引入”旋转不变性”描述子，快速搜索。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="mathrm-Scan-Context-用于-3D-点云地图中地点识别的以自我为中心的空间描述子"><a href="#mathrm-Scan-Context-用于-3D-点云地图中地点识别的以自我为中心的空间描述子" class="headerlink" title="$\mathrm{Scan Context}$:用于 3D 点云地图中地点识别的以自我为中心的空间描述子"></a>$\mathrm{Scan Context}$:用于 3D 点云地图中地点识别的以自我为中心的空间描述子</h1><p><img src="/images/Scan-Context论文阅读/1-16512834289741.gif" alt="1"></p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>与用于视觉场景的各种特征检测器和描述子相比，使用结构信息描述地点的研究相对较少。同时定位和建图 (SLAM) 的最新进展提供了环境的密集 3D 地图，并且定位是由不同的传感器提出的。针对基于结构信息的全局定位，我们提出了 $\mathrm{Scan Context}$，这是一种来自 3D 光检测和测距（激光雷达） (Light Detection and Ranging ，LiDAR) 扫描的基于非直方图的全局描述子。与先前研究的方法不同，所提出的方法直接从传感器记录可见空间的 3D 结构，而不依赖于直方图或先前的训练。此外，该方法提出了使用相似度分数来计算两个$\mathrm{Scan Context}$之间的距离，以及一种两阶段搜索算法来有效地检测回环。$\mathrm{Scan Context}$及其搜索算法使回环检测不受激光雷达视点变化的影响，从而可以在重新访问同一个地点和拐角等地方检测到闭环。$\mathrm{Scan Context}$性能已经通过 3D激光雷达扫描的各种基准数据集进行了评估，并且所提出的方法显示出充分改进的性能。</p><h1 id="Ⅰ-引言"><a href="#Ⅰ-引言" class="headerlink" title="Ⅰ.引言"></a>Ⅰ.引言</h1><p>在许多机器人应用中，位置识别是重要的问题。特别是对于 SLAM，这种识别为闭环提供了候选项，这对于纠正漂移误差和构建全局一致的地图至关重要 [1]。虽然闭环对机器人导航至关重要，但错误的匹配可能是灾难性的，需要仔细匹配。视觉识别随着相机传感器的广泛使用而流行，然而，由于光照变化和短期（例如，移动的物体）或长期（例如，季节）的变化，它本质上是困难的。因此，最近的文献集中在通过检查表示 [2] 和弹性后端 [3] 的鲁棒位置识别。</p><p>与这些视觉传感器不同，激光雷达最近因其对感知方差的强不变性而受到关注。早期，传统的局部关键点描述子 [4, 5, 6, 7] 最初是为计算机视觉中的 3D 模型设计的，尽管它们容易受到噪声的影响，但已被用于位置识别。基于激光雷达的位置识别方法已在机器人文献中广泛提出 [8, 9, 10]。这些工作侧重于从结构信息（例如点云）中以局部 [8] 和全局方式 [10] 开发描述子。</p><p>现有的基于 LiDAR 的位置识别方法一直试图克服两个问题。首先，无论视点变化如何，都需要描述子来实现旋转不变性。其次，噪声处理是这些空间描述子的另一个主题，因为点云的分辨率随距离而变化，并且法线是有噪声的。现有方法主要使用直方图[9,11,12]来解决上述两个问题。然而，由于直方图方法只提供场景的随机索引，描述场景的详细结构并不简单。这种限制使得描述子对于地点识别问题的可识别性降低，从而导致潜在的误匹配。</p><p><img src="/images/Scan-Context论文阅读/image-20220429164041335-16512834289762.png" alt="image-20220429164041335" style="zoom:50%;" /></p><p><img src="/images/Scan-Context论文阅读/image-20220429164059389-16512834289774.png" alt="image-20220429164059389" style="zoom:50%;" /></p><blockquote><p>图 1. 两步$\mathrm{Scan Context}$创建。使用来自 3D 扫描的点云的俯视图 (a)，我们将地面区域划分为 bin，根据方位角（在 LiDAR 框架内从 0 到 2π）和径向（从中心到最大感应范围）进行划分方向。我们将黄色区域称为一个环，将青色区域称为一个扇区，将黑色填充区域称为一个 bin。$\mathrm{Scan Context}$是（b）中的矩阵，它明确地保留了点云的绝对几何结构。 (a) 中描述的环和扇区在 (b) 中分别由相同颜色的列和行表示。从位于每个 bin 中的点中提取的代表值用作 (b) 的对应像素值。在本文中，我们使用 bin 中点的最大高度。</p></blockquote><p>在本文中，我们提出了 $\mathrm{Scan Context}$，这是一种具有匹配算法的新型空间描述子，专门针对使用单个 3D 扫描的户外地点识别。我们的表示将 3D 扫描中的整个点云编码为矩阵（图 1）。所提出的表示描述了以自我为中心的 2.5D 信息。该方法的贡献点是：</p><ul><li><strong>高效的 bin 编码功能。</strong>与现有的点云描述子 [7, 10] 不同，所提出的方法不需要计算 bin 中的点数，而是提出了一种更有效的用于位置识别的 bin 编码函数。这种编码对点云的密度和法线具有不变性。</li><li><strong>保留点云的内部结构。</strong>如图 1 所示，矩阵的每个元素值仅由属于 bin 的点云确定。因此，与将点的相对几何描述为直方图并丢失点的绝对位置信息的[9]不同，我们的方法通过有意避免使用直方图来保留点云的绝对内部结构。这提高了判别能力，还可以在计算距离时将查询扫描与候选扫描（在我们的实验中，6°方位角分辨率）进行视点对齐。因此，也可以通过使用$\mathrm{Scan Context}$来检测反向闭环。</li><li><strong>有效的两相匹配算法。</strong>为了实现可行的搜索时间，我们为第一个最近邻搜索提供了一个旋转不变的子描述子，并将其与成对相似度评分分层结合，从而避免搜索所有数据库进行闭环检测。</li><li><strong>针对其他最先进的空间描述子进行彻底验证。</strong>与其他现有的全局点云描述子相比，例如 M2DP [8]、形状函数集合 (ESF) [11] 和 Z 投影 [12]，所提出的方法具有实质性的改进。</li></ul><h1 id="Ⅱ-相关工作"><a href="#Ⅱ-相关工作" class="headerlink" title="Ⅱ.相关工作"></a>Ⅱ.相关工作</h1><p>移动机器人的位置识别方法可以分为基于视觉和基于激光雷达的方法。视觉方法已普遍用于 SLAM 文献中的地点识别 [13, 14, 15]。 FAB-MAP [13] 通过学习视觉词袋的生成模型，使用概率方法提高了鲁棒性。然而，视觉表示具有局限性，例如易受光照条件变化的影响[16]。已经提出了几种方法来克服这些问题。 SeqSLAM [17] 提出了基于道路的方法，并显示出比 FAB-MAP 大大提高的性能。 SRAL [2] 融合了几种不同的表示，例如颜色、GIST [18] 和 HOG [19]，用于长期视觉位置识别。</p><p>LiDAR 对上述这些感知变化具有很强的鲁棒性。基于 LiDAR 的方法被进一步分类为局部和全局描述子。局部描述子，例如 PFH [4]、SHOT [5]、shape context[7]或 spin image [6]，首先找到一个关键点，将附近的点分成 bin，并将周围 bin 的模式编码为直方图。Steder 等人提出了以词袋的方式利用点特征和完形描述子（gestalt descriptor） [20] 的位置识别方法[8]。</p><p>然而，这些关键点描述子显示出局限性，因为它们最初是为 3D 模型部分匹配而不是为位置识别而设计的。例如，与 3D 模型不同，3D 扫描（例如，来自 VLP-16）中的点云密度会随着与传感器的距离而变化。此外，由于现实世界中的非结构化对象（例如树），点的法线比模型噪声更大。因此，局部方法通常需要关键点的法线，因此不太适合户外的地点识别。</p><p>全局描述子不包括关键点检测阶段。 GLARE [9] 及其变体 [21, 22] 将点之间的几何关系编码为直方图，以代替搜索关键点和提取描述子。 ESF [11] 使用了由形状函数制成的直方图的串联。 Muhammad 和 Lacroix 提出了 Z 投影 [12]，它是法向量的直方图，以及具有两个距离函数的双阈值方案。Heet 等人提出了 M2DP [10]，它将扫描的整个 3D 点云投影到多个 2D 平面并提取 192 维紧凑的全局表示。M2DP 表现出比现有点云描述子更高的性能以及对噪声和分辨率变化的鲁棒性。如本段所述，全局描述子通常使用直方图。最近，SegMatch [23] 引入了一种基于分段的匹配算法。这是一种高级感知，但需要一个训练步骤，并且需要在全局参考框架中表示点。</p><p>在本文中，我们提出了一种新的位置描述子，称为$\mathrm{Scan Context}$，它将 3D 扫描的点云编码为矩阵。$\mathrm{Scan Context}$可以被认为是Shape Context [7] 的扩展，用于定位 3D LiDAR 扫描数据的位置识别。具体来说，$\mathrm{Scan Context}$包含三个组成部分：在每个 bin 中保留点云的绝对位置信息的表示、高效的 bin 编码函数和两步搜索算法。</p><h1 id="Ⅲ-mathrm-Scan-Context-进行地点识别"><a href="#Ⅲ-mathrm-Scan-Context-进行地点识别" class="headerlink" title="Ⅲ.$\mathrm{Scan Context}$进行地点识别"></a>Ⅲ.$\mathrm{Scan Context}$进行地点识别</h1><p>在本节中，我们描述了给定来自 3D 扫描的点云的$\mathrm{Scan Context}$创建，并提出了一种计算两个$\mathrm{Scan Context}$之间距离的度量。接下来，介绍两步搜索过程。使用$\mathrm{Scan Context}$进行位置识别的整体流程如图 2 所示。$\mathrm{Scan Context}$的创建和验证也可以在 scancontext.mp4 中找到。</p><h2 id="A-mathrm-Scan-Context"><a href="#A-mathrm-Scan-Context" class="headerlink" title="A.$\mathrm{Scan Context}$"></a>A.$\mathrm{Scan Context}$</h2><p>我们为户外地点识别定义了一个名为 $\mathrm{Scan Context}$ 的地点描述子。</p><p><img src="/images/Scan-Context论文阅读/image-20220429192701251-16512834289773.png" alt="image-20220429192701251" style="zoom: 50%;" /></p><blockquote><p>图 2. 算法概述。首先，将单个 3D 扫描中的点云编码到$\mathrm{Scan Context}$中。然后，从$\mathrm{Scan Context}$中对 $N_t$（环数）维向量进行编码，并用于检索最近的候选项以及 KD 树的构造。最后，将检索到的候选与查询$\mathrm{Scan Context}$进行比较。满足接受阈值并最接近查询的候选被认为是闭环。</p></blockquote><p>$\mathrm{Scan Context}$的关键思想受到 Belongie 等人提出的 Shape Context [7] 的启发，它将局部关键点周围的点云的几何形状编码为图像。然而他们的方法只是简单地计算点的数量来总结点的分布，我们的方法与他们的不同之处在于我们使用每个 bin 中点云的高度。使用高度的原因是为了有效地总结周围结构的垂直形状，而不需要大量的计算来分析点云的特征。此外，最大高度表示从传感器可以看到周围结构的哪一部分。这种以自我为中心的可视化在城市设计文献中一直是一个众所周知的概念，用于分析一个地方的身份[24, 25]。</p><p>与Shape Context [7] 类似，我们首先将 3D 扫描划分为传感器坐标中的方位角和径向 bin，但采用等间距的方式，如图 1(a) 所示。扫描的中心充当全局关键点，因此我们将$\mathrm{Scan Context}$称为以自我为中心的位置描述子。$N_s$ 和 $N_r$ 分别是扇区和环的数量。也就是说，如果我们将 LiDAR 传感器的最大感应范围设置为 $L_{max}$，则环之间的径向间隙为 $\frac{L_{max} }{N_r}$，扇形的中心角等于$\frac{2\pi}{N_s}$。在本文中，我们使用 $N_s= 60$ 和 $N_r = 20$。</p><p>因此，制作$\mathrm{Scan Context}$的第一个过程是将 3D 扫描的整个点划分为相互排斥的点云，如图 1(a) 所示。$\mathcal{P}_{ij}$是属于第$ i $个环和第 $j$ 个扇区重叠的 bin 的点集。符号 $[N_s]$ 等于$ \{1, 2, …, N_{s-1}, N_s\}$。因此，分区在数学上是</p><script type="math/tex; mode=display">\mathcal{P}=\underset{i\in[N_r],j\in[N_s]}{\cup}\mathcal{P}_{ij}\tag{1}</script><p>因为点云是按固定间隔划分的，所以远离传感器的 bin 的物理面积比近的 bin 更宽。但是，两者都被同等地编码到$\mathrm{Scan Context}$的单个像素中。因此，$\mathrm{Scan Context}$补偿了由于远点稀疏导致的信息量不足，并将附近的动态对象视为稀疏噪声。</p><p>在点云分区之后，使用该 bin 中的点云为每个 bin 分配一个实数值：</p><script type="math/tex; mode=display">\phi:\mathcal{P}_{ij}\rightarrow\mathbb{R}\tag{2}</script><p>我们使用最大高度，其灵感来自城市能见度分析 [24, 25]。因此，bin 编码函数为:</p><script type="math/tex; mode=display">\phi(\mathcal{P}_{ij})=\underset{p\in\mathcal{P}_{ij}}{\max}z(p)\tag{3}</script><p>其中 $z(\cdot ) $是返回点 $p$ 的$ z $坐标值的函数。我们为空的bin分配零。例如，如图 1(b) 所示，$\mathrm{Scan Context}$中的蓝色像素意味着与其 bin 对应的空间是空闲的，或者由于遮挡而未观察到。</p><p>通过上述过程，最终将$\mathrm{Scan Context}$ $I$ 表示为$ N_r\times N_s$ 矩阵:</p><script type="math/tex; mode=display">I=(a_{ij})\in\mathbb{R}^{N_r\times N_s},a_{ij}=\phi(\mathcal{P}_{ij})\tag{4}</script><p>为了对变换进行鲁棒的识别，我们通过$\mathit{ root\ shifting}$ 来增强 $\mathrm{Scan Context}$。通过这样做，在轻微运动扰动下从原始扫描中获取各种$\mathrm{Scan Context}$变得可行。</p><p>在重新访问到过的地方时，单个$\mathrm{Scan Context}$可能对平移运动下的扫描中心位置敏感。例如，当重新访问不同通道中的相同位置时，可能不会保留$\mathrm{Scan Context}$的行顺序。为了克服这种情况，我们根据水平间隔将原始点云转换为 $N_{trans}$ 个邻居（本文中使用$N_{trans}=8$  ），并将从这些$\mathit{ root\ shifting}$ 点云获得的$\mathrm{Scan Context}$存储在一起。我们假设即使在实际移动的位置也能获得类似的点云，这是有效的，除了少数情况下，比如一个新空间突然出现的交叉点。</p><h2 id="B-mathrm-Scan-Context-之间的相似度得分"><a href="#B-mathrm-Scan-Context-之间的相似度得分" class="headerlink" title="B. $\mathrm{Scan Context}$之间的相似度得分"></a>B. $\mathrm{Scan Context}$之间的相似度得分</h2><p>给定一个$\mathrm{Scan Context}$对，我们需要一个距离度量来衡量两个地方的相似性。$I^q$ 和$ I^c $分别是从查询点云和候选点云获取的$\mathrm{Scan Context}$。它们以列方式进行比较。也就是说，距离是同一索引处的列之间的距离之和。余弦距离用于计算相同索引处的两个列向量 $c^q_j $和 $c^c_j $之间的距离。此外，我们将总和除以总列数$N_s$用于归一化。因此，距离函数为:</p><script type="math/tex; mode=display">d(I^q,I^c)=\frac{1}{N_s}\sum^{N_s}_{j=1}(1-\frac{c^q_j\cdot c^c_j}{\parallel c^q_j \parallel \parallel c^c_j \parallel}).\tag{5}</script><p>考虑到贯穿扇区的一致性，基于列的比较对动态物体特别有效。然而，候选$\mathrm{Scan Context}$的列甚至可以在相同的地方移动，因为激光雷达的视角对于不同的地方是不同的(例如，在相反的方向或角落重新访问一个地方)。图3说明了这种情况。由于$\mathrm{Scan Context}$是依赖于传感器位置的表示，因此行顺序始终是一致的。但是，如果 LiDAR 传感器相对于全局坐标的坐标发生变化，则列顺序可能会有所不同。</p><p><img src="/images/Scan-Context论文阅读/image-20220429201446582-16512834290096.png" alt="image-20220429201446582" style="zoom:50%;" /></p><blockquote><p>图 3. 具有时间间隔的同一地点的$\mathrm{Scan Context}$示例。重新访问时传感器视点的变化导致$\mathrm{Scan Context}$的列移位，如 (a) 所示。但是，这两个矩阵包含相似的形状并显示相同的行顺序。</p></blockquote><p>为了解决这个问题，我们使用所有可能的列移位后的$\mathrm{Scan Context}$来计算距离，并找到最小距离。$I^c_n$ 是一个$\mathrm{Scan Context}$，它的第$n$列是从原始的$\mathrm{Scan Context}$偏移过来的。这与以$\frac{2\pi}{N_s}$分辨率粗略对齐两个点云以获取旋转分量中的偏航角的任务相同。然后，我们确定最佳对齐的列移位数量$(7)$和对应的距离$(6)$:</p><script type="math/tex; mode=display">\begin{align*}D(I^q,I^c)&=\underset{n\in[N_s]}{\min}d(I^q,I^c_n),\tag{6}\\n^*&=\underset{n\in[N_s]}{\arg\min}\ d(I^q,I^c_n),\tag{7}\end{align*}</script><p>请注意，此附加移位信息可以作为进一步定位细化的良好初始值，例如迭代最近点 (ICP)，如第 IV-C 节所示。</p><h2 id="C-两阶段搜索算法"><a href="#C-两阶段搜索算法" class="headerlink" title="C. 两阶段搜索算法"></a>C. 两阶段搜索算法</h2><p>当在位置识别的ScanContext搜索时，有三个主要的典型工作流：成对相似性评分、最近邻搜索和稀疏优化[26]。我们的搜索算法将成对评分和最近邻搜索分层融合，以获得可接受的搜索时间。</p><p>由于我们在(6)中的距离计算比其他全局描述子如[12，10]更加耗时，我们通过引入ring key提供了一个两阶段分层搜索算法。Ring key是一个具有旋转不变性的描述子，它是从$\mathrm{Scan Context}$中提取的。$\mathrm{Scan Context}$的每一行，$r$，都通过环形编码函数$\psi$编码成一个实数值。矢量<strong>$k$</strong>的第一个元素来自距离传感器最近的环，随后的元素来自下一个环，如图4所示。因此，ring key成为一个 $N_r$ 维向量，如 (8)：</p><script type="math/tex; mode=display">k=(\psi(r_1),...,\psi(r_{N_r})),\mathrm{where}\ \psi:r_i\rightarrow\mathbb{R}\tag{8}</script><p>我们使用的环编码函数$\psi$是使用 $L_0$范数的环的占用率：</p><script type="math/tex; mode=display">\psi(r_i)=\frac{\parallel r_i \parallel_0}{N_s}\tag{9}</script><p>由于占用率与视点无关，因此ring key实现了旋转不变性。</p><p><img src="/images/Scan-Context论文阅读/image-20220429203142763-16512834290095.png" alt="image-20220429203142763" style="zoom:50%;" /></p><blockquote><p>图 4. 快速搜索的ring key生成。</p></blockquote><p>虽然不如$\mathrm{Scan Context}$信息丰富，但ring key支持快速搜索，以找到可能的候选闭环。向量$k$用作构建KD树的key。同时，要查询扫描的ring key用于查找相似的key及其对应的扫描索引。将被检索的相似key的数量由用户决定。使用距离(6)将这些恒定数量的候选$\mathrm{Scan Context}$与要查询的$\mathrm{Scan Context}$进行比较。最接近的满足给定阈值的候选项被选为重新访问的位置:</p><script type="math/tex; mode=display">c^*=\underset{c_k\in\mathcal{C} }{\arg\min}\ D(I^q,I^c),s.t. \ D<\tau\tag{10}</script><p>其中 $\mathcal{C}$ 是从 KD 树中提取的一组候选索引，$\tau$ 是给定的接受阈值。 $c^∗ $是确定为闭环的位置的索引。</p><h1 id="Ⅳ-实验评估"><a href="#Ⅳ-实验评估" class="headerlink" title="Ⅳ.实验评估"></a>Ⅳ.实验评估</h1><p>略…….</p><h1 id="Ⅴ-结论"><a href="#Ⅴ-结论" class="headerlink" title="Ⅴ.结论"></a>Ⅴ.结论</h1><p>在这篇文章中，我们提出了一个空间描述子——$\mathrm{Scan Context}$，将一个地方概括为一个矩阵，这个矩阵明确描述了以自我为中心的环境的2.5D结构信息。与使用点云的现有全局描述子相比，$\mathrm{Scan Context}$在各种数据集上显示出更高的闭环检测性能。</p><p>在未来的工作中，我们计划通过引入额外的层来扩展$\mathrm{Scan Context}$。也就是说，其他bin编码函数(例如，bin的语义信息)可被用于提高性能，即使对于具有高度重复结构的数据集，如复杂城市激光雷达数据集。</p><p>Lidar定位：Scan Context<a href="https://zhuanlan.zhihu.com/p/359523177">https://zhuanlan.zhihu.com/p/359523177</a></p><p>Scan Context 介绍及理解<a href="https://zhuanlan.zhihu.com/p/393353116">https://zhuanlan.zhihu.com/p/393353116</a></p><p>从零开始做自动驾驶定位(二): 数据集<a href="https://zhuanlan.zhihu.com/p/104875159">https://zhuanlan.zhihu.com/p/104875159</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;&lt;strong&gt;Scan Context&lt;/strong&gt; 由韩国KAIST大学的 Giseop Kim, Ayoung Kim 于2018年发表在&lt;strong&gt;IROS&lt;/strong&gt;(International Conference on Intelligent Robots and Systems).Scan Context 应用于基于3D点云的重定位和场景识别，主要思想是将场景3维信息压缩，将笛卡尔坐标系的信息转换到极坐标系下计算。优势是高效利用场景点云分布特征，引入”旋转不变性”描述子，快速搜索。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="ScanContext" scheme="https://lukeyalvin.top/tags/ScanContext/"/>
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/tags/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>前端里程计方案-基于直接匹配的ICP&amp;NDT</title>
    <link href="https://lukeyalvin.top/posts/eb43aafd.html"/>
    <id>https://lukeyalvin.top/posts/eb43aafd.html</id>
    <published>2022-04-28T07:05:08.168Z</published>
    <updated>2022-05-02T13:33:15.163Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本文主要介绍两种基于直接匹配的前端里程计方案，ICP以及NDT，重点介绍公式推导以及代码实现。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a><a href="https://lukeyalvin.top/posts/12311.html">ICP</a></h1><p>ICP即迭代最近点$（Iterative\ Closest\  Point）$的实现以及公式推导在视觉SLAM中已经提及，并进行了相关的公式推导和代码实现，详细查看：<a href="https://lukeyalvin.top/posts/12311.html">求解ICP</a>，这里不做具体展示。</p><p><img src="/images/前端里程计方案-基于直接匹配/image-20220428161431509.png" alt="image-20220428161431509" style="zoom: 67%;" /></p><h1 id="经典NDT"><a href="#经典NDT" class="headerlink" title="经典NDT"></a>经典NDT</h1><p>由于ICP迭代法一般般需要提供一个较好的初值，也就是需要粗配准，最终可能导致迭代结果可能会陷入局部最优，导致配准失败，往往达不到我们想要的效果。目前，实际工程之中，大多数使用另一种比较好的配准算法，NDT配准。</p><p>所谓NDT就是正态分布变换，作用与ICP一样用来估计两个点云之间的刚体变换。NDT算法主要的思路就是<strong>将目标点云刻画成多个概率分布</strong>，然后通过位姿变换关系将待配准点云转换到目标点云坐标系下，计算转换后待配准点云的总概率，并将此概率的负值作为目标函数，通过高斯牛顿迭代法优化该目标函数以求获得负的最小概率值(即最大概率值)．</p><p>由于其在配准过程中<strong>不利用对应点的特征计算和匹配</strong>，所以时间比其他方法快。这个配准算法耗时稳定，跟初值相关不大，初值误差大时，也能很好的纠正过来。因此，NDT算法因其具有较强的鲁棒性而被广泛的应用。</p><p><img src="/images/前端里程计方案-基于直接匹配/image-20220428161900963.png" alt="image-20220428161900963" style="zoom: 50%;" /></p><center>NDT算法流程</center><p>对点云进行相应的预处理之后，我们将空间划分为栅格（2D图像中的正方形或3D中的立方体），并统计落在栅格中的点，如图所示</p><p><img src="/images/前端里程计方案-基于直接匹配/image-20220428170225779.png" alt="image-20220428170225779" style="zoom:50%;" /></p><p>同样的，我们设上一帧点集和当前点集分别为：</p><script type="math/tex; mode=display">X=\{x_1,x_2,...,x_{N_x}\} \\Y=\{y_1,y_2,...,y_{N_y}\}</script><p>求$X$的均值：</p><script type="math/tex; mode=display">\mu=\frac{1}{N_x}\sum^{N_x}_{i=1}x_i</script><p>求$X$的协方差：</p><script type="math/tex; mode=display">\Sigma=\frac{1}{N_x-1}\sum^{N_x}_{i=1}(x_i-\mu)(x_i-\mu)^T</script><p>根据预测的位姿$R,t$，对点进行旋转和平移，得到上一帧的点云投影到当前帧下的点云$y_i^{\prime}$：</p><script type="math/tex; mode=display">y_i^{\prime}=T(p,y_i)=Ry_i+t</script><blockquote><p> 其中对于2D模型的点：$p=[t_x\ t_y\ \phi_z]^T$，对于3D模型的点：$p=[t_x\ t_y\ t_z\ \phi_x\ \phi_y\ \phi_z]^T$</p></blockquote><p>将当前点集$X$的均值$\mu$和协方差$\sum$，与投影点集$y_i^\prime$的每一个点做联系，构建如下的概率分布：</p><script type="math/tex; mode=display">f(X,y_i^\prime)=\frac{1}{\sqrt{2\pi}\sqrt{|\Sigma|} }\exp(-\frac{(y_i^\prime-\mu)^T\Sigma^{-1}(y_i^\prime-\mu)}{2})\tag{1}</script><p>然后求所有点的<strong>联合概率分布：</strong></p><script type="math/tex; mode=display">\begin{align*}\Psi&=\prod_{i=1}^{N_y}f(X,y_i^\prime)\\&=\prod_{i=1}^{N_y}\frac{1}{\sqrt{2\pi}\sqrt{|\Sigma|} }\exp(-\frac{(y_i^\prime-\mu)^T\Sigma^{-1}(y_i^\prime-\mu)}{2})\end{align*}\tag{2}</script><p>取对数，简化问题：</p><script type="math/tex; mode=display">\ln\Psi=\sum^{N_y}_{i=1}(-\frac{(y_i^\prime-\mu)^T\Sigma^{-1}(y_i^\prime-\mu)}{2}+\ln(\frac{1}{\sqrt{2\pi}\sqrt{|\Sigma|} }))\tag{3}</script><p>去除常数项：</p><script type="math/tex; mode=display">\max\Psi=\max\ln\Psi=\min\Psi_1=\min\sum^{N_y}_{i=1}(y_i^\prime-\mu)^T{\Sigma}^{-1}(y_i^\prime-\mu)\tag{4}</script><p>所以我们的目标函数就变成了：$\min\sum^{N_y}_{i=1}(y_i^\prime-\mu)^T{\Sigma}^{-1}(y_i^\prime-\mu)$，而接下来的任务就是根据这个目标函数求得对应的参数$R,t$。</p><p>令：</p><script type="math/tex; mode=display">\begin{align*}e_i(p)&=y_i^\prime-\mu\\F_i(p)&=\sum^{N_y}_{i=1}(y_i^\prime-\mu)^T{\Sigma}^{-1}(y_i^\prime-\mu)\\&=e_i(p)^T\Sigma^{-1}e_i(p)\end{align*}\tag{5}</script><p>因此目标函数为：</p><script type="math/tex; mode=display">\begin{align*}&\min\sum^{N_y}_{i=1}(y_i^\prime-\mu)^T{\Sigma}^{-1}(y_i^\prime-\mu)\\&=\min\sum^{N_y}_{i=1}F_i(p)\end{align*}\tag{6}</script><p>迭代优化，即找到$\Delta p$使得下式中的值达到最小：</p><script type="math/tex; mode=display">\min\sum^{N_y}_{i=1}F_i(p+\Delta p)=\sum^{N_y}_{i=1}e_i(p+\Delta p)^T\Sigma^{-1}e_i(p+\Delta p)\tag{7}</script><p>其中对$e_i(p+\Delta p)$进行一阶泰勒展开：</p><script type="math/tex; mode=display">\begin{align*}e_i(p+\Delta p)&\approx e_i(p)+\frac{de_i}{dp}\Delta p\\&=e_i(p)+J_i\Delta p\end{align*}\tag{8}</script><p>故而：</p><script type="math/tex; mode=display">\begin{align*}F_i(p+\Delta p)&=e_i(p+\Delta p)^T\Sigma^{-1}e_i(p+\Delta p)\\&\approx (e_i(p)+J_i\Delta p)^T\Sigma^{-1}(e_i(p)+J_i\Delta p)\\&=e_i(p)^T\Sigma^{-1}e_i(p)+2e_i(p)^T\Sigma^{-1}J_i\Delta p+\Delta p^TJ_i^T\Sigma^{-1}J_i\Delta p\\&=F_i(p)+2b_i^T\Delta p+\Delta p^TH_i\Delta p\end{align*}\tag{9}</script><p>其中：</p><script type="math/tex; mode=display">b_i^T=e_i(p)^T\Sigma^{-1}J_i，\ H_i=J_i^T\Sigma^{-1}J_i\tag{10}</script><p>因此，目标函数随自变量的变化为：</p><script type="math/tex; mode=display">\begin{align*}\Delta F_i(p)&=F_i(p+\Delta p)-F_i(p)\\&=2b_i^T\Delta p+\Delta p^TH_i\Delta p\end{align*}\tag{11}</script><p>上述优化问题转换为：找到$\Delta p$使得$\Delta F_i(p)$取得极小值，令其导数为零：</p><script type="math/tex; mode=display">\begin{align*}\frac{d\Delta F_i(p)}{d\Delta p}&=2b_i+2H_i\Delta p=0\\即：H_i\Delta p&=-b_i\end{align*}\tag{12}</script><p>根据$(10)$中的定义，只需要求$J_i$，即可求得$\Delta p $</p><script type="math/tex; mode=display">J_i=\frac{de_i}{dp}</script><h2 id="2D场景"><a href="#2D场景" class="headerlink" title="2D场景"></a>2D场景</h2><p>已知对于2D场景$p=[t_x\ t_y\ \phi_z]^T$，</p><script type="math/tex; mode=display">\begin{align*}y_i^{\prime}&=T(p,y_i)\\&=Ry_i+t\\&=\begin{bmatrix}\cos\phi_z&-\sin\phi_z\\\sin\phi_z&\cos\phi_z\end{bmatrix}y_i+\begin{bmatrix}t_x\\t_y\end{bmatrix}\\e_i&=y_i^{\prime}-\mu\end{align*}</script><p>雅可比矩阵：</p><script type="math/tex; mode=display">J_i=\begin{bmatrix}1&0&-y_{i1}\sin\phi_z-y_{i2}\cos\phi_z\\0&1&y_{i1}\cos\phi_z-y_{i2}\sin\phi_z\end{bmatrix}</script><h2 id="3D场景"><a href="#3D场景" class="headerlink" title="3D场景"></a>3D场景</h2><p>已知对于3D场景$p=[t_x\ t_y\ t_z\ \phi_x\ \phi_y\ \phi_z]^T$，</p><script type="math/tex; mode=display">\begin{align*}y_i^{\prime}&=T(p,y_i)\\&=Ry_i+t\\&=R_xR_yR_zy_i+t\\&=\begin{bmatrix}c_yc_z&-c_ys_z&s_y\\c_xs_z+s_xs_yc_z&c_xc_z-s_xs_ys_z&-s_xc_y\\s_xs_z-c_xs_yc_z&c_xs_ys_z+s_xc_z&c_xc_y\end{bmatrix}y_i+\begin{bmatrix}t_x\\t_y\\t_z\end{bmatrix}\\e_i&=y_i^{\prime}-\mu\end{align*}</script><p>雅可比矩阵：</p><script type="math/tex; mode=display">J_i=\begin{bmatrix}1&0&0&0&c&f\\0&1&0&a&d&g\\0&0&1&b&e&h\end{bmatrix}</script><p>其中：</p><script type="math/tex; mode=display">\begin{align*}a&=y_{i1}(-s_xs_z+c_xs_yc_z)+y_{i2}(-s_xc_z-c_xs_ys_z)+y_{i3}(-c_xc_y)\\b&=y_{i1}(c_xs_z+s_xs_yc_z)+y_{i2}(c_xc_z-s_xs_ys_z)+y_{i3}(-s_xc_y)\\c&=y_{i1}(-s_yc_z)+y_{i2}(s_ys_z)+y_{i3}(c_y)\\d&=y_{i1}(s_xc_yc_z)+y_{i2}(-s_xc_ys_z)+y_{i3}(s_xs_y)\\e&=y_{i1}(-c_xc_yc_z)+y_{i2}(c_xc_ys_z)+y_{i3}(-c_xs_y)\\f&=y_{i1}(-c_ys_z)+y_{i2}(-c_yc_z)\\g&=y_{i1}(c_xc_z-s_xs_ys_z)+y_{i2}(-c_xs_z-s_xs_yc_z)\\h&=y_{i1}(s_xc_z+c_xs_ys_z)+y_{i2}(c_xs_yc_z-s_xs_z)\end{align*}</script><h1 id="其他NDT"><a href="#其他NDT" class="headerlink" title="其他NDT"></a>其他NDT</h1><p><img src="/images/前端里程计方案-基于直接匹配/image-20220428210054855.png" alt="image-20220428210054855" style="zoom: 67%;" /></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本文主要介绍两种基于直接匹配的前端里程计方案，ICP以及NDT，重点介绍公式推导以及代码实现。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="ICP" scheme="https://lukeyalvin.top/tags/ICP/"/>
    
    <category term="NDT" scheme="https://lukeyalvin.top/tags/NDT/"/>
    
  </entry>
  
  <entry>
    <title>LeGO-LOAM论文翻译</title>
    <link href="https://lukeyalvin.top/posts/3766cfd.html"/>
    <id>https://lukeyalvin.top/posts/3766cfd.html</id>
    <published>2022-04-27T08:16:25.410Z</published>
    <updated>2022-04-30T02:19:08.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>LeGO-LOAM是Tixiao Shan 和 Brendan Englot于2018年提出的使用激光雷达完成定位与三维建图的算法，全称为：Lightweight and Groud-Optimized Lidar Odometry and Mapping on Variable Terrain，从标题可以看出 LeGO-LOAM 为应对<strong>可变地面</strong>进行了地面优化，同时保证了轻量级。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="LeGO-LOAM——在可变地形上的轻量级的地面点优化的雷达里程计和建图模块"><a href="#LeGO-LOAM——在可变地形上的轻量级的地面点优化的雷达里程计和建图模块" class="headerlink" title="LeGO-LOAM——在可变地形上的轻量级的地面点优化的雷达里程计和建图模块"></a>LeGO-LOAM——在可变地形上的轻量级的地面点优化的雷达里程计和建图模块</h1><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>我们提出了一种轻量级和基于地面优化的激光雷达里程计和建图方法 LeGO-LOAM，用于地面车辆的实时六自由度姿态估计。LeGO-LOAM 是轻量级的，因为它可以在低功耗嵌入式系统上实现实时姿态估计。LeGOLOAM 是基于地面优化的，因为它在其分割和优化步骤中利用了地平面的存在。我们首先应用点云分割来滤除噪声，并进行特征提取以获得独特的平面和边缘特征。然后，使用两步 Levenberg-Marquardt 优化方法，使用平面和边缘特征来解决连续扫描中六自由度变换的不同分量。我们使用地面车辆的可变地形环境中收集的数据集，将 LeGO-LOAM 的性能与最先进的方法 LOAM 进行比较，并表明 LeGO-LOAM 在降低计算成本的情况下实现了相似或更好的精度。我们还将 LeGO-LOAM 集成到 SLAM 框架中，以消除漂移引起的位姿估计误差，并使用 KITTI 数据集进行了测试。</p><h1 id="Ⅰ-介绍"><a href="#Ⅰ-介绍" class="headerlink" title="Ⅰ.介绍"></a>Ⅰ.介绍</h1><p>在智能机器人的能力中，地图构建和状态估计是最基本的先决条件。人们一直致力于通过基于视觉和基于激光雷达的方法实现实时 6 自由度同时定位和建图 (SLAM)。尽管基于视觉的方法在闭环检测方面具有优势，但由于它们对照明和视点变化的敏感性，如果用作唯一的导航传感器，可能会使这些能力不可靠。另一方面，基于激光雷达的方法即使在夜间也能发挥作用，而且许多 3D 激光雷达的高分辨率允许在大光圈下远距离捕捉环境的精细细节。因此，本文重点介绍使用 3D 激光雷达来支持实时状态估计和建图。</p><p>寻找两次激光雷达扫描之间转换的典型方法是迭代最近点 (ICP) [1]。通过逐点查找对应关系，ICP 迭代对齐两组点，直到满足停止条件为止。但是当扫描包括大量点时，ICP 可能会遭受过高的计算成本。已经提出了许多 ICP 变体来提高其效率和准确性 [2]。 [3] 引入了一种点到平面 ICP 变体，将点与局部平面补丁匹配。Generalized-ICP [4] 提出了一种匹配来自两次扫描的局部平面补丁的方法。此外，一些 ICP 变体利用并行计算来提高效率 [5]-[8]。</p><p>基于特征的匹配方法越来越受到关注，因为它们通过提取环境中的代表性特征来减少计算资源。这些特征应该适用于有效匹配和视角不变。这些特征应适用于有效匹配和视点不变性。社区已经提出了许多检测器，例如点特征直方图（PFH）[9] 和视点特征直方图（VFH）[10]，用于使用简单有效的技术从点云中提取此类特征。[11] 中介绍了一种使用 Kanade-Tomasi 角点检测器从点云中提取通用特征的方法。[12] 中讨论了从密集点云中提取线和平面特征的框架。</p><p>社区还提出了许多使用特征进行点云配准的算法。 [13] 和 [14] 提出了一种在局部集群中执行点曲率计算的关键点选择算法，然后使用选定的关键点进行匹配和位置识别。通过将点云投影到距离图像（a range image）上并分析深度值的二阶导数，[15] 从具有高曲率的点中选择特征进行匹配和位置识别。假设环境由平面组成，在[16]中提出了一种基于平面的配准算法。户外环境，例如森林，可能会限制这种方法的应用。 [17] 中介绍了一种专为Velodyne 激光雷达设计的项圈线段 (collar line segments, CLS) 方法。CLS 使用扫描的两个连续“环”中的点随机生成线。因此生成了两条线云并用于配准，然而，这种方法受到随机生成线条的挑战。 [18]中提出了一种基于分割的配准算法。SegMatch 首先将分割应用于点云，然后根据其特征值和形状直方图为每个段计算一个特征向量。随机森林用于匹配来自两次扫描的片段。虽然这种方法可以用于在线姿态估计，但它只能提供大约 1Hz 的定位更新。</p><p>在 [19] 和 [20] 中提出了一种低漂移和实时激光雷达里程计和建图(LOAM) 方法。 LOAM 执行点特征到边缘/平面扫描匹配以找到扫描之间的对应关系。通过计算其局部区域中点的曲率（roughness）值来提取特征。选择具有高曲率（roughness）值值的点作为边缘特征。类似地，具有低曲率（roughness）值的点被指定为平面特征。通过将估计问题新颖地划分为两个单独的算法来实现实时性能。一种算法以高频率运行并以低精度估计传感器速度，另一种算法运行频率较低，但可以以高精度获得运动估计。将这两个估计融合在一起以产生高频和高精度的单个运动估计。在 KITTI 里程计基准站点 [21] 上，通过仅使用激光雷达的估算方法，LOAM 的结果精度达到最佳[21]。</p><p>在这项工作中，我们为配备 3D 激光雷达的地面车辆寻求可靠、实时的六自由度姿态估计，其方式适合在小型嵌入式系统上有效实施。由于几个原因，这样的任务并不简单。由于尺寸有限，许多无人地面车辆 (UGV) 没有悬架或强大的计算单元。小型 UGV 在多变的地形上行驶时经常遇到非平稳运动，因此，获取的数据往往会带有运动畸变。由于在较大的运动下，只有有限的重叠区域，因此，在两次连续扫描之间也很难找到可靠的特征对应。此外，从 3D 激光雷达接收到的大量点对使用有限的车载计算资源进行实时处理提出了挑战。</p><p>当我们为此类任务实施 LOAM 时，当 UGV 以平滑运动具有稳定的特征运行并由足够的计算资源支持时，我们可以获得低漂移运动估计。但是，当资源有限时，LOAM 的性能会下降。由于需要计算密集 3D 点云中每个点的曲率（roughness）值，轻量级嵌入式系统上特征提取的更新频率无法始终跟上传感器更新频率。无人车在嘈杂环境中的运行也对 LOAM 提出了挑战。由于激光雷达的安装位置在小型 UGV 上通常靠近地面，因此来自地面的传感器噪声可能会持续存在。例如，从草地返回的范围可能会导致高曲率（roughness）值。因此，可能会从这些点中提取不可靠的边缘特征。类似地，边缘或平面特征也可以从树叶返回的点中提取。这些特征对于扫描匹配通常不可靠，因为在两次连续扫描中可能看不到相同的草叶或叶子。使用这些功能可能会导致不准确的配准和大的漂移。</p><p>因此，我们提出了一种轻量级和地面优化的 LOAM (LeGO-LOAM)，用于在具有可变地形的复杂环境中对 UGV 进行姿态估计。LeGO-LOAM 是轻量级的，因为可以在嵌入式系统上实现实时姿态估计和建图。执行点云分割以丢弃在地面分离后可能代表不可靠特征的点。LeGO-LOAM 也是地面优化的，因为我们为姿势估计引入了两步优化。在第一步中，从地面提取的平面特征用于获得 $[t_z, θ_{roll}, θ_{pitch}]$。在第二步中，通过匹配从分割点云中提取的边缘特征来获得其余的变换$[t_x, t_y, θ_{yaw}]$。我们还集成了执行闭环以纠正运动估计漂移的能力。本文的其余部分安排如下。第二节介绍了用于实验的硬件。第三节详细描述了所提出的方法。第四节介绍了一系列在各种户外环境中的实验。</p><h1 id="Ⅱ-系统硬件"><a href="#Ⅱ-系统硬件" class="headerlink" title="Ⅱ.系统硬件"></a>Ⅱ.系统硬件</h1><p>本文提出的框架使用从 Velodyne VLP-16 和 HDL-64E 3D 激光雷达收集的数据集进行了验证。VLP-16 的测量范围可达 $100m$，精度为$ ± 3cm$。它的垂直视野 (FOV) 为 $30°(±15°)$，水平视野 (FOV) 为$360°$。$16 $通道传感器提供 $2° $的垂直角分辨率。水平角分辨率根据旋转速率从 $0.1° $到$ 0.4°$ 变化。在整篇论文中，我们选择了 $10Hz $的扫描速率，它提供了$ 0.2° $的水平角分辨率。 HDL-64E（在这项工作中通过 KITTI 数据集进行了探索）也具有 $360° $的水平 FOV，但还有$ 48 $个通道。 HDL-64E 的垂直 FOV 为$ 26.9°$。</p><p>本文中使用的 UGV 是 Clearpath Jackal。它由$ 270 $瓦时锂电池供电，最大速度为$ 2.0m/s$，最大有效载荷为 $20kg$。 Jackal 还配备了低成本惯性测量单元 (IMU)，即 CH Robotics UM6 方向传感器。</p><p>提议的框架在两台计算机上得到验证：一台 Nvidia Jetson TX2 和一台配备 2.5GHz i74710MQ CPU 的笔记本电脑。Jetson TX2 是一款配备 ARM Cortex-A57 CPU 的嵌入式计算设备。选择笔记本电脑 CPU 以匹配 [19] 和 [20] 中使用的计算硬件。本文所示的实验仅使用这些系统的 CPU。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220426195127090.png" alt="image-20220426195127090" style="zoom: 50%;" /></p><blockquote><p>图 1：LeGO-LOAM 的硬件和系统概览</p></blockquote><h1 id="Ⅲ-轻型激光雷达测距和建图"><a href="#Ⅲ-轻型激光雷达测距和建图" class="headerlink" title="Ⅲ.轻型激光雷达测距和建图"></a>Ⅲ.轻型激光雷达测距和建图</h1><h2 id="A-系统概述"><a href="#A-系统概述" class="headerlink" title="A.系统概述"></a>A.系统概述</h2><p>所提出框架的概述如图 $1$ 所示。系统从 3D 激光雷达接收输入并输出 6 DOF 姿态估计。整个系统分为五个模块。第一个是分割，采用单次扫描的点云并将其投影到范围图像上进行分割。然后将分割后的点云发送到特征提取模块。然后，激光雷达里程计使用从前一个模块中提取的特征来找到与连续扫描相关的变换。这些特征在激光雷达建图中得到进一步处理，将它们注册到全局点云地图。最后，变换积分模块将激光雷达里程计和激光雷达建图的姿态估计结果进行融合，输出最终的姿态估计。相对于 [19] 和 [20] 的原始通用 LOAM 框架，所提出的系统旨在提高地面车辆的效率和准确性。下面介绍这些模块的详细信息。</p><h2 id="B-分割"><a href="#B-分割" class="headerlink" title="B. 分割"></a>B. 分割</h2><p>令$ P_t = \{p_1, p_2, …, p_n\} $为在时间 $t $获取的点云，其中$p_i$ 是 $P_t $中的一个点。$ P_t$ 首先投影到范围图像上。投影距离图像的分辨率为 $1800 \times 16$，因为 VLP-16 的水平和垂直角分辨率分别为 $0.2° $和$ 2°$。$ P_t$ 中的每个有效点 $p_i$现在由范围图像中的唯一像素表示。与 $p_i$关联的范围值$r_i$表示从对应点 $p_i$到传感器的欧氏距离。由于斜坡地形在许多环境中都很常见，因此我们不认为地面是平坦的。在分割之前，对距离图像进行列式评估（可视为地平面估计 [22]），以提取地面点。在此过程之后，可能代表地面的点被标记为地面点，不用于后续分割（分类）。</p><p>然后，将基于图像的分割方法[23]应用于范围图像，将点分组为许多簇。来自同一簇的点被分配了一个唯一的标签。请注意，地面点是一种特殊类型的集群。将分割应用于点云可以提高处理效率和特征提取精度。假设机器人在嘈杂的环境中运行，小物体（例如树叶）可能会形成微不足道且不可靠的特征，因为在两次连续扫描中不太可能看到相同的叶子。为了使用分段点云进行快速可靠的特征提取，我们省略了少于 30 个点的集群。分割前后点云的可视化如图 2 所示。原始点云包含许多点，这些点是从周围的植被中获得的，这些点可能会产生不可靠的特征。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220426194420416.png" alt="image-20220426194420416" style="zoom: 67%;" /></p><blockquote><p>图 2：噪声环境中扫描的特征提取过程。原始点云如$(a)$所示。在$(b)$中，红点被标记为地面点，其余的点是分割后剩下的点。在$(c)$中，蓝色和黄色点表示 $F_e$ 和 $F_p$ 中的边缘和平面特征。在 $(d)$中，绿色和粉色点分别代表 $\mathbb{F}_e$ 和 $\mathbb{F}_p$ 中的边缘和平面特征。</p></blockquote><p>在这个过程之后，只有可能代表大物体的点（图$2(b)$ ）被保留下来，例如树干和地面点，以供进一步处理。同时，只有这些点保存在距离图像中。我们还获得每个点的三个属性：$(1) $其作为地面点或分割点的标签，$(2) $其在范围图像中的列和行索引，以及 $(3)$ 其范围值。这些属性将在以下模块中使用。</p><h2 id="C-特征提取"><a href="#C-特征提取" class="headerlink" title="C.特征提取"></a>C.特征提取</h2><p>特征提取过程类似于[20]中使用的方法。然而，我们不是从原始点云中提取特征，而是从地面点和分割点中提取特征。令 $S$ 为范围图像同一行中 $p_i$ 的连续点的集合。 $S$ 中的一半点位于 $p_i$ 的两侧。在本文中，我们设置 $|S|$设置为 $10$。 使用分割期间计算的范围值，我们可以评估点 $p_i$在$S$中的曲率（roughness）值，</p><script type="math/tex; mode=display">c=\frac{1}{|S|\cdot\parallel r_i \parallel} \parallel \underset{j\in S,j\ne i}{\sum}(r_j-r_i) \parallel \tag{1}</script><p>为了从各个方向均匀地提取特征，我们将距离图像水平划分为几个相等的子图像。然后我们根据它们的曲率（roughness）值$ c $，对子图像的每一行中的点进行排序。与 LOAM 类似，我们使用阈值$ c_{th}$来区分不同类型的特征。我们称$c$大于$ c_{th}$为边缘特征的点，$c$小于$ c_{th}$为平面特征的点。</p><p>然后从子图像的每一行中选取<strong>不属于地面</strong>，且有最大<code>c</code>值的$n_{\mathbb{F}_e}$个特征边。以相同方式选择具有最小$c$值的$n_{\mathbb{F}_p}$平面特征点（可以标记为地面点或分段点）。设 $\mathbb{F}_e$ 和$\mathbb{F}_p$是所有子图像的所有边缘和平面特征的集合，这些特征如图 $2(d)$所示。然后，我们从子图像的每一行中提取<strong>不属于地面</strong>的具有最大$c$的$n_{F_e}$个边缘特征。类似地，我们从子图像的每一行中提取<strong>必须是地面点</strong>的具有最小$c$的 $n_{F_p} $个平面特征。设$ F_e$ 和 $F_p$ 分别是这个过程中所有边缘和平面特征的集合。在这里，我们有 $F_e\subset  \mathbb{F}_e$和 $F_p \subset \mathbb{F}_p$。$ F_e$ 和 $F_p$ 的特征如图$ 2(c)$ 所示。在本文中，我们将 $360° $范围图像划分为 $6 $个子图像。每个子图像的分辨率为 $300 \times 16$。$n_{F_e}、n_{F_p}、n_{\mathbb{F}_e} $和$n_{\mathbb{F}_p}$ 分别选择为 $2、4、40$ 和 $80$。</p><h2 id="D-激光雷达里程计"><a href="#D-激光雷达里程计" class="headerlink" title="D.激光雷达里程计"></a>D.激光雷达里程计</h2><p>激光雷达里程计模块估计两次连续扫描之间的传感器运动。通过执行点到边缘和点到平面的扫描匹配来找到两次扫描之间的变换。换句话说，我们需要从前一次扫描的特征集 $\mathbb{F}^{t-1}_e$ 和$\mathbb{F}^{t-1}_p$ 中找到 $F^t_e$和 $F^t_p$中点的对应特征。为了简洁起见，找到这些对应关系的详细过程可以在[20]中找到。</p><p>但是，我们注意到可以进行一些更改以提高特征匹配的准确性和效率：</p><p>$1) $标签匹配：由于$F^t_e$和 $F^t_p$中的每个特征在分割后都用其标签进行编码，我们只能从 $\mathbb{F}^{t-1}_e$ 和$\mathbb{F}^{t-1}_p$中找到具有相同标签的对应关系。对于 $F^t_p$ 中的平面特征，只有在$\mathbb{F}^{t-1}_p$中标记为地面点的点才会被用于寻找对应的平面贴片(patch)。对于$F^t_e$中的边缘特征，在分割簇的$\mathbb{F}^{t-1}_e$中寻找对应的边缘线。以这种方式找到对应关系有助于提高匹配精度。换句话说，同一对象的匹配对应关系更有可能在两次扫描之间找到。这一过程也缩小了潜在匹配对象的范围。</p><p>$2)$两步L-M优化：在[20]中，将当前扫描的边缘和平面特征点之间的距离及其与前一次扫描的对应关系的一系列非线性表达式编译为单个综合距离向量。应用 Levenberg-Marquardt (L-M) 方法来找到两个连续扫描之间的最小距离变换。</p><p>我们在这里介绍一种两步 L-M 优化方法。最佳变换 $T $分两步找到：</p><p>$(1)$ 通过匹配$F^t_p$中的平面特征及其在 $\mathbb{F}^{t-1}_p$ 中的对应关系来估计$ [t_z, θ_{roll}, θ_{pitch}]$</p><p>$(2) $然后使用 $F^t_e$中的边缘特征及其在 $\mathbb{F}^{t-1}_e$ 中的对应关系，并同时使用 $[t_z, θ_{roll}, θ_{pitch}]$ 作为约束一起来估计剩余的 $[t_x, t_y, θ_{yaw}]$。需要注意的是，虽然$[t_x, t_y, θ_{yaw}]$也可以从第一个优化步骤中获得，但它们的准确度较低，得到的结果也不能继续放在第二步中使用。最后，通过融合 $[t_z, θ_{roll}, θ_{pitch}]$ 和$[t_x, t_y, θ_{yaw}]$找到两个连续扫描之间的$ 6D$ 变换。通过使用所提出的两步优化方法，我们观察到在计算时间减少约 $35\% $的同时可以实现类似的精度（表 III）。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427165436363.png" alt="image-20220427165436363" style="zoom: 33%;" /></p><blockquote><p>图 3：激光雷达里程计模块的两步优化。首先通过匹配从地面点提取的平面特征来获得$[t_z, θ_{roll}, θ_{pitch}]$。 然后使用从分割点提取的边缘特征进行估计，同时应用$[t_z, θ_{roll}, θ_{pitch}]$作为约束，从而获得$[t_x, t_y, θ_{yaw}]$</p></blockquote><h2 id="E-激光雷达建图"><a href="#E-激光雷达建图" class="headerlink" title="E. 激光雷达建图"></a>E. 激光雷达建图</h2><p>激光雷达建图模块运行频率较低，它将$\{\mathbb{F}^{t}_e, \mathbb{F}^{t}_p\}$中的特征与周围的点云图 $\overline Q^{t-1}$匹配，以进一步细化位姿变换，然后这里再次使用 L-M 方法得到最终的变换。我们请读者参考 [20] 中的描述，了解详细的匹配和优化过程。 LeGO-LOAM 的主要区别在于最终点云图的存储方式。我们不是保存单个点云图，而是保存每个单独的特征集$ \{\mathbb{F}^{t}_e, \mathbb{F}^{t}_p\}$。令 $M^{t−1} = \{\{\mathbb{F}^{1}_e, \mathbb{F}^{1}_p\}, …, \{\mathbb{F}^{t-1}_e, \mathbb{F}^{t-1}_p\}\} $是保存所有先前特征集的集合。 $M^{t−1}$中的每个特征集也与扫描时传感器的位姿相关联。那么 $\overline Q^{t-1}$可以通过两种方式从$M^{t−1}$获得。</p><p>在第一种方法中，通过选择传感器视野中的特征集来获得 $\overline Q^{t-1}$。为简单起见，我们可以选择传感器位姿在传感器当前位置 $100m$ 以内的特征集。然后将所选特征集转换并融合到单个周围地图$\overline Q^{t-1}$中。这种地图选择技术类似于[20]中使用的方法。</p><p>我们还可以将位姿图 SLAM 集成到 LeGO-LOAM 中。每个特征集的传感器位姿可以建模为位姿图中的一个节点。特征集$ \{\mathbb{F}^{t}_e, \mathbb{F}^{t}_p\}$可以看作是该节点的传感器测量数据。由于激光雷达建图模块的位姿估计漂移非常低，我们可以假设在短时间内没有漂移。这样，$\overline Q^{t-1}$可以通过选择最近的一组特征集来形成，即 $\overline Q^{t-1}= \{\{\mathbb{F}^{t-k}_e, \mathbb{F}^{t-k}_p\}, …, \{\mathbb{F}^{t-1}_e, \mathbb{F}^{t-1}_p\}\} $ ，其中$ k $定义了$\overline Q^{t-1}$的大小。然后，可以使用 L-M 优化后获得的变换添加$\overline Q^{t-1}$​中新节点和所选节点之间的空间约束。我们可以通过执行闭环检测来进一步消除该模块的漂移，在这种情况下，如果使用 ICP 在当前特征集和先前特征集之间找到匹配项，则会添加新约束。然后通过将位姿图发送到优化系统（例如 [24]）来更新传感器的估计位姿。请注意，只有 Sec 中的实验。 IV(D) 使用这种技术来创建它的周围地图。注意，只有第四节（D）中的实验使用此技术来创建其周围的地图。</p><h1 id="Ⅳ-实验"><a href="#Ⅳ-实验" class="headerlink" title="Ⅳ.实验"></a>Ⅳ.实验</h1><p>我们现在描述一系列实验，以定性和定量分析两种比较方法，LOAM 和 LeGO-LOAM，在两种硬件安排上，一个 Jetson TX2 和一个 Cortex-A57，一个笔记本电脑和一个 i7-4710MQ。这两种算法都是用 C++ 实现的，并使用 Ubuntu Linux1 中的机器人操作系统 (ROS) [25] 执行$^1$。</p><blockquote><p>$^1$LeGO-LOAM 的代码可在 <a href="https://github.com/RobustFieldAutonomyLab/LeGO-LOAM">https://github.com/RobustFieldAutonomyLab/LeGO-LOAM</a> 获得</p></blockquote><h2 id="A-小型-UGV-测试"><a href="#A-小型-UGV-测试" class="headerlink" title="A. 小型 UGV 测试"></a>A. 小型 UGV 测试</h2><p>我们在植被覆盖的室外环境中手动驱动机器人。我们首先展示了在这种环境下特征提取的定性比较。使用这两种方法从同一扫描中提取的边缘和平面特征如图 4 所示。这些特征对应于第 III 节中发送到激光雷达建图模块的$\{\mathbb{F}^{t}_e, \mathbb{F}^{t}_p\}$。如图$4(d)$ 所示，LeGO-LOAM 的特征数量在点云分割后大大减少。从树叶返回的大部分点被丢弃，因为它们在多次扫描中不是稳定的特征。另一方面，由于从草地返回的点也非常嘈杂，因此在评估后会得出较大的粗曲率值。因此，使用原始 的LOAM， 不可避免地会从这些点中提取边缘特征。如图$4(c)$ 所示，从地面提取的边缘特征通常不可靠。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427090416034.png" alt="image-20220427090416034" style="zoom: 80%;" /></p><blockquote><p>图 4：在植被覆盖的室外环境中，从两种不同的激光雷达里程计和制图框架获得的边缘和平面特征。边缘和平面特征分别为绿色和粉红色。从 LOAM 获得的特征显示在$ (b) $和$ (c) $中。从 LeGO-LOAM 获得的特征如 $(d) $和$ (e)$ 所示。标签 (i) 表示树，(ii) 表示石墙， (iii) 表示机器人。</p></blockquote><p>虽然我们可以更改 LOAM 中提取边缘和平面特征的曲率阈值 $c_{th}$ 以减少特征数量并从草和树叶中过滤掉不稳定的特征，但在应用这些更改后我们会遇到更糟糕的结果。例如，我们可以增加$c_{th}$以从环境中提取更稳定的边缘特征，但如果机器人进入相对干净的环境，这种变化可能会导致有用的边缘特征数量不足。同样，当机器人从清洁环境移动到嘈杂环境时，减小$c_{th}$也会导致缺乏有用的平面特征。在这里的所有实验中，我们对 LOAM 和 LeGO-LOAM 使用相同的$c_{th}$。</p><p>现在我们在测试环境中比较两种方法的建图结果。为了模拟具有挑战性的潜在 UGV 操作场景，我们执行了一系列激进的偏航操作。请注意，在本文的所有实验中，这两种方法都提供了相同的初始平移和旋转估计（guess），该估计（guess）是从 IMU 获得的。运行60秒后得到的点云图如图5所示。由于不稳定特征导致的错误特征关联，LOAM 的地图在操作过程中会发散两次。图 $5(a)$中用白色箭头突出显示的三棵树干代表现实中的同一棵树。两种里程计方法的完整映射过程的可视化可以在视频附件中找到$^2$。</p><blockquote><p>$^2$<a href="https://youtu.be/O3tz_ftHV48">https://youtu.be/O3tz_ftHV48</a></p></blockquote><p><img src="/images/LeGO-LOAM论文翻译/image-20220427090607185.png" alt="image-20220427090607185" style="zoom:80%;" /></p><blockquote><p>图 5：LOAM 和 LeGO-LOAM 在图 $4(a) $所示地形上的地图。 $(a) $中用白色箭头标记的树代表同一棵树。</p></blockquote><h2 id="B-大规模-UGV-测试"><a href="#B-大规模-UGV-测试" class="headerlink" title="B. 大规模 UGV 测试"></a>B. 大规模 UGV 测试</h2><p>接下来，我们在三个大规模数据集上对 LOAM 和 LeGO-LOAM 进行定量比较，这将被称为实验$ 1、2 $和$ 3$。前两个是在史蒂文斯理工学院校园收集的，那里有许多建筑物、树木、道路和人行道。这些实验及其环境如图 6(a) 所示。实验 3 跨越了一条森林覆盖的远足小径，其中有树木、柏油路和被草和土壤覆盖的小径。执行实验 3 的环境如图 8 所示。每个实验的详细信息列在表 I 中。为了进行公平比较，每个实验显示的所有性能和准确度结果均在每个数据集的 10 次实时回放试验中平均得出。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427102855741.png" alt="image-20220427102855741" style="zoom: 50%;" /></p><p>1)实验1：第一个实验旨在证明LOAM和LeGO-LOAM都可以在具有平滑运动的城市环境中实现低漂移姿态估计。我们避免了激进的偏航动作，并且我们避免驾驶机器人穿过只能获得一些稳定特征的稀疏区域。在整个数据记录过程中，机器人在平坦的道路上运行。机器人的初始位置，如图6(b)所示，位于斜坡上。机器人以平均 1.35m/s 的平均速度行驶 807 秒后返回同一位置。</p><p>为了评估这两种方法的姿态估计精度，我们比较了最终姿态和初始姿态之间的平移和旋转差异。这里，通过所有实验，初始位姿定义为$ [0, 0, 0, 0, 0, 0]$。如表 V 所示，LOAM 和 LeGO-LOAM 在两种不同的硬件安排上都实现了相似的低漂移姿态估计。当在 Jetson 上运行时，来自 LeGO-LOAM 的最终地图如图 6(b) 所示。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427101541012.png" alt="image-20220427101541012"></p><blockquote><p>图 6：实验$1$和$2$的 LeGO-LOAM 图。$(c)$中的颜色变化表示真实的高程变化。由于实验 $1$ 中机器人的初始位置在斜坡上，因此 $(b)$ 中的颜色变化并不代表真实的高程变化。</p></blockquote><p>2)实验2：虽然实验2是在与实验1相同的环境中进行的，但它的轨迹略有不同，行驶在如图7(a)所示的人行道上。这条人行道代表了 LOAM 可能经常失败的环境。人行道的一端有一堵墙和柱子——从这些结构中提取的边缘和平面特征是稳定的。人行道的另一端是一片开阔的区域，上面覆盖着嘈杂的物体，即草和树，这将导致特征提取不可靠。因此，LOAM 的姿态估计在驶过这条人行道后会发散（图 7(b)和(d)）。LeGO-LOAM 没有这样的问题：1）没有从被草覆盖的地面中提取边缘特征，2）在分割后过滤掉来自树叶的噪声传感器读数。两种方法的精度比较如表 V 所示。在本实验中，LeGO-LOAM 的精度比 LOAM 高一个数量级。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427101616762.png" alt="image-20220427101616762"></p><blockquote><p>图 $7$：实验$ 2 $中 LOAM 在穿过史蒂文斯校园的人行道上发生故障的场景（上图 $(a)$ 中最左侧的人行道）。人行道的一端由附近建筑物的特征支撑。人行道的另一端主要被嘈杂的物体包围，即草和树。如果没有点云分割，将从这些对象中提取不可靠的边缘和平面特征。图像 $(b)$ 和 $(d)$ 显示 LOAM 在经过人行道后失效。</p></blockquote><p>3)实验 3：实验 3 的数据集是从森林远足小径记录的，其中 UGV 以 1.3m/s 的平均速度行驶。机器人行驶 35 分钟后返回初始位置。这种环境下的海拔变化约为 19 米。UGV 在三个路面上行驶：泥土覆盖的小径、沥青和被草覆盖的地面。这些表面的代表性图像分别显示在图 8 的底部。树木或灌木丛始终存在于道路的至少一侧。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427101634370.png" alt="image-20220427101634370" style="zoom:67%;" /></p><blockquote><p>图 8：实验$3$ LeGO-LOAM 建图结果。</p></blockquote><p>我们首先在这种环境下测试 LOAM 的准确性。生成的地图在所使用的两台计算机上的不同位置存在分歧。相对于 UGV 初始位置的最终平移和旋转误差在 Jetson 上为 69.40m 和 27.38°，在笔记本电脑上为 62.11m 和 8.50°。图 9(a) 和 (b) 显示了对两种硬件安排进行 10 次试验的结果轨迹。</p><p>当 LeGO-LOAM 应用于该数据集时，Jetson 上的最终相对平移和旋转误差为 13.93m 和 7.73°，笔记本电脑上为 14.87m 和 7.96°。 Jetson 上 LeGO-LOAM 的最终点云图如图 8 所示，叠加在卫星图像上。在图 8 的中心放大的局部地图显示，来自 LeGO-LOAM 的点云图与开放中可见的三棵树匹配得很好。在两台计算机上从 LeGO-LOAM 获得的所有路径之间显示出高度一致性。图 9(c) 和 (d) 显示了在每台计算机上运行的十次试验。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427103924914.png" alt="image-20220427103924914" style="zoom:50%;" /></p><blockquote><p>图 9：LOAM 和 LeGO-LOAM 在 10 次试验和 2 台计算机上生成的路径，以及实验 3 数据集。</p></blockquote><h2 id="C-基准测试结果"><a href="#C-基准测试结果" class="headerlink" title="C. 基准测试结果"></a>C. 基准测试结果</h2><p><strong>1)特征数量比较</strong>：我们在表II中展示了两种方法的特征提取比较。每次扫描的特征内容平均超过每个数据集的 10 次试验。点云分割后，对于集合$ F_e、F_p、\mathbb{F}_e $和$\mathbb{F}_p$，需要 LeGO-LOAM 处理的特征数量分别减少了至少$ 29\%、40\%、68\%$ 和 $72\%$。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427105750858.png" alt="image-20220427105750858" style="zoom:50%;" /></p><p><strong>2)迭代次数比较：</strong>应用提出的两步L-M优化方法的结果如表III所示。我们首先使用 LeGO-LOAM 应用原始 L-M 优化，这意味着我们最小化从边缘和平面特征一起获得的距离函数。然后我们对 LeGO-LOAM 应用两步 L-M 优化：①$F_p$中的平面特征用于获得$[t_z, θ_{roll}, θ_{pitch}]$，②利用$F_e$中的边缘特征得到$[t_x, t_y, θ_{yaw}]$。记录 L-M 方法在处理一次扫描后终止时的平均迭代次数以进行比较。当使用两步优化时，第一步优化在实验 1 和 2 的两次迭代中完成。虽然第二步优化的迭代次数与原始L-M方法的数量相似，但处理的特征较少。因此，在使用两步 L-M 优化后，激光雷达里程计的运行时间减少了 $34\%$ 至 $48\%$。两步优化的运行时间如表 IV 所示。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427105906074.png" alt="image-20220427105906074" style="zoom:50%;" /></p><p><strong>3)运行时间比较：</strong>LOAM 和$\rm{LeGO-LOAM}$ 的每个模块在两台计算机上的运行时间如表 IV 所示。使用所提出的框架，<strong>特征提取</strong>和<strong>激光雷达里程计</strong>模块的运行时间在 LeGO-LOAM 中减少了一个数量级。请注意，在 Jetson 上,这两个模块在 LOAM 中的运行时间超过 100 毫秒。导致许多扫描被跳过，因为 LOAM 在嵌入式系统上无法实现实时性能。使用 LeGO-LOAM 时，激光雷达建图的运行时间也减少了至少 $60\%$。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427110536203.png" alt="image-20220427110536203" style="zoom:50%;" /></p><p><strong>4)位姿误差比较：</strong>通过在所有实验中将初始位姿设置为$[0, 0, 0, 0, 0, 0]$，我们通过将最终位姿与初始位姿进行比较来计算相对位姿估计误差。表 V 列出了两台计算机上两种方法的旋转误差（以度为单位）和平移误差（以米为单位）。通过使用所提出的框架，LeGO-LOAM 可以以更少的计算时间实现相当或更好的位置估计精度。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427111646072.png" alt="image-20220427111646072" style="zoom:50%;" /></p><h2 id="D-使用-KITTI-数据集的闭环测试"><a href="#D-使用-KITTI-数据集的闭环测试" class="headerlink" title="D. 使用 KITTI 数据集的闭环测试"></a>D. 使用 KITTI 数据集的闭环测试</h2><p>我们的最终实验将 LeGO-LOAM 应用于 KITTI 数据集 [21]。由于在 [20] 中对 KITTI 数据集的 LOAM 测试以 10% 的实时速度运行，我们只探索 LeGO-LOAM 及其在嵌入式系统实时应用中的潜力，其中行程长度足够大需要完整的 SLAM 解决方案。LeGO-LOAM 在 Jetson 上使用序列 00 的结果如图 10 所示。为了在 Jetson 上实现实时性能，我们将 HDL-64E 的扫描下采样到与第 III 节中使用的相同范围图像VLP-16。换言之，每次扫描的 75% 的点在处理前都被省略掉了。 ICP在这里用于在位姿图中的节点之间添加约束。然后使用 iSAM2 [24] 优化该图。最后，我们使用优化后的图来校正传感器位姿和地图。更多闭环测试可以在视频附件中找到。</p><p><img src="/images/LeGO-LOAM论文翻译/image-20220427111714790.png" alt="image-20220427111714790" style="zoom:50%;" /></p><blockquote><p>图 10：LeGO-LOAM，KITTI 数据集闭环测试，使用 Jetson。颜色变化表示海拔变化。</p></blockquote><h1 id="Ⅴ-结论与讨论"><a href="#Ⅴ-结论与讨论" class="headerlink" title="Ⅴ.结论与讨论"></a>Ⅴ.结论与讨论</h1><p>我们提出了 LeGO-LOAM，一种轻量级和地面优化的激光雷达里程计和建图方法，用于在复杂环境中执行 UGV 的实时姿态估计。 LeGO-LOAM 是轻量级的，因为它可以在嵌入式系统上使用并实现实时性能。LeGO-LOAM 也是地面优化的，利用地面分离、点云分割和改进的 L-M 优化。在此过程中过滤掉可能代表不可靠特征的无价值点。两步 L-M 优化分别计算姿势变换的不同分量。所提出的方法在室外环境中收集的一系列 UGV 数据集上进行了评估。结果表明，与最先进的算法 LOAM 相比，LeGO-LOAM 可以达到相似或更好的精度。LeGO-LOAM 的计算时间也大大减少。未来的工作包括探索其在其他类型车辆中的应用。尽管 LeGO-LOAM 特别针对地面车辆的姿态估计进行了优化，但它的应用可能会扩展到其他车辆，例如无人机 (unmanned aerial vehicles，UAVs)，只需稍作改动。将 LeGO-LOAM 应用于 UAV 时，我们不会假设地面存在于扫描中。扫描的点云将在没有地面提取的情况下被分割。对于$ F_e、\mathbb{F}_e$ 和 $\mathbb{F}_p $的选择，特征提取过程是相同的。不是从标记为地面点的点中提取 $F_p$ 的平面特征，而是从所有分割点中选择 $F_p$ 中的特征，然后将使用原始的 L-M 方法来获得两次扫描之间的转换，而不是使用两步优化方法。尽管在这些变化之后计算时间会增加，但 LeGO-LOAM 仍然是有效的，因为在分割后在嘈杂的室外环境中会省略大量的点。估计的特征对应的准确性可能会提高，因为它们受益于分割。此外，使用 LeGO-LOAM 在线执行循环闭合的能力使其成为长时间导航任务的有用工具。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;LeGO-LOAM是Tixiao Shan 和 Brendan Englot于2018年提出的使用激光雷达完成定位与三维建图的算法，全称为：Lightweight and Groud-Optimized Lidar Odometry and Mapping on Variable Terrain，从标题可以看出 LeGO-LOAM 为应对&lt;strong&gt;可变地面&lt;/strong&gt;进行了地面优化，同时保证了轻量级。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/tags/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    <category term="LeGO-LOAM" scheme="https://lukeyalvin.top/tags/LeGO-LOAM/"/>
    
  </entry>
  
  <entry>
    <title>二、IMU运动学模型以及误差模型</title>
    <link href="https://lukeyalvin.top/posts/19228.html"/>
    <id>https://lukeyalvin.top/posts/19228.html</id>
    <published>2022-04-25T09:20:38.421Z</published>
    <updated>2022-05-08T13:41:42.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本节主要对IMU的运动模型以及误差模型进行了分析，并针对连续时间和离散模型的处理做了简单的概要。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="Ⅰ-旋转运动学"><a href="#Ⅰ-旋转运动学" class="headerlink" title="Ⅰ.旋转运动学"></a>Ⅰ.旋转运动学</h1><h2 id="A-线速度与角速度"><a href="#A-线速度与角速度" class="headerlink" title="A.线速度与角速度"></a>A.线速度与角速度</h2><p>如图所示，粒子在坐标系中的$z=h$的平面内做圆周运动，坐标为$r=(a\cos\theta,a\sin\theta,h)$，对坐标求导得：</p><script type="math/tex; mode=display">\begin{align*}\dot r&=(-a\dot\theta\sin\theta,a\dot\theta\cos\theta,0)^T\\&=\begin{bmatrix}0&-\dot\theta&0\\\dot\theta&0&0\\0&0&0\end{bmatrix}\begin{bmatrix}a\cos\theta\\a\sin\theta\\h\end{bmatrix}\\&=w^{\land} r\end{align*}\tag{1}</script><p>其中$w$是角速度，它是一个矢量，即$w=\begin{bmatrix}0\\0\\ \dot\theta\end{bmatrix}=\dot\theta z$,其中$|\dot\theta|$是角速度的大小。对公式$(1)$取模：</p><script type="math/tex; mode=display">|\dot r|=|w||r|sin\phi=a|\dot\theta|</script><p><img src="/images/2手写VIO-IMU传感器/image-20220422093936869.png" alt="image-20220422093936869" style="zoom:50%;" /></p><h2 id="B-旋转坐标系下的运动学"><a href="#B-旋转坐标系下的运动学" class="headerlink" title="B.旋转坐标系下的运动学"></a>B.旋转坐标系下的运动学</h2><p>如图，考虑两个坐标系，一个是世界坐标系(惯性坐标系)$W$，它本身是静止不动的；一个是机器人本体坐标系$B$，它本身在做角速度为$w_B$的纯旋转，设质量块在坐标系$B$下做速度为$v_B$，加速度为$a_B$的匀加速直线运动，它在$B$坐标系下坐标为$r_B=(x_1,x_2,x_3)^T$，设从坐标系世界坐标系$W$到是机器人本体坐标系$B$只考虑旋转的时候，旋转矩阵$R_{WB}$。</p><p><img src="/images/2手写VIO-IMU传感器/image-20220422155242434.png" alt="image-20220422155242434"></p><p>这里定义一些变量：</p><blockquote><p>①设物体在坐标系$B$下做速度为$v_B$，加速度为$a_B$，对应在坐标系$W$下的速度为$v_W$，加速度为$a_W$</p><p>并且设坐标系$B$下的速度和加速度在坐标系$W$下的表示分别为：$v=R_{WB}v_B$，$a=R_{WB}a_B$，一定注意这里的$v\ne v_W,a\ne a_W$</p><p>②设坐标轴$B$旋转的角速度为$w_B$，对应在世界坐标系中其旋转的角速度变为$w_W$，且$w_W=R_{WB}w_B$</p><p>③设物体在坐标系$B$下的坐标为$r_B$，对应在坐标系$W$下的坐标为$r_W$，且$r_W=R_{WB}r_B$</p></blockquote><p>则对应到世界坐标系下：</p><script type="math/tex; mode=display">r_W(t)=x_1(t)i+x_2(t)j+x_3(t)k=R_{WB}r_B</script><p>一般简写为：$r_B=x_ie_i$</p><p>经过一番定义之后，我们考虑几个问题:</p><ul><li><strong>求物体在$W$坐标系下的速度</strong></li></ul><p>对时间求导：</p><script type="math/tex; mode=display">\begin{align*}\dot r_W=v_W&=R_{WB}\dot r_B+\dot R_{WB} r_B\\&=R_{WB}v_B+w_W^{\land} r_W \ \ \ \ 参见公式(3) \\ &=v+w_W^{\land} r_W\Leftrightarrow v=v_W-w_W^{\land} r_W\\\end{align*}\tag{2}</script><p>其中$w_W=R_{WB}w_b$表示body坐标系$B$的角速度在世界坐标系$W$下的表示。具体推导参见公式$(3)$.</p><p>这里可以明显看出$v\ne v_W$，两者之间相差一个$w_W^{\land} r_W$项。</p><hr><p>推导$\dot R_{WB} r_B$，使用右乘扰动模型:</p><script type="math/tex; mode=display">\begin{align*}\dot R_{WB} r_B&=\underset{\Delta t \rightarrow0}{lim}\frac{R_{WB}\exp([w_B\Delta t]^{\land})r_B-R_{WB}r_B}{\Delta t}\\&\approx\underset{\Delta t \rightarrow0}{lim}\frac{R_{WB}(I+[w_B\Delta t]^{\land})r_B-R_{WB}r_B}{\Delta t}\\&=\underset{\Delta t \rightarrow0}{lim}\frac{R_{WB}[w_B\Delta t]^{\land}r_B}{\Delta t}\\&=\underset{\Delta t \rightarrow0}{lim}\frac{-R_{WB}r_B^{\land}[w_B\Delta t]}{\Delta t}\\&=-R_{WB}r_B^{\land}w_B\\ &=R_{WB}w_B^{\land}r_B\\&=(R_{WB}w_B)^{\land}R_{WB}r_B\\&=w^{\land}_Wr_W\end{align*}\tag{3}</script><hr><ul><li><strong>求物体在$W$坐标系下的加速度</strong></li></ul><p>对时间求导：</p><script type="math/tex; mode=display">\begin{align*}\ddot r_W =\dot v_W = a_W&=\frac{d(R_{WB}v_B+w_W^{\land}\dot r_W)}{dt}\\&=R_{WB}\dot v_B+\dot R_{WB} v_B+w_W^{\land}\dot r_W+\dot w_W^{\land}r_W\\&=a+w^{\land}v+(w^{\land}v+w^{\land}(w^{\land} r_W))+\dot w^{\land}r_W\\&=a+2w^{\land}v+w^{\land}(w^{\land} r_W)+\dot w^{\land}r_W\\\end{align*}\tag{4}</script><p>上式的每一项的推导见下面。这里可以明显看出$a\ne a_W$，两者之间相差三个项，分别是<strong>科氏力：$2w^{\land}v$，离心力：$w^{\land}(w^{\land} r_W)$、欧拉力：$\dot w^{\land}r_W$。</strong></p><hr><ul><li>第一项：</li></ul><script type="math/tex; mode=display">R_{WB}\dot v_B=R_{WB}a_B=a</script><ul><li>第二项：</li></ul><p>参考公式$(3)$，很容易就可以推出来：</p><script type="math/tex; mode=display">\begin{align*}\dot R_{WB} v_B&=\underset{\Delta t \rightarrow0}{lim}\frac{R_{WB}\exp([w_B\Delta t]^{\land})v_B-R_{WB}v_B}{\Delta t}\\&=(R_{WB}w_B)^{\land}R_{WB}r_B\\&=w^{\land}_Wv\end{align*}</script><ul><li>第三项：</li></ul><script type="math/tex; mode=display">\begin{align*}w_W^{\land}\dot r_W&=w_W^{\land}(v+w_W^{\land}r_W)\\&=w_W^{\land}v+w_W^{\land}(w_W^{\land}r_W)\end{align*}</script><hr><p>整个过程的作用是什么？</p><p>我们在已知$B$坐标系下的物体的加速度、速度以及旋转轴的角速度，我们就可以求得对应世界坐标系下的相应的物理量，那么相应的求可以求得世界坐标系下的位姿（速度积分得到位姿）、四元数（根据角速度）。</p><h1 id="Ⅱ-IMU-工作原理"><a href="#Ⅱ-IMU-工作原理" class="headerlink" title="Ⅱ.IMU 工作原理"></a>Ⅱ.IMU 工作原理</h1><h2 id="A-加速度计工作原理"><a href="#A-加速度计工作原理" class="headerlink" title="A.加速度计工作原理"></a>A.加速度计工作原理</h2><p>测量原理可以用一个简单的质量块 + 弹簧 + 指示计来表示:</p><p><img src="/images/2手写VIO-IMU传感器/image-20220422191601477.png" alt="image-20220422191601477.png" style="zoom:33%;" /></p><p>注意这里的加速度计测量值$a_m$为弹簧拉力对应的加速度，所以有：</p><script type="math/tex; mode=display">a_m=\frac{f}{m}=a-g\tag{5}</script><p>其中$f $为弹簧拉力，$a$ 为物体在惯性系下的加速度，$g$为重力加速度。</p><p>另外，实际的加速度计大都是$MEMS $加速度计，它利用电容或者电阻桥来等原理来测量$ a_m$</p><p>其原理可以参考：<a href="https://m.elecfans.com/article/596137.html"><strong>MEMS 加速度传感器的原理与构造介绍</strong></a></p><p>通常情况下我们假设地球表面为惯性参考系，但是对于高端的测量单元来说，这种精度远远不够（需要考虑地球自转的影响），所以就将惯性参考系的原点记为地球的质心，而位于地球表面的坐标系称为地面参考系或东北天坐标系（ENU坐标系）, 如下图所示。在此坐标系下$g=(0,0,-9.81)^T$</p><p><img src="/images/2手写VIO-IMU传感器/image-20220422192532908.png" alt="image-20220422192532908.png" style="zoom:33%;" /></p><p>假设 IMU 坐标系就是 ENU 坐标系，$R_{WB }= I$，静止时有$a=0,a_m=-g$，自由落体时有$a=g,a_m=0$</p><h2 id="B-陀螺仪测量原理"><a href="#B-陀螺仪测量原理" class="headerlink" title="B.陀螺仪测量原理"></a>B.陀螺仪测量原理</h2><p>陀螺仪侦测的是角速度。其工作原理基于科里奥利力的原理：当一个物体在坐标系中直线移动时，假设坐标系做一个旋转，那么在旋转的过程中，物体会感受到一个垂直的力和垂直方向的加速度。</p><p>按测量原理分有<strong>振动陀螺</strong>，<strong>光纤陀螺</strong>等。</p><p><img src="/images/2手写VIO-IMU传感器/陀螺仪.gif" alt="陀螺仪.gif"></p><p>低端 MEMS 陀螺上一般采用振动陀螺原理，通过测量 科氏力（Coriolis force ）来间接得到角速度。MEMS 陀螺仪：一个主动运动轴 + 一个敏感轴，比如，如图示，高速运动的物体速度为$v$，在旋转坐标系下，物体会受到科氏力的影响，我们通过求科氏力就可以求得角速度$w$的大小。</p><p><img src="/images/2手写VIO-IMU传感器/image-20220422195814350.png" alt="image-20220422195814350.png" style="zoom:33%;" /></p><p>但是实际制作的过程中我们不只是使用一个质量块，而是使用两个质量块，就是<strong>音叉陀螺仪</strong>，如图所示，叉子的中间为旋转轴，叉子左右两个质量块，做方反的正弦运动，质量块受到的科氏力方向相反。</p><p><img src="/images/2手写VIO-IMU传感器/20210905220130.png" alt="20210905220130.png" style="zoom: 33%;" /></p><p>当两个完全相同的质量块的运动方向相反，但是旋转相同的时候，它们就会受到相反的科氏力以及相同的外部加速度影响力。将两个质量块所受到该方向上的力做差，就会得到两倍的科氏力。</p><p><strong>但是为啥要用这么做呢? 一个质量块不行么？</strong></p><p>①利用二倍的科氏力对应的电压指数更大，测量也变得更准确；②因为有可能在科氏力方向上物体本身具有一定的加速度，所以利用音叉陀螺仪构成差分模型，可以将两个外部力相互抵消（科氏力方向物体本身的加速度），消除自身的影响，是的获得的科氏力更准。</p><p>但是，实际上，两个质量块不可能完全一致，也就是说陀螺仪的测量可能会受到外部加速度的影响，即常称的 <strong>G-sensitivity</strong>，一般的IMU手册里面都会有这个指数，它的含义就是告诉你IMU受加速度影响的系数有多大。</p><h1 id="Ⅲ-IMU-中的误差及其标定"><a href="#Ⅲ-IMU-中的误差及其标定" class="headerlink" title="Ⅲ.IMU 中的误差及其标定"></a>Ⅲ.IMU 中的误差及其标定</h1><p>误差的分类：加速度计和陀螺仪的误差可以分为：确定性误差以及随机的误差，确定性的误差一般是事先通过标定确定，但是随机误差通常情况下假设噪声服从的是高斯分布。</p><h2 id="A-确定性误差与标定"><a href="#A-确定性误差与标定" class="headerlink" title="A.确定性误差与标定"></a>A.确定性误差与标定</h2><h3 id="1-确定性误差"><a href="#1-确定性误差" class="headerlink" title="1.确定性误差"></a>1.确定性误差</h3><ul><li><strong>Bias</strong></li></ul><p>理论上，当没有外部作用时，IMU 传感器的输出应该为$0$。但是，实际数据存在一个偏置$ b$。加速度计 bias 对位姿估计的影响：</p><script type="math/tex; mode=display">v_{err}=b_at,\ \ \ p_{err}=\frac{1}{2}b_at^2</script><p>这里的$p_{err}$指的是位移，因为有时间$t$的存在，为了区分，将位移定义为$p$.</p><ul><li><strong>Scale(刻度系数误差)</strong></li></ul><p>scale 可以看成是实际数值和传感器输出值之间的比值。</p><p><img src="/images/2手写VIO-IMU传感器/image-20220422204953295.png" alt="image-20220422204953295.png" style="zoom:33%;" /></p><ul><li><strong>Nonorthogonality/Misalignment Errors(安装误差)</strong></li></ul><p>特别的在多轴的IMU传感器中，由于制作工艺的问题，有可能对导致$xyz$轴并不是严格意义的正交，如下图所示，$z$轴并不是严格意义上与$xOy$平面垂直，则会影响对应的$x,y$上的分量。</p><p><img src="/images/2手写VIO-IMU传感器/image-20220422204127003.png" alt="image-20220422204127003.png" style="zoom:33%;" /></p><p>加上之前的scale的影响：</p><script type="math/tex; mode=display">\begin{align*}scale+Misalignment:&\\&\begin{bmatrix}l_{ax}\\l_{ay}\\l_{az}\end{bmatrix}=\begin{bmatrix}s_{xx}&m_{xy}&m_{xz}\\m_{yx}&s_{yy}&m_{yz}\\m_{zx}&m_{zy}&s_{zz}\end{bmatrix}\begin{bmatrix}a_{x}\\a_{y}\\a_{z}\end{bmatrix}\end{align*}</script><h3 id="2-确定性误差的标定"><a href="#2-确定性误差的标定" class="headerlink" title="2.确定性误差的标定"></a>2.确定性误差的标定</h3><h4 id="六面法标定加速度计和陀螺仪"><a href="#六面法标定加速度计和陀螺仪" class="headerlink" title="六面法标定加速度计和陀螺仪"></a>六面法标定加速度计和陀螺仪</h4><p>六面法是指将加速度计的 3 个轴分别朝上或者朝下水平放置一段时间，采集 6 个面的数据完成标定。<br>如果各个轴都是正交的，那很容易得到 bias 和 scale：</p><p>因为静止状态下，向上和向下所得到IMU的示数相加正好抵消掉了重力的影响，所以两次测量相加得到两倍的bias；</p><p>向上和向下所得到IMU的示数相减可以抵消bias;</p><script type="math/tex; mode=display">b=\frac{l^{up}_f+l^{down}_f}{2}\\S=\frac{l^{up}_f-l^{down}_f}{2g}\tag{6}</script><p>其中，$l $为加速度计某个轴的测量值，$g$ 为当地的重力加速度</p><p><strong>考虑轴间误差的时候，实际加速度和测量值之间的关系为：</strong></p><p>当考虑轴间的误差的时候，就变成$L = S · a + b$，其中$S$为$3\times3$的矩阵，</p><script type="math/tex; mode=display">\begin{bmatrix}l_{ax}\\l_{ay}\\l_{az}\end{bmatrix}=\begin{bmatrix}s_{xx}&m_{xy}&m_{xz}\\m_{yx}&s_{yy}&m_{yz}\\m_{zx}&m_{zy}&s_{zz}\end{bmatrix}\begin{bmatrix}a_{x}\\a_{y}\\a_{z}\end{bmatrix}+\begin{bmatrix}b_{ax}\\b_{ay}\\b_{az}\end{bmatrix}\tag{7}</script><p>水平放置$6$面，就会得到$6$个$a$向量，加速度的理论值为</p><script type="math/tex; mode=display">a_1=\begin{bmatrix}g\\0\\0\end{bmatrix},a_2=\begin{bmatrix}-g\\0\\0\end{bmatrix},a_3=\begin{bmatrix}0\\g\\0\end{bmatrix},a_4=\begin{bmatrix}0\\-g\\0\end{bmatrix},a_5=\begin{bmatrix}0\\0\\g\end{bmatrix},a_6=\begin{bmatrix}0\\0\\-g\end{bmatrix}</script><p>对应的$L$为$L=\begin{bmatrix}l_1&amp;l_2&amp;l_3&amp;l_4&amp;l_5&amp;l_6\end{bmatrix}$</p><p>在得知六组数据$(a_1,l_1)…(a_6.l_6)$，我们就可以利用最小二乘就可以得出$S$和$b$的具体值。线性最小二乘可以参考：<a href="https://lukeyalvin.top/2022/04/04/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/">线性最小二乘</a></p><p><strong>同理陀螺仪的六面法标定与其类似，和加速度计六面法不同的是，陀螺仪的真实值由高精度转台提供，这里的$6 $面是指各个轴顺时针和逆时针旋转。</strong></p><h4 id="温度相关的参数标定"><a href="#温度相关的参数标定" class="headerlink" title="温度相关的参数标定"></a>温度相关的参数标定</h4><p>目的：这个标定的主要目的是对传感器估计的 bias 和 scale 进行温度补偿，获取不同温度时 bias 和 scale 的值，绘制成曲线。</p><p>两种标定方法：</p><ul><li>soak method：控制恒温室的温度值，然后读取传感器数值进行标定。</li><li>ramp method：记录一段时间内线性升温和降温时传感器的数据来进行标定。</li></ul><h2 id="B-随机误差与标定"><a href="#B-随机误差与标定" class="headerlink" title="B.随机误差与标定"></a>B.随机误差与标定</h2><h3 id="1-随机误差"><a href="#1-随机误差" class="headerlink" title="1.随机误差"></a>1.随机误差</h3><h4 id="高斯白噪声"><a href="#高斯白噪声" class="headerlink" title="高斯白噪声"></a>高斯白噪声</h4><p>IMU 数据<strong>连续时间</strong>上受到一个均值为$ 0$，方差为$\sigma$，各时刻之间相互独立的高斯过程$ n(t)$：</p><script type="math/tex; mode=display">\begin{align*}&E[n(t)]\equiv0\\&E[n(t_1)n(t_2)]=\sigma^2\delta(t_1-t_2)\end{align*}\tag{8}</script><p>其中$\delta()$表示狄拉克函数。</p><p>实际上，IMU 传感器获取的数据为<strong>离散采样</strong>，离散和连续高斯白噪声的方差之间存在如下转换关系：</p><p>定义$n_d[k]$</p><script type="math/tex; mode=display">\begin{align*}n_d[k]\triangleq n(t_0+t_1)≃\frac{1}{\Delta t}\int^{t_0+\Delta t}_{t_0}{n(\tau)}dt\end{align*}</script><p>对其求方差$Var(X)=E[(X-\mu)^2]$,已知均值为$0$，$X=n_d[k]$：</p><script type="math/tex; mode=display">\begin{align*}E(n_d[k]^2)&=E(\frac{1}{\Delta t^2}\int^{t_0+\Delta t}_{t_0}\int^{t_0+\Delta t}_{t_0}{n(\tau)}{n(t)}d\tau dt)\\&=E(\frac{\sigma^2}{\Delta t^2}\int^{t_0+\Delta t}_{t_0}\int^{t_0+\Delta t}_{t_0}{\delta(t-\tau)}d\tau dt)\\&=E(\frac{\sigma^2}{\Delta t})\end{align*}\tag{9}</script><p>对应相等，可得：</p><script type="math/tex; mode=display">n_d[k]=\sigma_dw[k]\tag{10}</script><p>其中，</p><script type="math/tex; mode=display">w[k]\sim N(0,1)\\\sigma_d=\sigma\frac{1}{\sqrt{\Delta t} }\tag{11}</script><p><strong>也就是说高斯白噪声的连续时间到离散时间之间差一个$\frac{1}{\sqrt{\Delta t} }$ ，$\sqrt{\Delta t} $是传感器的采样时间。</strong></p><h4 id="Bias-随机游走"><a href="#Bias-随机游走" class="headerlink" title="Bias 随机游走"></a>Bias 随机游走</h4><p>通常用维纳过程 (wiener process) 来建模 bias 随时间连续变化的过程，离散时间下称之为随机游走。</p><script type="math/tex; mode=display">\dot b(t)=n(t)=\sigma_bw(t)\tag{12}</script><p>其中$ w $是方差为$ 1 $的白噪声。</p><p>同样，离散和连续之间的转换：</p><p>定义$b_d[k]$</p><script type="math/tex; mode=display">b_d[k]\triangleq b(t_0)+\int^{t_0+\Delta t}_{t_0}{n(t)}dt</script><p>求方差：</p><script type="math/tex; mode=display">\begin{align*}E((b_d[k]-b_d[k-1])^2)&=E(\int^{t_0+\Delta t}_{t_0}\int^{t_0+\Delta t}_{t_0}{n(t)}{n(\tau)}d\tau dt)\\&=E(\sigma_b^2\int^{t_0+\Delta t}_{t_0}\int^{t_0+\Delta t}_{t_0}\delta (t-\tau)d\tau dt)\\&=E(\sigma_b^2\Delta t)\end{align*}\tag{13}</script><p>所以：</p><script type="math/tex; mode=display">b_d[k]=b_d[k-1]+\sigma_{bd}w[k]\tag{14}</script><p>其中：</p><script type="math/tex; mode=display">w[k]\sim N(0,1)\\\sigma_{bd}=\sigma_b \sqrt{\Delta t}\tag{15}</script><p><strong>bias 随机游走的噪声方差从连续时间到离散之间需要乘以</strong>$\sqrt{\Delta t}$</p><h3 id="2-随机误差的标定"><a href="#2-随机误差的标定" class="headerlink" title="2.随机误差的标定"></a>2.随机误差的标定</h3><h4 id="艾伦方差标定"><a href="#艾伦方差标定" class="headerlink" title="艾伦方差标定"></a>艾伦方差标定</h4><blockquote><p>在统计学中描述随机变量的两个经典参数是均值和方差，早期在定量表征原子钟的频率稳定度时采用的就是经典方差方法。1996 年，学者 D.W.Allan 在分析铯原子钟频标的频率稳定度时发现经典方差随着时间的增长而发散，为了解决该问题，提出了一种新的评定方法，后来称为艾伦方差。由于惯性器件也具有振荡器的特征，Allan 方差分析也被广泛应用于惯性器件的随机误差建模，IEEE 标准中就将 Allan 方差方法引入到了激光陀螺的建模分析。</p></blockquote><p>具体的流程如下：</p><p>①保持传感器绝对静止获取数据。</p><p>②对数据进行分段，设定时间段的时长，如下图所示。</p><p><img src="/images/2手写VIO-IMU传感器/image-20220423162306358.png" alt="image-20220423162306358" style="zoom:50%;" /></p><p>③将传感器数据按照时间段进行平均。</p><p>④计算方差，绘制艾伦曲线。</p><p>得到的艾伦曲线如下图所示：</p><p><img src="/images/2手写VIO-IMU传感器/image-20220423162352964.png" alt="image-20220423162352964" style="zoom: 33%;" /></p><p>从艾伦方差曲线中可以辨识出 IMU 的五种噪声，分别为：量化噪声、角度随机游走、零偏不稳定性噪声，角速率随机游走，速率斜坡，一般在 IMU 噪声辨识中用的比较多的是中间 3 种。</p><h1 id="Ⅳ-IMU误差模型"><a href="#Ⅳ-IMU误差模型" class="headerlink" title="Ⅳ.IMU误差模型"></a>Ⅳ.IMU误差模型</h1><h3 id="1-加速度计的误差模型"><a href="#1-加速度计的误差模型" class="headerlink" title="1.加速度计的误差模型"></a>1.加速度计的误差模型</h3><p>设导航系$G$为东北天，$g^G=(0,0,-9.81)^T$。</p><p>理论测量值：</p><script type="math/tex; mode=display">a_m^B=R_{BG}(a^G-g^G)\tag{16}</script><p>如果考虑高斯白噪声，bias，以及尺度因子(通常假设尺度因子为单位矩阵。)，则为：</p><script type="math/tex; mode=display">a_m^B=S_aR_{BG}(a^G-g^G)+n_a+b_a\tag{17}</script><p><img src="/images/2手写VIO-IMU传感器/image-20220423171217806.png" alt="image-20220423171217806.png" style="zoom: 50%;" /></p><h3 id="2-陀螺仪的误差模型"><a href="#2-陀螺仪的误差模型" class="headerlink" title="2.陀螺仪的误差模型"></a>2.陀螺仪的误差模型</h3><p>考虑尺度因子，高斯白噪声，以及 bias, 陀螺仪的误差模型如下：</p><script type="math/tex; mode=display">w^B_m=S_gw^B+n_g+nb_g\tag{18}</script><p>低端传感器，考虑加速度对陀螺仪的影响，即 g-灵敏度：</p><script type="math/tex; mode=display">w^B_m=S_gw^B+S_{ga}a^B+n_g+nb_g\tag{19}</script><p>陀螺仪受四种噪声的影响分别如下图所示：</p><p><img src="/images/2手写VIO-IMU传感器/image-20220423190440715.png" alt="image-20220423190440715" style="zoom: 33%;" /></p><h1 id="Ⅴ-IMU-运动模型"><a href="#Ⅴ-IMU-运动模型" class="headerlink" title="Ⅴ.IMU 运动模型"></a>Ⅴ.IMU 运动模型</h1><p>忽略 scale 的影响，只考虑白噪声和 bias 随机游走：</p><script type="math/tex; mode=display">\begin{align*}\tilde{w}^B&=w^B+b_g+n_g\tag{20}\end{align*}</script><script type="math/tex; mode=display">\begin{align*}\tilde{a}^B&=q_{BW}(a^W+g^W)+b_a+n_a\end{align*}\tag{21}</script><p>上标$ g$ 表示 gyro，a 表示 acc，$W$表示在世界坐标系 world，$B$表示imu 机体坐标系 body。IMU 的真实值为$w, a$, 测量值为$\tilde w, a$。</p><p>P(ose),V(elocity),Q(uaternion) 对时间的导数可写成：</p><script type="math/tex; mode=display">\begin{align*}\dot p_{wb}&=v^w_t\\\dot v^w_t &=a^w_t\\\dot q_{wb_t} &=q_{wb_t} \otimes \begin{bmatrix}0\\ \frac{1}{2}w^{b_t} \end{bmatrix}\end{align*}\tag{22}</script><h2 id="A-连续时间下-IMU-运动模型"><a href="#A-连续时间下-IMU-运动模型" class="headerlink" title="A.连续时间下 IMU 运动模型"></a>A.连续时间下 IMU 运动模型</h2><p>根据上面的导数关系，可以从第 i 时刻的 PVQ，通过对 IMU 的测量值进行积分，得到第 j 时刻的 PVQ:</p><script type="math/tex; mode=display">\begin{align*}p_{wb_j}&=p_{wb_i}+v^w_i \Delta t+\iint_{t\in[i,j]}(q_{wb_t}a^{b_t}-g^w)\delta t^2\\v^w_j&=v^w_i+\int_{t\in[i,j]}(q_{wb_t}a^{b_t}-g^w)\delta t\\q_{wb_j}&=\int_{t\in[i,j]}q_{wb_t}\otimes \begin{bmatrix}0\\ \frac{1}{2}w^{b_t} \end{bmatrix}\delta t\end{align*}\tag{23}</script><h2 id="B-运动模型的离散积分"><a href="#B-运动模型的离散积分" class="headerlink" title="B.运动模型的离散积分"></a>B.运动模型的离散积分</h2><h3 id="1-欧拉法"><a href="#1-欧拉法" class="headerlink" title="1.欧拉法"></a>1.欧拉法</h3><p>使用欧拉法，即两个相邻时刻 $k$ 到 $k+1 $的位姿是用第$k$ 时刻的测量值 $a, w$ 来计算</p><script type="math/tex; mode=display">\begin{align*}p_{wb_{k+1} }&=p_{wb_k}+v^w_k \Delta t +\frac{1}{2}a\Delta t^2\\v^w_{k+1}&=v^w_k+a\Delta t \\q_{wb_{k+1} }&=q_{wb_k}\otimes \begin{bmatrix}1\\ \frac{1}{2}w \delta t\end{bmatrix}\tag{24}\end{align*}</script><p>其中，</p><script type="math/tex; mode=display">\begin{align*}a&=q_{wb_{k+1} }(a^{b_k}-b^a_k)-g^w\\w&=w^{b_k}-b^g_k\end{align*}\tag{25}</script><h3 id="2-中值法"><a href="#2-中值法" class="headerlink" title="2.中值法"></a>2.中值法</h3><p>使用 mid-point 方法，即两个相邻时刻$ k$到$ k+1$ 的位姿是用两个时刻的测量值$ a,w $的平均值来计算。</p><script type="math/tex; mode=display">\begin{align*}p_{wb_{k+1} }&=p_{wb_k}+v^w_k \Delta t +\frac{1}{2}a\Delta t^2\\v^w_{k+1}&=v^w_k+a\Delta t \\q_{wb_{k+1} }&=q_{wb_k}\otimes \begin{bmatrix}1\\ \frac{1}{2}w \delta t\end{bmatrix}\end{align*}\tag{26}</script><p>其中，</p><script type="math/tex; mode=display">\begin{align*}a&=\frac{1}{2}[q_{wb_{k} }(a^{b_k}-b^a_k)-g^w+q_{wb_{k+1} }(a^{b_{k+1} }-b^a_k)-g^w]\\w&=\frac{1}{2}[(w^{b_k}-b^g_k)+(w^{b_{k+1} }-b^g_k)]\end{align*}\tag{27}</script>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本节主要对IMU的运动模型以及误差模型进行了分析，并针对连续时间和离散模型的处理做了简单的概要。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="从零开始手写VIO" scheme="https://lukeyalvin.top/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E5%86%99VIO/"/>
    
    
    <category term="VIO" scheme="https://lukeyalvin.top/tags/VIO/"/>
    
    <category term="IMU误差模型" scheme="https://lukeyalvin.top/tags/IMU%E8%AF%AF%E5%B7%AE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>一、VIO概述以及三维刚体运动知识点回顾</title>
    <link href="https://lukeyalvin.top/posts/28639.html"/>
    <id>https://lukeyalvin.top/posts/28639.html</id>
    <published>2022-04-25T09:17:10.447Z</published>
    <updated>2022-05-08T13:19:44.353Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本课程专注于<strong>视觉 +IMU 融合定位</strong>的基础理论和实现，作为视觉SLAM 的进阶课程<br>在本课程中，你将学习到的重点内容有：IMU 的工作原理和噪声方程；视觉与 IMU 紧耦合的基础理论；从零开始实现 VIO 紧耦合优化器（仅基于 Eigen）；相比视觉 SLAM 基础课程，本次课程更加注重 IMU 融合的理论推导与实现。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p>本课程专注于<strong>视觉 +IMU 融合定位</strong>的基础理论和实现，作为视觉SLAM 的进阶课程<br>在本课程中，你将学习到的重点内容有：</p><ul><li>IMU 的工作原理和噪声方程</li><li>视觉与 IMU 紧耦合的基础理论</li><li>从零开始实现 VIO 紧耦合优化器（仅基于 Eigen）</li></ul><p>相比视觉 SLAM 基础课程，本次课程更加注重 IMU 融合的理论推导与实现。</p><h1 id="Ⅰ-VIO-概述"><a href="#Ⅰ-VIO-概述" class="headerlink" title="Ⅰ.VIO 概述"></a>Ⅰ.VIO 概述</h1><h2 id="A-IMU与视觉里程"><a href="#A-IMU与视觉里程" class="headerlink" title="A.IMU与视觉里程"></a>A.IMU与视觉里程</h2><p>IMU（Inertial Measurement Unit），惯性测量单元，用于测量物体三轴姿态角(或角速率)以及加速度的装置。一般情况下，一个IMU内会装有三轴的陀螺仪和三个方向的加速度计，分别用来测量物体在三维空间中的角速度和加速度，并以此解算出物体的姿态。为了提高可靠性，还可以为每个轴配备更多的传感器。一般而言IMU要安装在被测物体的重心上。</p><ul><li>典型 6 轴 IMU 本身由一个陀螺仪和一个加速度计组成，分别测量自身的角速度和加速度，并以较高频率（≥ 100Hz）返回。</li></ul><p><img src="/images/1手写VIO-课程概要/image-20220420150139375.png" alt="image-20220420150139375" style="zoom: 33%;" /></p><ul><li>但是IMU，受自身温度、零偏、振动等因素干扰，积分得到的平移和旋转容易漂移</li></ul><p>手机等电子产品多使用价格低廉的 MEMS IMU（如 MPU 6050），自动驾驶类则多使用几万元的 IMU（如 Apollo 中使用的 Novatel SPAN-IGM-A1）</p><p><img src="/images/1手写VIO-课程概要/image-20220420150543613.png" alt="image-20220420150543613" style="zoom: 50%;" /></p><p>视觉 Visual Odometry</p><ul><li>以图像形式记录数据，频率较低（15 − 60Hz 居多）</li><li>通过图像特征点或像素推断相机运动，因此容易受成像质量的影响。</li></ul><p><strong>IMU 与视觉定位方案优势与劣势对比：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">方案</th><th style="text-align:center">IMU</th><th style="text-align:center">视觉</th></tr></thead><tbody><tr><td style="text-align:center">优势</td><td style="text-align:center">快速响应<br/>不受成像质量影响<br/>角速度普遍比较准确<br/>可估计绝对尺度</td><td style="text-align:center">（静止）不产生漂移<br/>直接测量旋转与平移</td></tr><tr><td style="text-align:center">劣势</td><td style="text-align:center">存在零偏<br/>低精度 IMU 积分位姿发散<br/>高精度价格昂贵</td><td style="text-align:center">受图像遮挡、运动物体干扰<br/>单目视觉无法测量尺度<br/>单目纯旋转运动无法估计<br/>快速运动时易丢失</td></tr></tbody></table></div><p>整体上，视觉和 IMU 定位方案存在一定互补性质：</p><ul><li>IMU 适合计算短时间、快速的运动；</li><li>视觉适合计算长时间、慢速的运动。</li></ul><p>同时，可利用视觉定位信息来估计 IMU 的零偏，减少 IMU 由零偏导致的发散和累积误差；反之，IMU 可以为视觉提供快速运动时的定位。</p><h2 id="B-VIO"><a href="#B-VIO" class="headerlink" title="B.VIO"></a>B.VIO</h2><p>VIO：（Visual-Inertial Odometry）视觉惯性里程计，有时候也叫视觉惯性系统（VINS，visual-inertial system），是融合相机和IMU数据实现SLAM的算法。</p><p>IMU 数据可与多种定位方案融合，比如自动驾驶中通常用 IMU+GPS/差分 GPS/RTK 的融合定位方案，<br>形成 GNSS-INS 组合导航系统，达到厘米组定位精度；头戴式 AR/VR 头盔则多使用视觉 +IMU 的 VIO 定位系统，形成高帧率定位方案。</p><p>根据融合框架的区别VIO可以分为紧耦合和松耦合：</p><ul><li><strong>松耦合</strong></li></ul><p>松耦合将 IMU 定位与视觉/GNSS 的位姿直接进行融合，融合过程对二者本身不产生影响，作为后处理方式输出。典型方案为卡尔曼滤波器。</p><p><img src="/images/1手写VIO-课程概要/image-20220420151628700.png" alt="image-20220420151628700" style="zoom: 33%;" /></p><ul><li><strong>紧耦合</strong></li></ul><p>紧耦合则是使用两个传感器的原始数据共同估计一组变量，传感器噪声也是相互影响的，紧耦合算法上比较复杂，但充分利用了传感器数据，可以实现更好的效果，是目前研究的重点。典型方案为 MSCKF 和非线性优化。</p><p><img src="/images/1手写VIO-课程概要/image-20220420151708384.png" alt="image-20220420151708384" style="zoom:33%;" /></p><p><strong>为什么要使用紧耦合？</strong></p><ul><li>单纯凭（单目）视觉或 IMU 都不具备估计 Pose 的能力：视觉存在尺度不确定性、IMU 存在零偏导致漂移；</li><li>松耦合中，视觉内部 BA 没有 IMU 的信息，在整体层面来看不是最优的。</li><li>紧耦合可以一次性建模所有的运动和测量信息，更容易达到最优。</li></ul><h1 id="Ⅱ-知识点回顾"><a href="#Ⅱ-知识点回顾" class="headerlink" title="Ⅱ.知识点回顾"></a>Ⅱ.知识点回顾</h1><h2 id="A-三维刚体运动"><a href="#A-三维刚体运动" class="headerlink" title="A.三维刚体运动"></a>A.三维刚体运动</h2><p>在三维刚体运动中，我们定义机器人上的各种坐标系，世界坐标系$W$，IMU坐标系(Body系)$I$，相机坐标系$C$。通过十四讲的学习我们可以知道，坐标系之间的转换可以通过$SE(3)$给出，比如$I$到$W$坐标系的变换矩阵为$T_{WI}$:</p><script type="math/tex; mode=display">T_{WI}=\begin{bmatrix}R_{WI}&t_{WI}\\0^T&1\end{bmatrix}\in\mathbb{R}^{4×4}\tag{1}</script><p>其中，$R_{WI}$为$3×3$的旋转矩阵，$t_{WI}$为平移向量。我们可以用$T_{WI}$右乘一个$I$坐标系下的坐标，将得到该点$W$系下的坐标。</p><h2 id="B-四元数"><a href="#B-四元数" class="headerlink" title="B.四元数"></a>B.四元数</h2><p>三维刚体的运动可以有旋转矩阵来表达，也可以用四元数$q$描述。四元数有一个实部和三个虚部。我们把实部写在前：</p><script type="math/tex; mode=display">q=[q_0,q_1,q_2,q_3]^T或q=[w,x,y,z]^T\tag{2}</script><p>其中 $q_0$ 为实部，$[q_1, q_2, q_3]^T$为虚部。因为实部为标量，虚部为矢量，所以也可记为：</p><script type="math/tex; mode=display">q=[s,\pmb{v}]^T\tag{3}</script><p>其中 $s $为标量，$\pmb{v}$为虚部的矢量。</p><p><strong>四元数的乘法运算：</strong></p><script type="math/tex; mode=display">\begin{align*}q_a\otimes q_b&=w_aw_b − x_ax_b − y_ay_b − z_az_b\\&+ (w_ax_b + x_aw_b + y_az_b − z_ay_b)i\\&+ (w_ay_b − x_az_b + y_aw_b + z_ax_b) j\\&+ (w_az_b + x_ay_b − y_ax_b + z_aw_b) k.\end{align*}\tag{4}</script><p>或者是：</p><script type="math/tex; mode=display">q_a\otimes q_b=[s_as_b-\pmb{v}_a^T\pmb{v}_b,s_a\pmb{v}_b+s_b\pmb{v}_a+\pmb{v}_a\times\pmb{v}_b]^T\tag{5}</script><p>四元数的其他四则运算，不作具体展开，参阅《视觉SLAM十四讲》。</p><p><strong>四元数表示旋转：</strong></p><p>另外单位四元数可表达任意三维旋转，且无奇异性。如设轴角为$w$和$\theta$，那么它对应的四元数为：</p><script type="math/tex; mode=display">q=[cos\frac{\theta}{2},wsin\frac{\theta}{2}]^T\tag{6}</script><p>利用此性质可推导四元数求导。</p><p><strong>四元数的求导：</strong></p><p>四元数时间导数：设初始旋转为 $q = [s, \pmb{v}]$，然后，发生了角轴为 $w, \theta$ 的旋转（右乘，对应四元数记作$\Delta q=[cos\frac{\theta}{2},wsin\frac{\theta}{2}]^T$），那么 $q $相对该旋转的导数为：</p><script type="math/tex; mode=display">\begin{align*}\underset{\theta \rightarrow 0}{lim}\frac{q\otimes \Delta q-q}{\theta}&=\underset{\theta \rightarrow 0}{lim}\frac{[s \cos\frac{\theta}{2}-\pmb{v}^Tw \sin\frac{\theta}{2},sw \sin\frac{\theta}{2}+cos\frac{\theta}{2}\pmb{v}+\pmb{v}\times w \sin\frac{\theta}{2}]^T-q}{\theta}\\&=\underset{\theta \rightarrow 0}{lim}\frac{[s (\cos\frac{\theta}{2}-1)-\pmb{v}^Tw \sin\frac{\theta}{2},sw \sin\frac{\theta}{2}+(\cos\frac{\theta}{2}-1)\pmb{v}+\pmb{v}\times w \sin\frac{\theta}{2}]^T}{\theta}\\&=[-\frac{1}{2}\pmb{v}^Tw,\frac{1}{2}sw+\frac{1}{2}\pmb{v}\times w]^T\\&=q\otimes[0,\frac{1}{2}w]^T\end{align*}\tag{7}</script><p>因此，若角速度为 $w$，那么旋转的时间导数即为：</p><script type="math/tex; mode=display">\dot q= q\otimes[0,\frac{1}{2}w]^T\tag{8}</script><h2 id="C-李代数"><a href="#C-李代数" class="headerlink" title="C.李代数"></a>C.李代数</h2><p>除了利用四元数求导，亦可利用李代数进行旋转求导。<br>使用旋转矩阵$R$时，角速度为 $w$，那么 $R$ 相对于时间的导数可写作：</p><script type="math/tex; mode=display">\dot R= Rw^{\land}\tag{9}</script><p>该式被称为<strong>泊松公式</strong>（Possion’s equation），其中${\land}$为反对称矩阵算子：</p><script type="math/tex; mode=display">w^{\land}=\begin{bmatrix}0&-w_3&w_2\\w_3&0&-w_1\\-w_2&w_1&0\end{bmatrix}\tag{10}</script><p>其实结合之前的知识，可以发现，这里的$w^{\land}$不就是旋转矩阵对应的李代数$\mathfrak{so}(3)$嘛，十四讲里面用的是$\phi^{\land}$。</p><p><strong>$\mathfrak{so}(3)$导数：</strong></p><p>在优化带有旋转的函数时，通常计算一个增量 $\phi\in \mathfrak{so}(3)$，然后用它更新当前估计值：</p><script type="math/tex; mode=display">R\leftarrow R\ exp(\phi^{\land})\tag{11}</script><p>其中$exp$为$\mathfrak{so}(3)$至$SO(3)$上的指数映射。</p><blockquote><p>注意：</p><blockquote><p>①不同的$R$函数，具体的导数形式也不同</p><p>②在程序中，不必区分$R$是以矩阵存储或是以四元数存储，只需按照该式更新即可。</p></blockquote></blockquote><h2 id="D-扰动模型的雅可比"><a href="#D-扰动模型的雅可比" class="headerlink" title="D.扰动模型的雅可比"></a>D.扰动模型的雅可比</h2><p><strong>常见的一些雅可比：</strong>（以自变量为$R$举例）</p><ul><li>旋转点的左扰动雅可比：</li></ul><p>这里将对$R$进行一次的扰动$\Delta R$加在其对应的李代数$\varphi $上，而非李群上。</p><script type="math/tex; mode=display">\begin{align*}\frac{\partial(Rp)}{\partial \varphi}&=\underset{\varphi\rightarrow0}{lim}\frac{exp(\varphi^{\land})\cdot exp(\phi^{\land})p-exp(\phi^{\land})p}{\varphi}\\&\approx \underset{\varphi\rightarrow0}{lim}\frac{(I+\varphi^{\land})\cdot exp(\phi^{\land})p-exp(\phi^{\land})p}{\varphi} \ \ \ 一阶泰勒展开\\&=\underset{\varphi\rightarrow0}{lim}\frac{\varphi^{\land}Rp}{\varphi} \ \ \ 根据 a^{\land}b=-b^{\and}a\\&=\underset{\varphi\rightarrow0}{lim}\frac{-(Rp)^{\land}\varphi}{\varphi}\\&=-(Rp)^{\land}\end{align*}\tag{12}</script><ul><li>旋转点的右扰动雅可比：</li></ul><script type="math/tex; mode=display">\begin{align*}\frac{\partial(Rp)}{\partial \varphi}&=\underset{\varphi\rightarrow0}{lim}\frac{ exp(\phi^{\land})\cdot exp(\varphi^{\land})p-exp(\phi^{\land})p}{\varphi}\\&\approx \underset{\varphi\rightarrow0}{lim}\frac{ exp(\phi^{\land})\cdot(I+\varphi^{\land})p-exp(\phi^{\land})p}{\varphi} \ \ \ 一阶泰勒展开\\&=\underset{\varphi\rightarrow0}{lim}\frac{R\varphi^{\land}p}{\varphi} \ \ \ 根据 a^{\land}b=-b^{\and}a\\&=\underset{\varphi\rightarrow0}{lim}\frac{-Rp^{\land}\varphi}{\varphi}\\&=-Rp^{\land}\end{align*}\tag{13}</script><ul><li>旋转连乘的雅可比：</li></ul><p>①这里将对$R_2$进行一次的扰动$\Delta R_2$加在其对应的李代数$\phi $上，而非李群上。</p><script type="math/tex; mode=display">\begin{align*}\frac{d\ ln(R_1R_2)^{\lor} }{dR_2}&=\underset{\phi\rightarrow0}{lim}\frac{ln(R_1R_2\cdot exp(\phi^{\land}))^{\lor}-ln(R_1R_2)^{\lor} }{\phi}\\&\approx\underset{\phi\rightarrow0}{lim}\frac{ln(R_1R_2)^{\lor}+J^{-1}_r\phi-ln(R_1R_2)^{\lor} }{\phi}\\&=J^{-1}_r(ln(R_1R_2)^{\lor})\end{align*}\tag{14}</script><p>第一步到第二步使用的是$BCH$近似公式：</p><script type="math/tex; mode=display">\ln (\exp(\phi_{1}^{\land})\exp(\phi_{2}^{\land}) )^{\lor} \approx\left\{ \begin{array}{l}J_l(\phi_{2})^{-1}\phi_{1}+\phi_{2}\ \ \ \ 当\phi_{1}为小量\\J_r(\phi_{1})^{-1}\phi_{2}+\phi_{1}\ \ \ \ 当\phi_{2}为小量    \\\end{array} \right.\tag{15}</script><p>此处就是：对任意$R$</p><script type="math/tex; mode=display">\ln (R\exp(\phi^{\land}) )^{\lor} \approx\ln(R)^{\lor}+J_r^{-1}\phi\tag{16}</script><p>其中$J_r^{-1}$为$SO(3)$上的右雅可比：</p><script type="math/tex; mode=display">J_r^{-1}(\theta w)=\frac{1}{2}\cot\frac{\theta}{2}I+(1-\frac{\theta}{2}\cot\frac{\theta}{2})ww^T+\frac{\theta}{2}w^{\land}\tag{17}</script><p>②这里将对$R_1$进行一次的扰动$\Delta R_1$加在其对应的李代数$\phi $上，而非李群上。</p><script type="math/tex; mode=display">\begin{align*}\frac{d\ ln(R_1R_2)^{\lor} }{dR_2}&=\underset{\phi\rightarrow0}{lim}\frac{ln(R_1\cdot \exp(\phi^{\land})\ R_2)^{\lor}-ln(R_1R_2)^{\lor} }{\phi}\\&=\underset{\phi\rightarrow0}{lim}\frac{ln(R_1R_2\cdot[R_2^T\cdot \exp(\phi^{\land})\ R_2])^{\lor}-ln(R_1R_2)^{\lor} }{\phi}\\&=\underset{\phi\rightarrow0}{lim}\frac{ln(R_1R_2\exp((R_2^T\phi)^{\land}))^{\lor}-ln(R_1R_2)^{\lor} }{\phi}\\&=J^{-1}_r(ln(R_1R_2)^{\lor})R_2^T\end{align*}\tag{18}</script><p>第一步到第二步用到了$sO(3)$的伴随性质：</p><script type="math/tex; mode=display">R^T\exp(\phi^{\land})R=\exp((R^T\phi)^{\land})\tag{19}</script><p>有关 $SE(3)$：由于$ SE(3)$ 李代数性质复杂，在 VIO 中，我们通常使用$SO(3) + t $的形式表达旋转和平移。对平移部分使用矢量更新而非$SE(3) $上的更新。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本课程专注于&lt;strong&gt;视觉 +IMU 融合定位&lt;/strong&gt;的基础理论和实现，作为视觉SLAM 的进阶课程&lt;br&gt;在本课程中，你将学习到的重点内容有：IMU 的工作原理和噪声方程；视觉与 IMU 紧耦合的基础理论；从零开始实现 VIO 紧耦合优化器（仅基于 Eigen）；相比视觉 SLAM 基础课程，本次课程更加注重 IMU 融合的理论推导与实现。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="从零开始手写VIO" scheme="https://lukeyalvin.top/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%89%8B%E5%86%99VIO/"/>
    
    
    <category term="VIO" scheme="https://lukeyalvin.top/tags/VIO/"/>
    
    <category term="刚体运动" scheme="https://lukeyalvin.top/tags/%E5%88%9A%E4%BD%93%E8%BF%90%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>aloam_velodyney源代码深度解析</title>
    <link href="https://lukeyalvin.top/posts/60089.html"/>
    <id>https://lukeyalvin.top/posts/60089.html</id>
    <published>2022-04-18T01:31:17.245Z</published>
    <updated>2022-04-26T03:24:18.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>体验过LOAM代码之后，大多数人应该对源代码有种不太好的印象，我觉得更多是因为LOAM作者受当时发展的局限，没有使用像现在流行的李代数、Eigen、Ceres等，A-LOAM就在其基础上对源代码进行了改进，最明显的就是坐标变化部分引入了Eigen，优化部分使用Ceres自动求导代替LOAM作者手推的ICP优化部分，代码变得十分简洁，但是同时也降低了LOAM算法的效率。尽管如此，这位香港大学的秦师兄写的代码还是很让人佩服的。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p>首先看一下ROS节点图，明显可以发现比LOAM的简洁太多了：</p><p><img src="/images/aloam源码解析/1308994-20200506202232477-859678963.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;体验过LOAM代码之后，大多数人应该对源代码有种不太好的印象，我觉得更多是因为LOAM作者受当时发展的局限，没有使用像现在流行的李代数、Eigen、Ceres等，A-LOAM就在其基础上对源代码进行了改进，最明显的就是坐标变化部分引入了Eigen，优化部分使用Ceres自动求导代替LOAM作者手推的ICP优化部分，代码变得十分简洁，但是同时也降低了LOAM算法的效率。尽管如此，这位香港大学的秦师兄写的代码还是很让人佩服的。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="SLAM项目实践" scheme="https://lukeyalvin.top/categories/SLAM%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="ALOAM" scheme="https://lukeyalvin.top/tags/ALOAM/"/>
    
  </entry>
  
  <entry>
    <title>LOAM源代码深度解析</title>
    <link href="https://lukeyalvin.top/posts/49015.html"/>
    <id>https://lukeyalvin.top/posts/49015.html</id>
    <published>2022-04-13T13:08:50.276Z</published>
    <updated>2022-04-30T02:20:25.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>对于LOAM的论文以及原理清晰之后，我们还需要对论文算法的具体实现做深度剖析，做到将论文的每一部分与代码相对应，并学习LOAM实现的方式。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="Ⅰ-概述"><a href="#Ⅰ-概述" class="headerlink" title="Ⅰ.概述"></a>Ⅰ.概述</h1><p>由于LOAM使用机器人操作系统(ROS)进行管理，所以我们比较关注节点和消息发布与接收的关系，我们可以通过rqt_graph查看所有的节点以及消息之间的关系，代码的框架图：</p><p><img src="/images/LOAM源代码解析/rosgraph_loam-16498556914162.png" alt="rosgraph_loam"></p><p>其中椭圆框代表节点(node)，矩形框代表消息(Message)。</p><h1 id="Ⅱ-scanRegistration"><a href="#Ⅱ-scanRegistration" class="headerlink" title="Ⅱ.scanRegistration"></a>Ⅱ.scanRegistration</h1><p> <span style="color:red;"><strong>节点的主要功能:</strong></span> <span style="color:blue;"><strong>对点云和IMU数据进行预处理，用于特征点的配准。</strong></span> </p><p><img src="/images/LOAM源代码解析/image-20220416144530168.png" alt="image-20220416144530168"></p><h2 id="A-laserCloudHandler"><a href="#A-laserCloudHandler" class="headerlink" title="A.laserCloudHandler"></a>A.laserCloudHandler</h2><p><img src="/images/LOAM源代码解析/image-20220414193914478.png" alt="image-20220414193914478"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扫描周期, velodyne频率10Hz，周期0.1s</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> scanPeriod = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化控制变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> systemDelay = <span class="number">20</span>; <span class="comment">//弃用前20帧初始数据</span></span><br><span class="line"><span class="keyword">int</span> systemInitCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> systemInited = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//激光雷达线数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_SCANS = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点云曲率, 40000为一帧点云中点的最大数量</span></span><br><span class="line"><span class="keyword">float</span> cloudCurvature[<span class="number">40000</span>];</span><br><span class="line"><span class="comment">//曲率点对应的序号</span></span><br><span class="line"><span class="keyword">int</span> cloudSortInd[<span class="number">40000</span>];</span><br><span class="line"><span class="comment">//点是否筛选过标志：0-未筛选过，1-筛选过</span></span><br><span class="line"><span class="keyword">int</span> cloudNeighborPicked[<span class="number">40000</span>];</span><br><span class="line"><span class="comment">//点分类标号:2-代表曲率很大，1-代表曲率比较大,-1-代表曲率很小，0-曲率比较小(其中1包含了2,0包含了1,0和1构成了点云全部的点)</span></span><br><span class="line"><span class="keyword">int</span> cloudLabel[<span class="number">40000</span>];</span><br></pre></td></tr></table></figure><p><code>N_SCANS</code> 是将 <code>3D</code> 的激光点云按照激光的接受器做了个划分，比如 <code>N_SCANS</code>是 $16 $表明是 $16 $线的激光（程序中的默认值，作者用过 <code>velodyne16</code>）。</p><p>论文中存储每个点的曲率用的是数组，因此需要考虑数组的大小，这里设置为了$40000$，另外使用<code>cloudLabel</code>来标记论文中提到的将扫描分割成四个相同的子区域，2-代表曲率很大(sharp)，1-代表曲率比较大(less_sharp)，-1-代表曲率很小(flat)，0-曲率比较小(less_flat)。</p><h3 id="1-线束模型"><a href="#1-线束模型" class="headerlink" title="1.线束模型"></a>1.线束模型</h3><p>对于一堆点云并不是像 LaserScan（二维的数据结构）那样按照角度给出个距离值，保证每次的扫描都能够有相同大小的数据量。PointCloud2 接受到的点云的大小在变化，因此在数据到达需要一些运算来判断点的一些特性。例如下面这段通过计算 pitch 角度判断该点属于哪个<code>Scan</code>。</p><p>(具体查看：<a href="https://lukeyalvin.top/2022/04/11/loam%E8%AE%BA%E6%96%87%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/#A-%E7%BA%BF%E6%9D%9F%E6%A8%A1%E5%9E%8B">loam论文深度解析-Ⅲ.特征提取（点云注册）A.线束模型</a>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lidar扫描线是否旋转过半</span></span><br><span class="line"><span class="keyword">bool</span> halfPassed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> count = cloudSize;</span><br><span class="line">PointType point;</span><br><span class="line">std::vector&lt;pcl::PointCloud&lt;PointType&gt;&gt; <span class="built_in">laserCloudScans</span>(N_SCANS);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cloudSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//坐标轴交换，velodyne lidar的坐标系也转换到z轴向前，x轴向左的右手坐标系</span></span><br><span class="line">    point.x = laserCloudIn.points[i].y;</span><br><span class="line">    point.y = laserCloudIn.points[i].z;</span><br><span class="line">    point.z = laserCloudIn.points[i].x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算点的仰角(根据lidar文档垂直角计算公式),根据仰角排列激光线号，velodyne每两个scan之间间隔2度</span></span><br><span class="line">    <span class="keyword">float</span> angle = <span class="built_in">atan</span>(point.y / <span class="built_in">sqrt</span>(point.x * point.x + point.z * point.z)) * <span class="number">180</span> / M_PI;</span><br><span class="line">    <span class="keyword">int</span> scanID;</span><br><span class="line">    <span class="comment">//仰角四舍五入(加减0.5截断效果等于四舍五入)</span></span><br><span class="line">    <span class="keyword">int</span> roundedAngle = <span class="built_in"><span class="keyword">int</span></span>(angle + (angle &lt; <span class="number">0.0</span> ? <span class="number">-0.5</span> : +<span class="number">0.5</span>));</span><br><span class="line">    <span class="keyword">if</span> (roundedAngle &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    scanID = roundedAngle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    scanID = roundedAngle + (N_SCANS - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//过滤点，只挑选[-15度，+15度]范围内的点,scanID属于[0,15]</span></span><br><span class="line">    <span class="keyword">if</span> (scanID &gt; (N_SCANS - <span class="number">1</span>) || scanID &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【解析】这里8-11行的坐标轴变换，有点绕，作者的意思就是把velodyne lidar的坐标系也转换到z轴向前，x轴向左的右手坐标系：</p><p><img src="/images/LOAM源代码解析/image-20220414153416294.png" alt="image-20220414153416294" style="zoom:50%;" /></p><p>然后就是利用勾股定理与三角函数相关的知识求出仰角$Pitch=atan(z/\sqrt{x^2+y^2})$，即可根据该角度判断点云属于哪条<code>Scan</code>，这样就可以计算出每个点的<code>scanID</code>。</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扫描周期, velodyne频率10Hz，周期0.1s</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> scanPeriod = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">typedef</span> pcl::PointXYZI PointType;</span><br><span class="line">PointType point;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//-0.5 &lt; relTime &lt; 1.5（点旋转的角度与整个周期旋转角度的比率, 即点云中点的相对时间）</span></span><br><span class="line"><span class="keyword">float</span> relTime = (ori - startOri) / (endOri - startOri);</span><br><span class="line"><span class="comment">//点强度=线号+点相对时间（即一个整数+一个小数，整数部分是线号，小数部分是该点的相对时间）,匀速扫描：根据当前扫描的角度和扫描周期计算相对扫描起始位置的时间</span></span><br><span class="line">point.intensity = scanID + scanPeriod * relTime;</span><br></pre></td></tr></table></figure><p>【解析】点云中点的相对时间是用当前的点旋转的角度占整个周期旋转角度的比，然后使用<code>PointXYZI</code>点云类型存储点云数据，整数部分：scan ID，小数部分：每个点扫描的时间。</p><blockquote><p><code>PointXYZI</code>是一个简单的<code>XYZ</code>坐标加<code>intensity</code>的<code>point</code>类型，理想情况下，这四个变量将新建单独一个结构体，并且满足存储对齐，然而，由于<code>point</code>的大部分操作会把<code>data[4]</code>元素设置成$0$或$1$（用于变换），不能让<code>intensity</code>与<code>xyz</code>在同一个结构体中，如果这样的话其内容将会被覆盖。例如，两个点的点积会把他们的第四个元素设置成0，否则该点积没有意义，等等。因此，对于兼容存储对齐，用三个额外的浮点数来填补intensity，这样在存储方面效率较低，但是符合存储对齐要求，运行效率较高。</p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//IMU部分代码.......</span></span><br><span class="line">    laserCloudScans[scanID].<span class="built_in">push_back</span>(point);<span class="comment">//将每个补偿矫正（IMU部分代码）的点放入对应线号的容器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得有效范围内的点的数量</span></span><br><span class="line">cloudSize = count;</span><br><span class="line"></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">laserCloud</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_SCANS; i++)</span><br><span class="line">&#123; <span class="comment">//将所有的点按照线号从小到大放入一个容器</span></span><br><span class="line">    *laserCloud += laserCloudScans[i];<span class="comment">// 更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【解析】将点压入到每个线中，然后循环迭代每一条<code>Scan</code>,更新到总的点云<code>laserCloud</code>。</p><hr><h3 id="2-插入IMU数据"><a href="#2-插入IMU数据" class="headerlink" title="2.插入IMU数据"></a>2.插入IMU数据</h3><p>插入<code>IMU</code>数据的目的就是校正点云畸变，论文中提到蓝色线段表示扫描$k$时感知到的点云 $P_k$，在$k$次扫描结束时，经过<strong>畸变校正</strong>之后将$P_k$重新投影到时间戳$t_{k+1}$，得到绿色线段$\overline{P}_k$，这里的畸变校正使用的就是插入<code>IMU</code>数据进行补偿来进行校正的。通过代码看一下如何使用<code>IMU</code>进行校正的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lidar扫描线是否旋转过半</span></span><br><span class="line"><span class="keyword">bool</span> halfPassed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> count = cloudSize;</span><br><span class="line">PointType point;</span><br><span class="line">std::vector&lt;pcl::PointCloud&lt;PointType&gt;&gt; <span class="built_in">laserCloudScans</span>(N_SCANS);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cloudSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 线束模型部分的代码....</span></span><br><span class="line">  <span class="keyword">float</span> relTime = (ori - startOri) / (endOri - startOri);</span><br><span class="line">  <span class="comment">//点强度=线号+点相对时间（即一个整数+一个小数，整数部分是线号，小数部分是该点的相对时间）,匀速扫描：根据当前扫描的角度和扫描周期计算相对扫描起始位置的时间</span></span><br><span class="line">  point.intensity = scanID + scanPeriod * relTime;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//点时间=点云时间+周期时间</span></span><br><span class="line">  <span class="keyword">if</span> (imuPointerLast &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;                                         <span class="comment">//如果收到IMU数据,使用IMU矫正点云畸变</span></span><br><span class="line">    <span class="keyword">float</span> pointTime = relTime * scanPeriod; <span class="comment">//计算点的周期时间</span></span><br><span class="line">    <span class="comment">//寻找是否有点云的时间戳小于IMU的时间戳的IMU位置:imuPointerFront</span></span><br><span class="line">    <span class="keyword">while</span> (imuPointerFront != imuPointerLast)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (timeScanCur + pointTime &lt; imuTime[imuPointerFront])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      imuPointerFront = (imuPointerFront + <span class="number">1</span>) % imuQueLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeScanCur + pointTime &gt; imuTime[imuPointerFront])</span><br><span class="line">    &#123; <span class="comment">//没找到,此时imuPointerFront==imtPointerLast,只能以当前收到的最新的IMU的速度，位移，欧拉角作为当前点的速度，位移，欧拉角使用</span></span><br><span class="line">      imuRollCur = imuRoll[imuPointerFront];</span><br><span class="line">      imuPitchCur = imuPitch[imuPointerFront];</span><br><span class="line">      imuYawCur = imuYaw[imuPointerFront];</span><br><span class="line"></span><br><span class="line">      imuVeloXCur = imuVeloX[imuPointerFront];</span><br><span class="line">      imuVeloYCur = imuVeloY[imuPointerFront];</span><br><span class="line">      imuVeloZCur = imuVeloZ[imuPointerFront];</span><br><span class="line"></span><br><span class="line">      imuShiftXCur = imuShiftX[imuPointerFront];</span><br><span class="line">      imuShiftYCur = imuShiftY[imuPointerFront];</span><br><span class="line">      imuShiftZCur = imuShiftZ[imuPointerFront];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; <span class="comment">//找到了点云时间戳小于IMU时间戳的IMU位置,则该点必处于imuPointerBack和imuPointerFront之间，据此线性插值，计算点云点的速度，位移和欧拉角</span></span><br><span class="line">      <span class="keyword">int</span> imuPointerBack = (imuPointerFront + imuQueLength - <span class="number">1</span>) % imuQueLength;</span><br><span class="line">      <span class="comment">//按时间距离计算权重分配比率,也即线性插值</span></span><br><span class="line">      <span class="keyword">float</span> ratioFront = (timeScanCur + pointTime - imuTime[imuPointerBack]) / (imuTime[imuPointerFront] - imuTime[imuPointerBack]);</span><br><span class="line">      <span class="keyword">float</span> ratioBack = (imuTime[imuPointerFront] - timeScanCur - pointTime) / (imuTime[imuPointerFront] - imuTime[imuPointerBack]);</span><br><span class="line"></span><br><span class="line">      imuRollCur = imuRoll[imuPointerFront] * ratioFront + imuRoll[imuPointerBack] * ratioBack;</span><br><span class="line">      imuPitchCur = imuPitch[imuPointerFront] * ratioFront + imuPitch[imuPointerBack] * ratioBack;</span><br><span class="line">      <span class="keyword">if</span> (imuYaw[imuPointerFront] - imuYaw[imuPointerBack] &gt; M_PI)</span><br><span class="line">      &#123;</span><br><span class="line">        imuYawCur = imuYaw[imuPointerFront] * ratioFront + (imuYaw[imuPointerBack] + <span class="number">2</span> * M_PI) * ratioBack;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (imuYaw[imuPointerFront] - imuYaw[imuPointerBack] &lt; -M_PI)</span><br><span class="line">      &#123;</span><br><span class="line">        imuYawCur = imuYaw[imuPointerFront] * ratioFront + (imuYaw[imuPointerBack] - <span class="number">2</span> * M_PI) * ratioBack;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        imuYawCur = imuYaw[imuPointerFront] * ratioFront + imuYaw[imuPointerBack] * ratioBack;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//本质:imuVeloXCur = imuVeloX[imuPointerback] + (imuVelX[imuPointerFront]-imuVelX[imuPoniterBack])*ratioFront</span></span><br><span class="line">      imuVeloXCur = imuVeloX[imuPointerFront] * ratioFront + imuVeloX[imuPointerBack] * ratioBack;</span><br><span class="line">      imuVeloYCur = imuVeloY[imuPointerFront] * ratioFront + imuVeloY[imuPointerBack] * ratioBack;</span><br><span class="line">      imuVeloZCur = imuVeloZ[imuPointerFront] * ratioFront + imuVeloZ[imuPointerBack] * ratioBack;</span><br><span class="line"></span><br><span class="line">      imuShiftXCur = imuShiftX[imuPointerFront] * ratioFront + imuShiftX[imuPointerBack] * ratioBack;</span><br><span class="line">      imuShiftYCur = imuShiftY[imuPointerFront] * ratioFront + imuShiftY[imuPointerBack] * ratioBack;</span><br><span class="line">      imuShiftZCur = imuShiftZ[imuPointerFront] * ratioFront + imuShiftZ[imuPointerBack] * ratioBack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">    &#123; <span class="comment">//如果是第一个点,记住点云起始位置的速度，位移，欧拉角</span></span><br><span class="line">      imuRollStart = imuRollCur;</span><br><span class="line">      imuPitchStart = imuPitchCur;</span><br><span class="line">      imuYawStart = imuYawCur;</span><br><span class="line"></span><br><span class="line">      imuVeloXStart = imuVeloXCur;</span><br><span class="line">      imuVeloYStart = imuVeloYCur;</span><br><span class="line">      imuVeloZStart = imuVeloZCur;</span><br><span class="line"></span><br><span class="line">      imuShiftXStart = imuShiftXCur;</span><br><span class="line">      imuShiftYStart = imuShiftYCur;</span><br><span class="line">      imuShiftZStart = imuShiftZCur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123; <span class="comment">//计算之后每个点相对于第一个点的由于加减速非匀速运动产生的位移速度畸变，并对点云中的每个点位置信息重新补偿矫正</span></span><br><span class="line">      <span class="built_in">ShiftToStartIMU</span>(pointTime);</span><br><span class="line">      <span class="built_in">VeloToStartIMU</span>();</span><br><span class="line">      <span class="built_in">TransformToStartIMU</span>(&amp;point);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  laserCloudScans[scanID].<span class="built_in">push_back</span>(point); <span class="comment">//将每个补偿矫正的点放入对应线号的容器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截止到现在，我们已经把一帧杂乱的点云数据有条理的放在了容器里</p><h3 id="3-曲率计算"><a href="#3-曲率计算" class="headerlink" title="3.曲率计算"></a>3.曲率计算</h3><p>在前面的论文深度剖析中，我们提到点云的注册就是进行特征提取，而LOAM进行特征提取采用的是曲率$c$进行判断的，提取的特征主要为边缘点和平面点两种特征。</p><p><strong>平面光滑度</strong>$c$：</p><script type="math/tex; mode=display">c=\frac{1}{|S|·\parallel X^L_{(k,i)}\parallel} \sum_{j\in S,j\ne i} \parallel (X^L_{(k,i)}-X^L_{(k,j)}) \parallel \tag{1}</script><p><strong>代码部分：</strong></p><p>这里计算曲率的方式和论文中有点不同，计算以某点与其相邻的$10$个点所构成的平面在该点出的曲率：</p><p>由曲率公式知：$K=1/R$，因此为简化计算可通过$10$个向量的和向量的模长表示其在该点处曲率半径的长，因此$R×R$可用来表示曲率的大小 $R×R$越大，该点处越不平坦。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> scanCount = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 选取该点周围十个点（向前找五个，向后找五个），将这十个点的坐标分别和该点作差，得到每一维坐标的差值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; cloudSize - <span class="number">5</span>; i++) </span><br><span class="line">&#123;<span class="comment">//使用每个点的前后五个点计算曲率，因此前五个与最后五个点跳过</span></span><br><span class="line">    <span class="keyword">float</span> diffX = laserCloud-&gt;points[i - <span class="number">5</span>].x + laserCloud-&gt;points[i - <span class="number">4</span>].x </span><br><span class="line">                + laserCloud-&gt;points[i - <span class="number">3</span>].x + laserCloud-&gt;points[i - <span class="number">2</span>].x </span><br><span class="line">                + laserCloud-&gt;points[i - <span class="number">1</span>].x - <span class="number">10</span> * laserCloud-&gt;points[i].x </span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">1</span>].x + laserCloud-&gt;points[i + <span class="number">2</span>].x</span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">3</span>].x + laserCloud-&gt;points[i + <span class="number">4</span>].x</span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">5</span>].x;</span><br><span class="line">    <span class="keyword">float</span> diffY = laserCloud-&gt;points[i - <span class="number">5</span>].y + laserCloud-&gt;points[i - <span class="number">4</span>].y </span><br><span class="line">                + laserCloud-&gt;points[i - <span class="number">3</span>].y + laserCloud-&gt;points[i - <span class="number">2</span>].y </span><br><span class="line">                + laserCloud-&gt;points[i - <span class="number">1</span>].y - <span class="number">10</span> * laserCloud-&gt;points[i].y </span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">1</span>].y + laserCloud-&gt;points[i + <span class="number">2</span>].y</span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">3</span>].y + laserCloud-&gt;points[i + <span class="number">4</span>].y</span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">5</span>].y;</span><br><span class="line">    <span class="keyword">float</span> diffZ = laserCloud-&gt;points[i - <span class="number">5</span>].z + laserCloud-&gt;points[i - <span class="number">4</span>].z </span><br><span class="line">                + laserCloud-&gt;points[i - <span class="number">3</span>].z + laserCloud-&gt;points[i - <span class="number">2</span>].z </span><br><span class="line">                + laserCloud-&gt;points[i - <span class="number">1</span>].z - <span class="number">10</span> * laserCloud-&gt;points[i].z </span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">1</span>].z + laserCloud-&gt;points[i + <span class="number">2</span>].z</span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">3</span>].z + laserCloud-&gt;points[i + <span class="number">4</span>].z</span><br><span class="line">                + laserCloud-&gt;points[i + <span class="number">5</span>].z;</span><br><span class="line">    <span class="comment">//曲率计算（将三个维度的差值求平方和得到R×R）</span></span><br><span class="line">    cloudCurvature[i] = diffX * diffX + diffY * diffY + diffZ * diffZ;</span><br><span class="line">    <span class="comment">//记录曲率点的索引</span></span><br><span class="line">    cloudSortInd[i] = i;</span><br><span class="line">    <span class="comment">//初始时，点全未筛选过</span></span><br><span class="line">    cloudNeighborPicked[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始化为less flat点</span></span><br><span class="line">    cloudLabel[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个scan，只有第一个符合的点会进来，因为每个scan的点都在一起存放</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloud-&gt;points[i].intensity) != scanCount) </span><br><span class="line">    &#123;</span><br><span class="line">      scanCount = <span class="built_in"><span class="keyword">int</span></span>(laserCloud-&gt;points[i].intensity);<span class="comment">//控制每个scan只进入第一个点</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//曲率只取同一个scan计算出来的，跨scan计算的曲率非法，排除，也即排除每个scan的前后五个点</span></span><br><span class="line">      <span class="keyword">if</span> (scanCount &gt; <span class="number">0</span> &amp;&amp; scanCount &lt; N_SCANS) </span><br><span class="line">      &#123;</span><br><span class="line">        scanStartInd[scanCount] = i + <span class="number">5</span>;<span class="comment">// 该scan的起始点位置的索引（滤出前5个点）</span></span><br><span class="line">        scanEndInd[scanCount - <span class="number">1</span>] = i - <span class="number">5</span>;  <span class="comment">// 该scan的终止点位置的索引(滤出后5个点)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一个scan曲率点有效点序从第5个开始，最后一个激光线结束点序size-5</span></span><br><span class="line">scanStartInd[<span class="number">0</span>] = <span class="number">5</span>;<span class="comment">// 第一条线的起始位置</span></span><br><span class="line">scanEndInd.<span class="built_in">back</span>() = cloudSize - <span class="number">5</span>;  <span class="comment">// 最后一条线的终止位置</span></span><br></pre></td></tr></table></figure><p>【解析】：这里对所有的点云的曲率进行了计算，由于这里使用的方法是某个点云的前后各五点与该点进行作差处理，所以循环的开始就跳过了前后各5个点云的计算。因为是按照线的序列存储，因此接下来能够得到起始和终止的 index。</p><h3 id="4-排除不可考点"><a href="#4-排除不可考点" class="headerlink" title="4.排除不可考点"></a>4.排除不可考点</h3><p>参照论文对与点位筛选的条件：1. 平面/直线与激光近似平行的点不能要； 2. 被遮挡的边缘点不能要</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//挑选点，排除容易被斜面挡住的点以及离群点，有些点容易被斜面挡住，而离群点可能出现带有偶然性，这些情况都可能导致前后两次扫描不能被同时看到</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt; cloudSize - <span class="number">6</span>; i++)</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="comment">/*2. 被遮挡的边缘点不能要*/</span></span><br><span class="line">    <span class="comment">//与后一个点差值，所以减6</span></span><br><span class="line">    <span class="keyword">float</span> diffX = laserCloud-&gt;points[i + <span class="number">1</span>].x - laserCloud-&gt;points[i].x;</span><br><span class="line">    <span class="keyword">float</span> diffY = laserCloud-&gt;points[i + <span class="number">1</span>].y - laserCloud-&gt;points[i].y;</span><br><span class="line">    <span class="keyword">float</span> diffZ = laserCloud-&gt;points[i + <span class="number">1</span>].z - laserCloud-&gt;points[i].z;</span><br><span class="line">    <span class="comment">//计算有效曲率点与后一个点之间的距离平方和</span></span><br><span class="line">    <span class="keyword">float</span> diff = diffX * diffX + diffY * diffY + diffZ * diffZ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (diff &gt; <span class="number">0.1</span>)</span><br><span class="line">    &#123; <span class="comment">//前提:两个点之间距离要大于0.1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//点的深度</span></span><br><span class="line">      <span class="keyword">float</span> depth1 = <span class="built_in">sqrt</span>(laserCloud-&gt;points[i].x * laserCloud-&gt;points[i].x +</span><br><span class="line">                          laserCloud-&gt;points[i].y * laserCloud-&gt;points[i].y +</span><br><span class="line">                          laserCloud-&gt;points[i].z * laserCloud-&gt;points[i].z);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//后一个点的深度</span></span><br><span class="line">      <span class="keyword">float</span> depth2 = <span class="built_in">sqrt</span>(laserCloud-&gt;points[i + <span class="number">1</span>].x * laserCloud-&gt;points[i + <span class="number">1</span>].x +</span><br><span class="line">                          laserCloud-&gt;points[i + <span class="number">1</span>].y * laserCloud-&gt;points[i + <span class="number">1</span>].y +</span><br><span class="line">                          laserCloud-&gt;points[i + <span class="number">1</span>].z * laserCloud-&gt;points[i + <span class="number">1</span>].z);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//按照两点的深度的比例，将深度较大的点拉回后计算距离</span></span><br><span class="line">      <span class="keyword">if</span> (depth1 &gt; depth2)</span><br><span class="line">      &#123;</span><br><span class="line">        diffX = laserCloud-&gt;points[i + <span class="number">1</span>].x - laserCloud-&gt;points[i].x * depth2 / depth1;</span><br><span class="line">        diffY = laserCloud-&gt;points[i + <span class="number">1</span>].y - laserCloud-&gt;points[i].y * depth2 / depth1;</span><br><span class="line">        diffZ = laserCloud-&gt;points[i + <span class="number">1</span>].z - laserCloud-&gt;points[i].z * depth2 / depth1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//边长比也即是弧度值，若小于0.1，说明夹角比较小，斜面比较陡峭,点深度变化比较剧烈,点处在近似与激光束平行的斜面上</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sqrt</span>(diffX * diffX + diffY * diffY + diffZ * diffZ) / depth2 &lt; <span class="number">0.1</span>)</span><br><span class="line">        &#123; <span class="comment">//排除容易被斜面挡住的点</span></span><br><span class="line">          <span class="comment">//该点及前面五个点（大致都在斜面上）全部置为筛选过</span></span><br><span class="line">          cloudNeighborPicked[i - <span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i - <span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i - <span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i - <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        diffX = laserCloud-&gt;points[i + <span class="number">1</span>].x * depth1 / depth2 - laserCloud-&gt;points[i].x;</span><br><span class="line">        diffY = laserCloud-&gt;points[i + <span class="number">1</span>].y * depth1 / depth2 - laserCloud-&gt;points[i].y;</span><br><span class="line">        diffZ = laserCloud-&gt;points[i + <span class="number">1</span>].z * depth1 / depth2 - laserCloud-&gt;points[i].z;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sqrt</span>(diffX * diffX + diffY * diffY + diffZ * diffZ) / depth1 &lt; <span class="number">0.1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          cloudNeighborPicked[i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i + <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i + <span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i + <span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i + <span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">          cloudNeighborPicked[i + <span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*1. 平面/直线与激光近似平行的点不能要；*/</span></span><br><span class="line">    <span class="keyword">float</span> diffX2 = laserCloud-&gt;points[i].x - laserCloud-&gt;points[i - <span class="number">1</span>].x;</span><br><span class="line">    <span class="keyword">float</span> diffY2 = laserCloud-&gt;points[i].y - laserCloud-&gt;points[i - <span class="number">1</span>].y;</span><br><span class="line">    <span class="keyword">float</span> diffZ2 = laserCloud-&gt;points[i].z - laserCloud-&gt;points[i - <span class="number">1</span>].z;</span><br><span class="line">    <span class="comment">//与前一个点的距离平方和</span></span><br><span class="line">    <span class="keyword">float</span> diff2 = diffX2 * diffX2 + diffY2 * diffY2 + diffZ2 * diffZ2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点深度的平方和</span></span><br><span class="line">    <span class="keyword">float</span> dis = laserCloud-&gt;points[i].x * laserCloud-&gt;points[i].x + laserCloud-&gt;points[i].y * laserCloud-&gt;points[i].y + laserCloud-&gt;points[i].z * laserCloud-&gt;points[i].z;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与前后点的平方和都大于深度平方和的万分之二，这些点视为离群点，包括陡斜面上的点，强烈凸凹点和空旷区域中的某些点，置为筛选过，弃用</span></span><br><span class="line">    <span class="keyword">if</span> (diff &gt; <span class="number">0.0002</span> * dis &amp;&amp; diff2 &gt; <span class="number">0.0002</span> * dis)</span><br><span class="line">    &#123;</span><br><span class="line">      cloudNeighborPicked[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>【解析】：遍历所有点（除去前五个和后六个），判断该点及其周边点是否可以作为为特征点位：当某点及其后点间的距离平方大于某阈值$a$（说明这两点有一定距离），且两向量夹角小于某阈值$b$时（夹角小就可能存在遮挡），将其一侧的临近$6$个点设为不可标记为特征点的点；若某点到其前后两点的距离均大于$c$倍的该点深度，则该点判定为不可标记特征点的点（入射角越小，点间距越大，即激光发射方向与投射到的平面越近似水平）。</p><h3 id="5-边缘点-平面点判断与存储"><a href="#5-边缘点-平面点判断与存储" class="headerlink" title="5.边缘点/平面点判断与存储"></a>5.边缘点/平面点判断与存储</h3><p>这部分代码比较长，现把整个代码结构概览一下：</p><ul><li>首先是相关的变量定义</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个scan曲率点有效点序从第5个开始，最后一个激光线结束点序size-5</span></span><br><span class="line">scanStartInd[<span class="number">0</span>] = <span class="number">5</span>;<span class="comment">// 第一条线的起始位置</span></span><br><span class="line">scanEndInd.<span class="built_in">back</span>() = cloudSize - <span class="number">5</span>;  <span class="comment">// 最后一条线的终止位置</span></span><br><span class="line"><span class="comment">// 用于提取边缘点</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt; cornerPointsSharp;     <span class="comment">//曲率特别大的边缘点（sharp）</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt; cornerPointsLessSharp; <span class="comment">//曲率大的边缘点（less_sharp）</span></span><br><span class="line"><span class="comment">// 用于提取平面点</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt; surfPointsFlat;        <span class="comment">//曲率特别小的平面点（flat）</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt; surfPointsLessFlat;    <span class="comment">//曲率特小的平面点（less_flat）</span></span><br></pre></td></tr></table></figure><p>【解析】：至此，我们得到了一组有条理的点云，且把那些与我们想提取的特征不符的点标记了出来，但是为了使得特征点均匀分布在环境中，将一次扫描划分为$4$个独立的子区域，每个子区域最多提供$2$个边缘点和$4$个平面点。我们只需要预先设定好阈值，就可以轻松加随意的将这些点分类了。</p><hr><ul><li>最主要的部分就是下面这个循环：</li></ul><p><img src="/images/LOAM源代码解析/image-20220414184417130.png" alt="image-20220414184417130"></p><p>【解析】：这里作者将每一线划分为等间距的 $6 $段分别处理，每一段的点按照曲率升序排列。<code>cloudSortInd</code>是对曲率排序得到的序列。</p><blockquote><p>为啥分成六等份？</p><p>这里作者将360°分成六等份，每一份去提取相同的特征点。这样做的目的主要是为了使得特征点的分配更加均匀。如果不这么操作，很容易出现某一个视角区域大曲率的点特别多，而某些视角区域却特别少，造成特征点提取的不均匀，大都集中在某个特别窄的视角内，这会使得在求解或优化的时候造成病态。</p></blockquote><ul><li>按曲率从小到大冒泡排序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = sp + <span class="number">1</span>; k &lt;= ep; k++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = k; l &gt;= sp + <span class="number">1</span>; l--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果后面曲率点大于前面，则交换</span></span><br><span class="line">        <span class="keyword">if</span> (cloudCurvature[cloudSortInd[l]] &lt; cloudCurvature[cloudSortInd[l - <span class="number">1</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = cloudSortInd[l - <span class="number">1</span>];</span><br><span class="line">            cloudSortInd[l - <span class="number">1</span>] = cloudSortInd[l];</span><br><span class="line">            cloudSortInd[l] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>挑选边缘特征点：每个分段的曲率很大和比较大的点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//曲率点对应的序号</span></span><br><span class="line"><span class="keyword">int</span> cloudSortInd[<span class="number">40000</span>];</span><br><span class="line"><span class="comment">//点是否筛选过标志：0-未筛选过，1-筛选过</span></span><br><span class="line"><span class="keyword">int</span> cloudNeighborPicked[<span class="number">40000</span>];</span><br><span class="line"><span class="comment">//点分类标号:2-代表曲率很大，1-代表曲率比较大,-1-代表曲率很小，0-曲率比较小(其中1包含了2,0包含了1,0和1构成了点云全部的点)</span></span><br><span class="line"><span class="keyword">int</span> cloudLabel[<span class="number">40000</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//挑选每个分段的曲率很大和比较大的点</span></span><br><span class="line"><span class="keyword">int</span> largestPickedNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = ep; k &gt;= sp; k--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ind = cloudSortInd[k]; <span class="comment">//曲率最大点的点序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果曲率大的点，曲率的确比较大（阈值大于0.1），并且未被筛选过滤掉（cloudNeighborPicked=0）</span></span><br><span class="line">    <span class="keyword">if</span> (cloudNeighborPicked[ind] == <span class="number">0</span> &amp;&amp; cloudCurvature[ind] &gt; <span class="number">0.1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        largestPickedNum++;</span><br><span class="line">        <span class="keyword">if</span> (largestPickedNum &lt;= <span class="number">2</span>)</span><br><span class="line">        &#123;                      <span class="comment">//挑选曲率最大的前2个点放入sharp点集合</span></span><br><span class="line">            cloudLabel[ind] = <span class="number">2</span>; <span class="comment">// 2代表点曲率很大</span></span><br><span class="line">            cornerPointsSharp.<span class="built_in">push_back</span>(laserCloud-&gt;points[ind]);</span><br><span class="line">            cornerPointsLessSharp.<span class="built_in">push_back</span>(laserCloud-&gt;points[ind]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (largestPickedNum &lt;= <span class="number">20</span>)</span><br><span class="line">        &#123;                      <span class="comment">//挑选曲率最大的前20个点放入less sharp点集合</span></span><br><span class="line">            cloudLabel[ind] = <span class="number">1</span>; <span class="comment">// 1代表点曲率比较尖锐</span></span><br><span class="line">            cornerPointsLessSharp.<span class="built_in">push_back</span>(laserCloud-&gt;points[ind]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cloudNeighborPicked[ind] = <span class="number">1</span>; <span class="comment">//筛选标志置位</span></span><br><span class="line">        <span class="comment">//将曲率比较大的点的前后各5个连续距离比较近的点筛选出去，防止特征点聚集，使得特征点在每个方向上尽量分布均匀</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= <span class="number">5</span>; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span> diffX = laserCloud-&gt;points[ind + l].x - laserCloud-&gt;points[ind + l - <span class="number">1</span>].x;</span><br><span class="line">            <span class="keyword">float</span> diffY = laserCloud-&gt;points[ind + l].y - laserCloud-&gt;points[ind + l - <span class="number">1</span>].y;</span><br><span class="line">            <span class="keyword">float</span> diffZ = laserCloud-&gt;points[ind + l].z - laserCloud-&gt;points[ind + l - <span class="number">1</span>].z;</span><br><span class="line">            <span class="keyword">if</span> (diffX * diffX + diffY * diffY + diffZ * diffZ &gt; <span class="number">0.05</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cloudNeighborPicked[ind + l] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">-1</span>; l &gt;= <span class="number">-5</span>; l--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span> diffX = laserCloud-&gt;points[ind + l].x - laserCloud-&gt;points[ind + l + <span class="number">1</span>].x;</span><br><span class="line">            <span class="keyword">float</span> diffY = laserCloud-&gt;points[ind + l].y - laserCloud-&gt;points[ind + l + <span class="number">1</span>].y;</span><br><span class="line">            <span class="keyword">float</span> diffZ = laserCloud-&gt;points[ind + l].z - laserCloud-&gt;points[ind + l + <span class="number">1</span>].z;</span><br><span class="line">            <span class="keyword">if</span> (diffX * diffX + diffY * diffY + diffZ * diffZ &gt; <span class="number">0.05</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cloudNeighborPicked[ind + l] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【解析】：对每个段进行循环迭代，将曲率比较大的（代码中定义阈值为0.1），而且要求该点并且未被筛选过滤掉，经过冒泡排序后，所有的曲率都已经完成排序，我们将前2个曲率最大的存入为“sharp”点集合，将前20曲率最大存入“less_sharp”点集合；为了使得特征点在每个方向上尽量分布均匀，不聚集，将曲率比较大的点的前后各5个连续距离比较近的点筛选出去。</p><ul><li>挑选平面特征点：每个分段的曲率很小比较小的点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//挑选每个分段的曲率很小比较小的点</span></span><br><span class="line"><span class="keyword">int</span> smallestPickedNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = sp; k &lt;= ep; k++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ind = cloudSortInd[k];</span><br><span class="line">    <span class="comment">//如果曲率的确比较小，并且未被筛选出</span></span><br><span class="line">    <span class="keyword">if</span> (cloudNeighborPicked[ind] == <span class="number">0</span> &amp;&amp; cloudCurvature[ind] &lt; <span class="number">0.1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cloudLabel[ind] = <span class="number">-1</span>; <span class="comment">//-1代表曲率很小的点</span></span><br><span class="line">        surfPointsFlat.<span class="built_in">push_back</span>(laserCloud-&gt;points[ind]);</span><br><span class="line"></span><br><span class="line">        smallestPickedNum++;</span><br><span class="line">        <span class="keyword">if</span> (smallestPickedNum &gt;= <span class="number">4</span>)</span><br><span class="line">        &#123; <span class="comment">//只选最小的四个，剩下的Label==0,就都是曲率比较小的</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cloudNeighborPicked[ind] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= <span class="number">5</span>; l++)</span><br><span class="line">        &#123; <span class="comment">//同样防止特征点聚集</span></span><br><span class="line">            <span class="keyword">float</span> diffX = laserCloud-&gt;points[ind + l].x - laserCloud-&gt;points[ind + l - <span class="number">1</span>].x;</span><br><span class="line">            <span class="keyword">float</span> diffY = laserCloud-&gt;points[ind + l].y - laserCloud-&gt;points[ind + l - <span class="number">1</span>].y;</span><br><span class="line">            <span class="keyword">float</span> diffZ = laserCloud-&gt;points[ind + l].z - laserCloud-&gt;points[ind + l - <span class="number">1</span>].z;</span><br><span class="line">            <span class="keyword">if</span> (diffX * diffX + diffY * diffY + diffZ * diffZ &gt; <span class="number">0.05</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cloudNeighborPicked[ind + l] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">-1</span>; l &gt;= <span class="number">-5</span>; l--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span> diffX = laserCloud-&gt;points[ind + l].x - laserCloud-&gt;points[ind + l + <span class="number">1</span>].x;</span><br><span class="line">            <span class="keyword">float</span> diffY = laserCloud-&gt;points[ind + l].y - laserCloud-&gt;points[ind + l + <span class="number">1</span>].y;</span><br><span class="line">            <span class="keyword">float</span> diffZ = laserCloud-&gt;points[ind + l].z - laserCloud-&gt;points[ind + l + <span class="number">1</span>].z;</span><br><span class="line">            <span class="keyword">if</span> (diffX * diffX + diffY * diffY + diffZ * diffZ &gt; <span class="number">0.05</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cloudNeighborPicked[ind + l] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【解析】：这里与边缘特征点的选取大同小异，只不过这里选择了四个平面特征点。</p><ul><li>将剩余的点（包括之前被排除的点）全部归入平面点中less flat类别中</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将剩余的点（包括之前被排除的点）全部归入平面点中less flat类别中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = sp; k &lt;= ep; k++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (cloudLabel[k] &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        surfPointsLessFlatScan-&gt;<span class="built_in">push_back</span>(laserCloud-&gt;points[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后对每个分段less flat的点进行体素栅格滤波</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于less flat点最多，对每个分段less flat的点进行体素栅格滤波</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt; surfPointsLessFlatScanDS;</span><br><span class="line">pcl::VoxelGrid&lt;PointType&gt; downSizeFilter;</span><br><span class="line">downSizeFilter.<span class="built_in">setInputCloud</span>(surfPointsLessFlatScan);</span><br><span class="line">downSizeFilter.<span class="built_in">setLeafSize</span>(<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>);</span><br><span class="line">downSizeFilter.<span class="built_in">filter</span>(surfPointsLessFlatScanDS);</span><br><span class="line"><span class="comment">// less flat点汇总</span></span><br><span class="line">surfPointsLessFlat += surfPointsLessFlatScanDS;</span><br></pre></td></tr></table></figure><p>收尾部分：最后作者用 4 个 pcl::Point XYZ 类型的数组来存储 IMU 的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">laserCloudHandler</span><span class="params">(<span class="keyword">const</span> sensor_msgs::PointCloud2ConstPtr &amp;laserCloudMsg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//.....</span></span><br><span class="line">  <span class="comment">// publish消除非匀速运动畸变后的所有的点</span></span><br><span class="line">  sensor_msgs::PointCloud2 laserCloudOutMsg;</span><br><span class="line">  pcl::<span class="built_in">toROSMsg</span>(*laserCloud, laserCloudOutMsg);</span><br><span class="line">  laserCloudOutMsg.header.stamp = laserCloudMsg-&gt;header.stamp;</span><br><span class="line">  laserCloudOutMsg.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">  pubLaserCloud.<span class="built_in">publish</span>(laserCloudOutMsg);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// publish消除非匀速运动畸变后的平面点和边沿点</span></span><br><span class="line">  sensor_msgs::PointCloud2 cornerPointsSharpMsg;</span><br><span class="line">  pcl::<span class="built_in">toROSMsg</span>(cornerPointsSharp, cornerPointsSharpMsg);</span><br><span class="line">  cornerPointsSharpMsg.header.stamp = laserCloudMsg-&gt;header.stamp;</span><br><span class="line">  cornerPointsSharpMsg.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">  pubCornerPointsSharp.<span class="built_in">publish</span>(cornerPointsSharpMsg);</span><br><span class="line"></span><br><span class="line">  sensor_msgs::PointCloud2 cornerPointsLessSharpMsg;</span><br><span class="line">  pcl::<span class="built_in">toROSMsg</span>(cornerPointsLessSharp, cornerPointsLessSharpMsg);</span><br><span class="line">  cornerPointsLessSharpMsg.header.stamp = laserCloudMsg-&gt;header.stamp;</span><br><span class="line">  cornerPointsLessSharpMsg.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">  pubCornerPointsLessSharp.<span class="built_in">publish</span>(cornerPointsLessSharpMsg);</span><br><span class="line"></span><br><span class="line">  sensor_msgs::PointCloud2 surfPointsFlat2;</span><br><span class="line">  pcl::<span class="built_in">toROSMsg</span>(surfPointsFlat, surfPointsFlat2);</span><br><span class="line">  surfPointsFlat2.header.stamp = laserCloudMsg-&gt;header.stamp;</span><br><span class="line">  surfPointsFlat2.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">  pubSurfPointsFlat.<span class="built_in">publish</span>(surfPointsFlat2);</span><br><span class="line"></span><br><span class="line">  sensor_msgs::PointCloud2 surfPointsLessFlat2;</span><br><span class="line">  pcl::<span class="built_in">toROSMsg</span>(surfPointsLessFlat, surfPointsLessFlat2);</span><br><span class="line">  surfPointsLessFlat2.header.stamp = laserCloudMsg-&gt;header.stamp;</span><br><span class="line">  surfPointsLessFlat2.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">  pubSurfPointsLessFlat.<span class="built_in">publish</span>(surfPointsLessFlat2);</span><br><span class="line">    <span class="comment">// publich IMU消息,由于循环到了最后，因此是Cur都是代表最后一个点，即最后一个点的欧拉角，畸变位移及一个点云周期增加的速度</span></span><br><span class="line">  <span class="function">pcl::PointCloud&lt;pcl::PointXYZ&gt; <span class="title">imuTrans</span><span class="params">(<span class="number">4</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="comment">//起始点欧拉角</span></span><br><span class="line">  imuTrans.points[<span class="number">0</span>].x = imuPitchStart;</span><br><span class="line">  imuTrans.points[<span class="number">0</span>].y = imuYawStart;</span><br><span class="line">  imuTrans.points[<span class="number">0</span>].z = imuRollStart;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最后一个点的欧拉角</span></span><br><span class="line">  imuTrans.points[<span class="number">1</span>].x = imuPitchCur;</span><br><span class="line">  imuTrans.points[<span class="number">1</span>].y = imuYawCur;</span><br><span class="line">  imuTrans.points[<span class="number">1</span>].z = imuRollCur;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最后一个点相对于第一个点的畸变位移和速度</span></span><br><span class="line">  imuTrans.points[<span class="number">2</span>].x = imuShiftFromStartXCur;</span><br><span class="line">  imuTrans.points[<span class="number">2</span>].y = imuShiftFromStartYCur;</span><br><span class="line">  imuTrans.points[<span class="number">2</span>].z = imuShiftFromStartZCur;</span><br><span class="line"></span><br><span class="line">  imuTrans.points[<span class="number">3</span>].x = imuVeloFromStartXCur;</span><br><span class="line">  imuTrans.points[<span class="number">3</span>].y = imuVeloFromStartYCur;</span><br><span class="line">  imuTrans.points[<span class="number">3</span>].z = imuVeloFromStartZCur;</span><br><span class="line"></span><br><span class="line">  sensor_msgs::PointCloud2 imuTransMsg;</span><br><span class="line">  pcl::<span class="built_in">toROSMsg</span>(imuTrans, imuTransMsg);</span><br><span class="line">  imuTransMsg.header.stamp = laserCloudMsg-&gt;header.stamp;</span><br><span class="line">  imuTransMsg.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">  pubImuTrans.<span class="built_in">publish</span>(imuTransMsg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Ⅲ-laserOdometry"><a href="#Ⅲ-laserOdometry" class="headerlink" title="Ⅲ.laserOdometry"></a>Ⅲ.laserOdometry</h1><p><img src="/images/LOAM源代码解析/image-20220415103708452.png" alt="image-20220415103708452"></p><p>这部分是里程计部分，对应的是论文中的特征匹配问题，通过对论文的阅读，我们知道特征匹配主要是将$t$时刻的点云和$t+1$时刻的点云联系起来（如果有<code>IMU</code>或者里程计可以先进行一个初步的变换，作为初始信息用于匹配）;</p><p>我们知道$t$时刻讲过校正的点云为$\overline{P}_k$，将该集合中的边缘点生成的线和$t+1$时刻提取的边缘点对应起来，我们需要找到一个$t$时刻到$t+1$时刻的最优位姿$T$，使得损失最小，对应的就是求点到直线的最短距离，在论文中我们已经通过求偏导的方式把雅可比矩阵做了详细的推导，把它应用在代码中即可。（对于平面点特征，同样的考虑点到面的距离。）详细推导查看：<a href="https://lukeyalvin.top/2022/04/11/loam%E8%AE%BA%E6%96%87%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/#C-%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%E6%B1%82%E8%A7%A3">LOAM-SLAM深度剖析-Ⅳ.特征点匹配-C.雅可比矩阵求解</a></p><p>在看代码中的函数之前，首先熟悉定义的变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收到的sharp点云</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">cornerPointsSharp</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="comment">//接收到的less_sharp点云</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">cornerPointsLessSharp</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="comment">//接收到的flat点云</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">surfPointsFlat</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="comment">//接收到的less_flat点云</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">surfPointsLessFlat</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上一帧所有边缘点云</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">laserCloudCornerLast</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="comment">//上一帧所有平面点云</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">laserCloudSurfLast</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存前一个节点发过来的未经处理过的特征点</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">laserCloudOri</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">coeffSel</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="comment">//接收到的所有的点云数据</span></span><br><span class="line">pcl::PointCloud&lt;PointType&gt;::<span class="function">Ptr <span class="title">laserCloudFullRes</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="comment">//接收到的IMU信息</span></span><br><span class="line">pcl::PointCloud&lt;pcl::PointXYZ&gt;::<span class="function">Ptr <span class="title">imuTrans</span><span class="params">(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;())</span></span>;</span><br><span class="line"><span class="comment">//使用上一帧的 less_sharp 点云构造kd-tree</span></span><br><span class="line">pcl::KdTreeFLANN&lt;PointType&gt;::<span class="function">Ptr <span class="title">kdtreeCornerLast</span><span class="params">(<span class="keyword">new</span> pcl::KdTreeFLANN&lt;PointType&gt;())</span></span>;</span><br><span class="line"><span class="comment">//使用上一帧的 less_flat 点云构造kd-tree</span></span><br><span class="line">pcl::KdTreeFLANN&lt;PointType&gt;::<span class="function">Ptr <span class="title">kdtreeSurfLast</span><span class="params">(<span class="keyword">new</span> pcl::KdTreeFLANN&lt;PointType&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> laserCloudCornerLastNum;</span><br><span class="line"><span class="keyword">int</span> laserCloudSurfLastNum;</span><br></pre></td></tr></table></figure><h2 id="A-main"><a href="#A-main" class="headerlink" title="A.main"></a>A.main</h2><p><img src="/images/LOAM源代码解析/image-20220416145103548.png" alt="image-20220416145103548"></p><p>这里的main函数足足600多行代码……，人都傻了，，，</p><p>开始定义了ROS节点和订阅的消息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;laserOdometry&quot;</span>);</span><br><span class="line">  ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">  ros::Subscriber subCornerPointsSharp = nh.subscribe&lt;sensor_msgs::PointCloud2&gt;(<span class="string">&quot;/laser_cloud_sharp&quot;</span>, <span class="number">2</span>, laserCloudSharpHandler);</span><br><span class="line">  ros::Subscriber subCornerPointsLessSharp = nh.subscribe&lt;sensor_msgs::PointCloud2&gt;(<span class="string">&quot;/laser_cloud_less_sharp&quot;</span>, <span class="number">2</span>, laserCloudLessSharpHandler);</span><br><span class="line">  ros::Subscriber subSurfPointsFlat = nh.subscribe&lt;sensor_msgs::PointCloud2&gt;(<span class="string">&quot;/laser_cloud_flat&quot;</span>, <span class="number">2</span>, laserCloudFlatHandler);</span><br><span class="line">  ros::Subscriber subSurfPointsLessFlat = nh.subscribe&lt;sensor_msgs::PointCloud2&gt;(<span class="string">&quot;/laser_cloud_less_flat&quot;</span>, <span class="number">2</span>, laserCloudLessFlatHandler);</span><br><span class="line">  ros::Subscriber subLaserCloudFullRes = nh.subscribe&lt;sensor_msgs::PointCloud2&gt; (<span class="string">&quot;/velodyne_cloud_2&quot;</span>, <span class="number">2</span>, laserCloudFullResHandler);</span><br><span class="line">  ros::Subscriber subImuTrans = nh.subscribe&lt;sensor_msgs::PointCloud2&gt; (<span class="string">&quot;/imu_trans&quot;</span>, <span class="number">5</span>, imuTransHandler);</span><br><span class="line">  ros::Publisher pubLaserCloudCornerLast = nh.advertise&lt;sensor_msgs::PointCloud2&gt; (<span class="string">&quot;/laser_cloud_corner_last&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  ros::Publisher pubLaserCloudSurfLast = nh.advertise&lt;sensor_msgs::PointCloud2&gt; (<span class="string">&quot;/laser_cloud_surf_last&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  ros::Publisher pubLaserCloudFullRes = nh.advertise&lt;sensor_msgs::PointCloud2&gt; (<span class="string">&quot;/velodyne_cloud_3&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  ros::Publisher pubLaserOdometry = nh.advertise&lt;nav_msgs::Odometry&gt; (<span class="string">&quot;/laser_odom_to_init&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  </span><br><span class="line">  nav_msgs::Odometry laserOdometry;</span><br><span class="line">  laserOdometry.header.frame_id = <span class="string">&quot;camera_init&quot;</span>;</span><br><span class="line">  laserOdometry.child_frame_id = <span class="string">&quot;/laser_odom&quot;</span>;</span><br><span class="line"></span><br><span class="line">  tf::TransformBroadcaster tfBroadcaster;</span><br><span class="line">  tf::StampedTransform laserOdometryTrans;</span><br><span class="line">  laserOdometryTrans.frame_id_ = <span class="string">&quot;camera_init&quot;</span>;</span><br><span class="line">  laserOdometryTrans.child_frame_id_ = <span class="string">&quot;/laser_odom&quot;</span>;</span><br><span class="line">    std::vector&lt;<span class="keyword">int</span>&gt; pointSearchInd;<span class="comment">//搜索到的点序</span></span><br><span class="line">  std::vector&lt;<span class="keyword">float</span>&gt; pointSearchSqDis;<span class="comment">//搜索到的点平方距离</span></span><br><span class="line"></span><br><span class="line">  PointType pointOri, pointSel<span class="comment">/*选中的特征点*/</span>, tripod1, tripod2, tripod3<span class="comment">/*特征点的对应点*/</span>, pointProj<span class="comment">/*unused*/</span>, coeff;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//退化标志</span></span><br><span class="line">  <span class="keyword">bool</span> isDegenerate = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//P矩阵，预测矩阵</span></span><br><span class="line">  <span class="function">cv::Mat <span class="title">matP</span><span class="params">(<span class="number">6</span>, <span class="number">6</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> frameCount = skipFrameNum;</span><br><span class="line">  <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">  <span class="keyword">bool</span> status = ros::<span class="built_in">ok</span>();</span><br><span class="line">  <span class="keyword">while</span> (status) &#123;</span><br><span class="line">    ros::<span class="built_in">spinOnce</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newCornerPointsSharp &amp;&amp; newCornerPointsLessSharp &amp;&amp; newSurfPointsFlat &amp;&amp; </span><br><span class="line">        newSurfPointsLessFlat &amp;&amp; newLaserCloudFullRes &amp;&amp; newImuTrans &amp;&amp;</span><br><span class="line">        <span class="built_in">fabs</span>(timeCornerPointsSharp - timeSurfPointsLessFlat) &lt; <span class="number">0.005</span> &amp;&amp;</span><br><span class="line">        <span class="built_in">fabs</span>(timeCornerPointsLessSharp - timeSurfPointsLessFlat) &lt; <span class="number">0.005</span> &amp;&amp;</span><br><span class="line">        <span class="built_in">fabs</span>(timeSurfPointsFlat - timeSurfPointsLessFlat) &lt; <span class="number">0.005</span> &amp;&amp;</span><br><span class="line">        <span class="built_in">fabs</span>(timeLaserCloudFullRes - timeSurfPointsLessFlat) &lt; <span class="number">0.005</span> &amp;&amp;</span><br><span class="line">        <span class="built_in">fabs</span>(timeImuTrans - timeSurfPointsLessFlat) &lt; <span class="number">0.005</span>) &#123;  <span class="comment">//同步作用，确保同时收到同一个点云的特征点以及IMU信息才进入</span></span><br><span class="line">      newCornerPointsSharp = <span class="literal">false</span>;</span><br><span class="line">      newCornerPointsLessSharp = <span class="literal">false</span>;</span><br><span class="line">      newSurfPointsFlat = <span class="literal">false</span>;</span><br><span class="line">      newSurfPointsLessFlat = <span class="literal">false</span>;</span><br><span class="line">      newLaserCloudFullRes = <span class="literal">false</span>;</span><br><span class="line">      newImuTrans = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">/***** 一、初始化 *****/</span></span><br><span class="line">      <span class="comment">/***** 二、点云匹配与运动估计 *****/</span></span><br><span class="line">      <span class="comment">/***** 三、坐标转换 *****/</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************</span></span><br><span class="line"><span class="comment">* 1、初始化   * </span></span><br><span class="line"><span class="comment">*************/</span></span><br><span class="line"><span class="comment">//将第一个点云数据集发送给laserMapping,从下一个点云数据开始处理</span></span><br><span class="line"><span class="keyword">if</span> (!systemInited) &#123;</span><br><span class="line">    <span class="comment">// 将cornerPointsLessSharp（接收到的less_sharp点云）与laserCloudCornerLast（上一帧所有边缘点云）交换,</span></span><br><span class="line">    <span class="comment">// 目的保存cornerPointsLessSharp（接收到的less_sharp点云）的值下轮使用</span></span><br><span class="line">    pcl::PointCloud&lt;PointType&gt;::Ptr laserCloudTemp = cornerPointsLessSharp;</span><br><span class="line">    cornerPointsLessSharp = laserCloudCornerLast;</span><br><span class="line">    laserCloudCornerLast = laserCloudTemp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将surfPointLessFlat（接收到的less_flat点云）与laserCloudSurfLast（上一帧所有平面点云）交换，</span></span><br><span class="line">    <span class="comment">// 目的保存surfPointsLessFlat（接收到的less_flat点云）的值下轮使用</span></span><br><span class="line">    laserCloudTemp = surfPointsLessFlat;</span><br><span class="line">    surfPointsLessFlat = laserCloudSurfLast;</span><br><span class="line">    laserCloudSurfLast = laserCloudTemp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用上一帧的特征点构建kd-tree</span></span><br><span class="line">    kdtreeCornerLast-&gt;<span class="built_in">setInputCloud</span>(laserCloudCornerLast);<span class="comment">//所有的边沿点集合</span></span><br><span class="line">    kdtreeSurfLast-&gt;<span class="built_in">setInputCloud</span>(laserCloudSurfLast);<span class="comment">//所有的平面点集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将cornerPointsLessSharp（上一帧所有边缘点云）发送给laserMapping</span></span><br><span class="line">    sensor_msgs::PointCloud2 laserCloudCornerLast2;</span><br><span class="line">    pcl::<span class="built_in">toROSMsg</span>(*laserCloudCornerLast, laserCloudCornerLast2);</span><br><span class="line">    laserCloudCornerLast2.header.stamp = ros::<span class="built_in">Time</span>().<span class="built_in">fromSec</span>(timeSurfPointsLessFlat);</span><br><span class="line">    laserCloudCornerLast2.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">    pubLaserCloudCornerLast.<span class="built_in">publish</span>(laserCloudCornerLast2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将surfPointLessFlat（上一帧所有平面点云）发送给laserMapping</span></span><br><span class="line">    sensor_msgs::PointCloud2 laserCloudSurfLast2;</span><br><span class="line">    pcl::<span class="built_in">toROSMsg</span>(*laserCloudSurfLast, laserCloudSurfLast2);</span><br><span class="line">    laserCloudSurfLast2.header.stamp = ros::<span class="built_in">Time</span>().<span class="built_in">fromSec</span>(timeSurfPointsLessFlat);</span><br><span class="line">    laserCloudSurfLast2.header.frame_id = <span class="string">&quot;/camera&quot;</span>;</span><br><span class="line">    pubLaserCloudSurfLast.<span class="built_in">publish</span>(laserCloudSurfLast2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记住原点的翻滚角和俯仰角</span></span><br><span class="line">    transformSum[<span class="number">0</span>] += imuPitchStart;</span><br><span class="line">    transformSum[<span class="number">2</span>] += imuRollStart;</span><br><span class="line"></span><br><span class="line">    systemInited = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T平移量的初值赋值为加减速的位移量，为其梯度下降的方向（沿用上次转换的T（一个sweep匀速模型），同时在其基础上减去匀速运动位移，即只考虑加减速的位移量）</span></span><br><span class="line">transform[<span class="number">3</span>] -= imuVeloFromStartX * scanPeriod;</span><br><span class="line">transform[<span class="number">4</span>] -= imuVeloFromStartY * scanPeriod;</span><br><span class="line">transform[<span class="number">5</span>] -= imuVeloFromStartZ * scanPeriod;</span><br></pre></td></tr></table></figure><p>【解析】：这部分主要做了两件事，①将订阅的数据保存为上一时刻的数据。作者做了两次数据交换：将<code>cornerPointsLessSharp</code>（接收到的<code>less_sharp</code>点云）与<code>laserCloudCornerLast</code>（上一帧所有边缘点云）交换，将<code>surfPointLessFlat</code>（接收到的<code>less_flat</code>点云）与<code>laserCloudSurfLast</code>（上一帧所有平面点云）交换，目的就是将接收的数据保存为上一时刻的数据，并将上一时刻的数据构建<code>kd-tree</code>，供下轮使用。</p><p>②将上一时刻的数据发布出去。将<code>cornerPointsLessSharp</code>（上一帧所有边缘点云）和<code>surfPointLessFlat</code>（上一帧所有平面点云）也即边沿点和平面点分别发送给<code>laserMapping</code>。</p><h3 id="2-帧间匹配与运动估计"><a href="#2-帧间匹配与运动估计" class="headerlink" title="2.帧间匹配与运动估计"></a>2.帧间匹配与运动估计</h3><p>这部分代码人给我看麻了，通过对代码的折叠和前人的知道，我们可以清晰的看到这部分主要干了什么，先看一下整体的结构。</p><p><img src="/images/LOAM源代码解析/image-20220415151916947.png" alt="image-20220415151916947"></p><p>【解析】：这部分首先进行了一个总的判断，在进行初始化之后，首先要求上一时刻的点的个数必须达到边缘点大于10、平面特征点大于100的要求，才能进行之后的点云匹配以及运动估计。</p><p>然后做了一步操作<code>removeNaNFromPointCloud</code>，它的主要作用是<strong>去除无效点</strong>，参数分别是（输入点云，输出点云，对应保留的索引），所以这里将含有<code>NaN</code>的（无效的）边缘点云去除了，并统计了边缘点和平面点的个数。</p><p>做好上面的初始工作之后，就开始进行迭代优化了，这部分使用的是非线性最小二乘法中的列文伯格（<code>LM</code>）算法，做了25次迭代。当然优化并不是这么简单的事情，所以红色框里的内容就是重点了，它们是优化必不可少的步骤，下面依次介绍每一部分的对应的论文内容。</p><h4 id="①点线匹配与雅可比求解"><a href="#①点线匹配与雅可比求解" class="headerlink" title="①点线匹配与雅可比求解"></a>①点线匹配与雅可比求解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">laserCloudOri-&gt;<span class="built_in">clear</span>();</span><br><span class="line">coeffSel-&gt;<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理当前点云中的曲率最大的特征点,从上个点云中曲率比较大的特征点中找两个最近距离点，一个点使用kd-tree查找，另一个根据找到的点在其相邻线找另外一个最近距离的点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cornerPointsSharpNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">TransformToStart</span>(&amp;cornerPointsSharp-&gt;points[i], &amp;pointSel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每迭代五次，重新查找最近点</span></span><br><span class="line">    <span class="keyword">if</span> (iterCount % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::vector&lt;<span class="keyword">int</span>&gt; indices;</span><br><span class="line">        pcl::<span class="built_in">removeNaNFromPointCloud</span>(*laserCloudCornerLast, *laserCloudCornerLast, indices);</span><br><span class="line">        <span class="comment">// kd-tree查找一个最近距离点，边沿点未经过体素栅格滤波，一般边沿点本来就比较少，不做滤波</span></span><br><span class="line">        kdtreeCornerLast-&gt;<span class="built_in">nearestKSearch</span>(pointSel, <span class="number">1</span>, pointSearchInd, pointSearchSqDis);</span><br><span class="line">        <span class="keyword">int</span> closestPointInd = <span class="number">-1</span>, minPointInd2 = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//寻找相邻线距离目标点距离最小的点</span></span><br><span class="line">        <span class="comment">//再次提醒：velodyne是2度一线，scanID相邻并不代表线号相邻，相邻线度数相差2度，也即线号scanID相差2</span></span><br><span class="line">        <span class="keyword">if</span> (pointSearchSqDis[<span class="number">0</span>] &lt; <span class="number">25</span>)</span><br><span class="line">        &#123; <span class="comment">//找到的最近点距离的确很近的话</span></span><br><span class="line">            closestPointInd = pointSearchInd[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//提取最近点线号</span></span><br><span class="line">            <span class="keyword">int</span> closestPointScan = <span class="built_in"><span class="keyword">int</span></span>(laserCloudCornerLast-&gt;points[closestPointInd].intensity);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> pointSqDis, minPointSqDis2 = <span class="number">25</span>; <span class="comment">//初始门槛值5米，可大致过滤掉scanID相邻，但实际线不相邻的值</span></span><br><span class="line">            <span class="comment">//寻找距离目标点最近距离的平方和最小的点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = closestPointInd + <span class="number">1</span>; j &lt; cornerPointsSharpNum; j++)</span><br><span class="line">            &#123; <span class="comment">//向scanID增大的方向查找</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudCornerLast-&gt;points[j].intensity) &gt; closestPointScan + <span class="number">2.5</span>)</span><br><span class="line">                &#123; <span class="comment">//非相邻线</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                pointSqDis = (laserCloudCornerLast-&gt;points[j].x - pointSel.x) *</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].x - pointSel.x) +</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].y - pointSel.y) *</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].y - pointSel.y) +</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].z - pointSel.z) *</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].z - pointSel.z);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudCornerLast-&gt;points[j].intensity) &gt; closestPointScan)</span><br><span class="line">                &#123; <span class="comment">//确保两个点不在同一条scan上（相邻线查找应该可以用scanID == closestPointScan +/- 1 来做）</span></span><br><span class="line">                    <span class="keyword">if</span> (pointSqDis &lt; minPointSqDis2)</span><br><span class="line">                    &#123; <span class="comment">//距离更近，要小于初始值5米</span></span><br><span class="line">                        <span class="comment">//更新最小距离与点序</span></span><br><span class="line">                        minPointSqDis2 = pointSqDis;</span><br><span class="line">                        minPointInd2 = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//同理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = closestPointInd - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            &#123; <span class="comment">//向scanID减小的方向查找</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudCornerLast-&gt;points[j].intensity) &lt; closestPointScan - <span class="number">2.5</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                pointSqDis = (laserCloudCornerLast-&gt;points[j].x - pointSel.x) *</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].x - pointSel.x) +</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].y - pointSel.y) *</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].y - pointSel.y) +</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].z - pointSel.z) *</span><br><span class="line">                    (laserCloudCornerLast-&gt;points[j].z - pointSel.z);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudCornerLast-&gt;points[j].intensity) &lt; closestPointScan)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pointSqDis &lt; minPointSqDis2)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minPointSqDis2 = pointSqDis;</span><br><span class="line">                        minPointInd2 = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记住组成线的点序</span></span><br><span class="line">        pointSearchCornerInd1[i] = closestPointInd; <span class="comment">// kd-tree最近距离点，-1表示未找到满足的点</span></span><br><span class="line">        pointSearchCornerInd2[i] = minPointInd2;    <span class="comment">//另一个最近的，-1表示未找到满足的点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pointSearchCornerInd2[i] &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123; <span class="comment">//大于等于0，不等于-1，说明两个点都找到了</span></span><br><span class="line">        tripod1 = laserCloudCornerLast-&gt;points[pointSearchCornerInd1[i]];</span><br><span class="line">        tripod2 = laserCloudCornerLast-&gt;points[pointSearchCornerInd2[i]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选择的特征点记为O，kd-tree最近距离点记为A，另一个最近距离点记为B</span></span><br><span class="line">        <span class="keyword">float</span> x0 = pointSel.x;</span><br><span class="line">        <span class="keyword">float</span> y0 = pointSel.y;</span><br><span class="line">        <span class="keyword">float</span> z0 = pointSel.z;</span><br><span class="line">        <span class="keyword">float</span> x1 = tripod1.x;</span><br><span class="line">        <span class="keyword">float</span> y1 = tripod1.y;</span><br><span class="line">        <span class="keyword">float</span> z1 = tripod1.z;</span><br><span class="line">        <span class="keyword">float</span> x2 = tripod2.x;</span><br><span class="line">        <span class="keyword">float</span> y2 = tripod2.y;</span><br><span class="line">        <span class="keyword">float</span> z2 = tripod2.z;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向量OA = (x0 - x1, y0 - y1, z0 - z1), 向量OB = (x0 - x2, y0 - y2, z0 - z2)，向量AB = （x1 - x2, y1 - y2, z1 - z2）</span></span><br><span class="line">        <span class="comment">//向量OA OB的向量积(即叉乘)为：</span></span><br><span class="line">        <span class="comment">//|  i      j      k  |</span></span><br><span class="line">        <span class="comment">//|x0-x1  y0-y1  z0-z1|</span></span><br><span class="line">        <span class="comment">//|x0-x2  y0-y2  z0-z2|</span></span><br><span class="line">        <span class="comment">//模为：</span></span><br><span class="line">        <span class="keyword">float</span> a012 = <span class="built_in">sqrt</span>(((x0 - x1) * (y0 - y2) - (x0 - x2) * (y0 - y1)) * ((x0 - x1) * (y0 - y2) - (x0 - x2) * (y0 - y1)) + ((x0 - x1) * (z0 - z2) - (x0 - x2) * (z0 - z1)) * ((x0 - x1) * (z0 - z2) - (x0 - x2) * (z0 - z1)) + ((y0 - y1) * (z0 - z2) - (y0 - y2) * (z0 - z1)) * ((y0 - y1) * (z0 - z2) - (y0 - y2) * (z0 - z1)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两个最近距离点之间的距离，即向量AB的模</span></span><br><span class="line">        <span class="keyword">float</span> l12 = <span class="built_in">sqrt</span>((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// AB方向的单位向量与OAB平面的单位法向量的向量积在各轴上的分量（d的方向）</span></span><br><span class="line">        <span class="comment">// x轴分量i</span></span><br><span class="line">        <span class="keyword">float</span> la = ((y1 - y2) * ((x0 - x1) * (y0 - y2) - (x0 - x2) * (y0 - y1)) + (z1 - z2) * ((x0 - x1) * (z0 - z2) - (x0 - x2) * (z0 - z1))) / a012 / l12;</span><br><span class="line">        <span class="comment">// y轴分量j</span></span><br><span class="line">        <span class="keyword">float</span> lb = -((x1 - x2) * ((x0 - x1) * (y0 - y2) - (x0 - x2) * (y0 - y1)) - (z1 - z2) * ((y0 - y1) * (z0 - z2) - (y0 - y2) * (z0 - z1))) / a012 / l12;</span><br><span class="line">        <span class="comment">// z轴分量k</span></span><br><span class="line">        <span class="keyword">float</span> lc = -((x1 - x2) * ((x0 - x1) * (z0 - z2) - (x0 - x2) * (z0 - z1)) + (y1 - y2) * ((y0 - y1) * (z0 - z2) - (y0 - y2) * (z0 - z1))) / a012 / l12;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点到线的距离，d = |向量OA 叉乘 向量OB|/|AB|</span></span><br><span class="line">        <span class="keyword">float</span> ld2 = a012 / l12;</span><br><span class="line">        <span class="comment">//权重计算，距离越大权重越小，距离越小权重越大，得到的权重范围&lt;=1</span></span><br><span class="line">        <span class="keyword">float</span> s = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iterCount &gt;= <span class="number">5</span>)</span><br><span class="line">        &#123; <span class="comment">// 5次迭代之后开始增加权重因素</span></span><br><span class="line">            s = <span class="number">1</span> - <span class="number">1.8</span> * <span class="built_in">fabs</span>(ld2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//考虑权重</span></span><br><span class="line">        coeff.x = s * la;</span><br><span class="line">        coeff.y = s * lb;</span><br><span class="line">        coeff.z = s * lc;</span><br><span class="line">        coeff.intensity = s * ld2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0.1</span> &amp;&amp; ld2 != <span class="number">0</span>)</span><br><span class="line">        &#123; <span class="comment">//只保留权重大的，也即距离比较小的点，同时也舍弃距离为零的</span></span><br><span class="line">            laserCloudOri-&gt;<span class="built_in">push_back</span>(cornerPointsSharp-&gt;points[i]);</span><br><span class="line">            coeffSel-&gt;<span class="built_in">push_back</span>(coeff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【 <span style="color:red;">点线匹配</span> 解析】：这部分主要任务是进行点和线的匹配，通过论文的解析我们知道，我们的特征匹配做的就是对$\overline{P}_k$中的线与$k+1$时刻投影到$k$时刻的点$i,i\in\tilde\xi_{k+1}$之间的匹配。这里对论文中的内容做一个简单的回顾：</p><p>详细查看：<a href="https://lukeyalvin.top/2022/04/11/loam%E8%AE%BA%E6%96%87%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/#C-%E7%82%B9%E5%92%8C%E5%AF%B9%E5%BA%94%E7%89%B9%E5%BE%81%E5%8C%BA%E5%9F%9F%E8%B7%9D%E7%A6%BB%E7%9A%84%E8%AE%A1%E7%AE%97">C.点和对应特征区域距离的计算</a><br>论文中提到，边线是由两个点构成的，即$j,l$且$j,l\in \overline{P}_k$，其中$j$是$i$在$\overline{P}_k$中的最近邻，$l$是$i$在连续两次扫描$j$时的最近邻，$(j, l)$构成$i$的对应关系。所以关键就是这两个点要怎么找，只有找到这两个点之后才能得到一条线，进而才能做点线匹配。由于我们的$j,l$所在的ScanID可能比$i$的大，也可能比$i$的小，因此，代码中是往两头找。</p><p>代码中，通过处理上一帧中曲率最大的特征点，从该特征点中找到两个最近距离的点$j$，一个点使用kd-tree查找，然后根据找到的点在其相邻线找另外一个最近距离的点$l$。并且由于迭代过程中最近的点的匹配是随着 transform 的更新逐渐变化的，因此作者采用了 5 次迭代（计算量的一种平衡吧，每次更新 transform 后都更新一次最近匹配计算资源消耗大？）后再计算一次对应的最近点。这样下次通过更新的最近点匹配对来完成新的计算。</p><p>找到两个点之后定义$i$坐标$O(x_0 , y_0, z_0 )$，$j$的坐标$A(x_1 , y_1, z_1 )$，$l$的坐标$B(x_2 , y_2, z_2)$，由论文可知：</p><script type="math/tex; mode=display">d_\xi=\frac{|\overrightarrow{OA}×\overrightarrow {OB}|}{|\overrightarrow{AB}|}=a012 / l12;</script><p>【 <span style="color:red;">雅可比求解</span> 解析】：</p><p><img src="/images/LOAM源代码解析/image-20220415214835849.png" alt="image-20220415214835849"></p><p>对应代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AB方向的单位向量与OAB平面的单位法向量的向量积在各轴上的分量（d的方向）</span></span><br><span class="line"><span class="comment">// x轴分量i</span></span><br><span class="line"><span class="keyword">float</span> la = ((y1 - y2) * ((x0 - x1) * (y0 - y2) - (x0 - x2) * (y0 - y1)) + (z1 - z2) * ((x0 - x1) * (z0 - z2) - (x0 - x2) * (z0 - z1))) / a012 / l12;</span><br><span class="line"><span class="comment">// y轴分量j</span></span><br><span class="line"><span class="keyword">float</span> lb = -((x1 - x2) * ((x0 - x1) * (y0 - y2) - (x0 - x2) * (y0 - y1)) - (z1 - z2) * ((y0 - y1) * (z0 - z2) - (y0 - y2) * (z0 - z1))) / a012 / l12;</span><br><span class="line"><span class="comment">// z轴分量k</span></span><br><span class="line"><span class="keyword">float</span> lc = -((x1 - x2) * ((x0 - x1) * (z0 - z2) - (x0 - x2) * (z0 - z1)) + (y1 - y2) * ((y0 - y1) * (z0 - z2) - (y0 - y2) * (z0 - z1))) / a012 / l12;</span><br></pre></td></tr></table></figure><p>求得梯度方向向量：</p><script type="math/tex; mode=display">\frac{\partial D(\tilde{X}^L_{(k+1,i)})}{\partial \tilde{X}^L_{(k+1,i)} }=[a_\mathcal{H},b_\mathcal{H},c_\mathcal{H}]^T=[la,lb,lc]^T</script><h4 id="②点面匹配与雅可比求解"><a href="#②点面匹配与雅可比求解" class="headerlink" title="②点面匹配与雅可比求解"></a>②点面匹配与雅可比求解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对本次接收到的曲率最小的点,从上次接收到的点云曲率比较小的点中找三点组成平面，一个使用kd-tree查找，另外一个在同一线上查找满足要求的，第三个在不同线上查找满足要求的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; surfPointsFlatNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">TransformToStart</span>(&amp;surfPointsFlat-&gt;points[i], &amp;pointSel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (iterCount % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// kd-tree最近点查找，在经过体素栅格滤波之后的平面点中查找，一般平面点太多，滤波后最近点查找数据量小</span></span><br><span class="line">        kdtreeSurfLast-&gt;<span class="built_in">nearestKSearch</span>(pointSel, <span class="number">1</span>, pointSearchInd, pointSearchSqDis);</span><br><span class="line">        <span class="keyword">int</span> closestPointInd = <span class="number">-1</span>, minPointInd2 = <span class="number">-1</span>, minPointInd3 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pointSearchSqDis[<span class="number">0</span>] &lt; <span class="number">25</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            closestPointInd = pointSearchInd[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> closestPointScan = <span class="built_in"><span class="keyword">int</span></span>(laserCloudSurfLast-&gt;points[closestPointInd].intensity);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> pointSqDis, minPointSqDis2 = <span class="number">25</span>, minPointSqDis3 = <span class="number">25</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = closestPointInd + <span class="number">1</span>; j &lt; surfPointsFlatNum; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudSurfLast-&gt;points[j].intensity) &gt; closestPointScan + <span class="number">2.5</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                pointSqDis = (laserCloudSurfLast-&gt;points[j].x - pointSel.x) *</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].x - pointSel.x) +</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].y - pointSel.y) *</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].y - pointSel.y) +</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].z - pointSel.z) *</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].z - pointSel.z);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudSurfLast-&gt;points[j].intensity) &lt;= closestPointScan)</span><br><span class="line">                &#123; <span class="comment">//如果点的线号小于等于最近点的线号(应该最多取等，也即同一线上的点)</span></span><br><span class="line">                    <span class="keyword">if</span> (pointSqDis &lt; minPointSqDis2)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minPointSqDis2 = pointSqDis;</span><br><span class="line">                        minPointInd2 = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123; <span class="comment">//如果点处在大于该线上</span></span><br><span class="line">                    <span class="keyword">if</span> (pointSqDis &lt; minPointSqDis3)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minPointSqDis3 = pointSqDis;</span><br><span class="line">                        minPointInd3 = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//同理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = closestPointInd - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudSurfLast-&gt;points[j].intensity) &lt; closestPointScan - <span class="number">2.5</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                pointSqDis = (laserCloudSurfLast-&gt;points[j].x - pointSel.x) *</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].x - pointSel.x) +</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].y - pointSel.y) *</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].y - pointSel.y) +</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].z - pointSel.z) *</span><br><span class="line">                    (laserCloudSurfLast-&gt;points[j].z - pointSel.z);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in"><span class="keyword">int</span></span>(laserCloudSurfLast-&gt;points[j].intensity) &gt;= closestPointScan)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pointSqDis &lt; minPointSqDis2)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minPointSqDis2 = pointSqDis;</span><br><span class="line">                        minPointInd2 = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pointSqDis &lt; minPointSqDis3)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minPointSqDis3 = pointSqDis;</span><br><span class="line">                        minPointInd3 = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pointSearchSurfInd1[i] = closestPointInd; <span class="comment">// kd-tree最近距离点,-1表示未找到满足要求的点</span></span><br><span class="line">        pointSearchSurfInd2[i] = minPointInd2;    <span class="comment">//同一线号上的距离最近的点，-1表示未找到满足要求的点</span></span><br><span class="line">        pointSearchSurfInd3[i] = minPointInd3;    <span class="comment">//不同线号上的距离最近的点，-1表示未找到满足要求的点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pointSearchSurfInd2[i] &gt;= <span class="number">0</span> &amp;&amp; pointSearchSurfInd3[i] &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;                                                               <span class="comment">//找到了三个点</span></span><br><span class="line">        tripod1 = laserCloudSurfLast-&gt;points[pointSearchSurfInd1[i]]; <span class="comment">// A点</span></span><br><span class="line">        tripod2 = laserCloudSurfLast-&gt;points[pointSearchSurfInd2[i]]; <span class="comment">// B点</span></span><br><span class="line">        tripod3 = laserCloudSurfLast-&gt;points[pointSearchSurfInd3[i]]; <span class="comment">// C点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向量AB = (tripod2.x - tripod1.x, tripod2.y - tripod1.y, tripod2.z - tripod1.z)</span></span><br><span class="line">        <span class="comment">//向量AC = (tripod3.x - tripod1.x, tripod3.y - tripod1.y, tripod3.z - tripod1.z)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向量AB AC的向量积（即叉乘），得到的是法向量</span></span><br><span class="line">        <span class="comment">// x轴方向分向量i</span></span><br><span class="line">        <span class="keyword">float</span> pa = (tripod2.y - tripod1.y) * (tripod3.z - tripod1.z) - (tripod3.y - tripod1.y) * (tripod2.z - tripod1.z);</span><br><span class="line">        <span class="comment">// y轴方向分向量j</span></span><br><span class="line">        <span class="keyword">float</span> pb = (tripod2.z - tripod1.z) * (tripod3.x - tripod1.x) - (tripod3.z - tripod1.z) * (tripod2.x - tripod1.x);</span><br><span class="line">        <span class="comment">// z轴方向分向量k</span></span><br><span class="line">        <span class="keyword">float</span> pc = (tripod2.x - tripod1.x) * (tripod3.y - tripod1.y) - (tripod3.x - tripod1.x) * (tripod2.y - tripod1.y);</span><br><span class="line">        <span class="keyword">float</span> pd = -(pa * tripod1.x + pb * tripod1.y + pc * tripod1.z);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//法向量的模</span></span><br><span class="line">        <span class="keyword">float</span> ps = <span class="built_in">sqrt</span>(pa * pa + pb * pb + pc * pc);</span><br><span class="line">        <span class="comment">// pa pb pc为法向量各方向上的单位向量</span></span><br><span class="line">        pa /= ps;</span><br><span class="line">        pb /= ps;</span><br><span class="line">        pc /= ps;</span><br><span class="line">        pd /= ps;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点到面的距离：向量OA与与法向量的点积除以法向量的模</span></span><br><span class="line">        <span class="keyword">float</span> pd2 = pa * pointSel.x + pb * pointSel.y + pc * pointSel.z + pd;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同理计算权重</span></span><br><span class="line">        <span class="keyword">float</span> s = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iterCount &gt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s = <span class="number">1</span> - <span class="number">1.8</span> * <span class="built_in">fabs</span>(pd2) / <span class="built_in">sqrt</span>(<span class="built_in">sqrt</span>(pointSel.x * pointSel.x + pointSel.y * pointSel.y + pointSel.z * pointSel.z));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//考虑权重</span></span><br><span class="line">        coeff.x = s * pa;</span><br><span class="line">        coeff.y = s * pb;</span><br><span class="line">        coeff.z = s * pc;</span><br><span class="line">        coeff.intensity = s * pd2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0.1</span> &amp;&amp; pd2 != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//保存原始点与相应的系数</span></span><br><span class="line">            laserCloudOri-&gt;<span class="built_in">push_back</span>(surfPointsFlat-&gt;points[i]);</span><br><span class="line">            coeffSel-&gt;<span class="built_in">push_back</span>(coeff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【 <span style="color:red;">点面匹配</span> 解析】：点面匹配与点线匹配如出一辙，通过论文的解析我们知道，我们的特征匹配做的就是对$\overline{\mathcal{P} }_k$中的面与$k+1$时刻投影到$k$时刻的点$i,i\in\tilde{\mathcal{H} }_{k+1}$之间的匹配。这里对论文中的内容做一个简单的回顾：</p><p>在$\overline{\mathcal{P} }_k$中找到$ i $的最近邻，记为$j$。 然后，我们找到另外两个点 $l$ 和$ m$，作为$ i $的最近邻，一个在$j $的同一扫描中，另一个在 $j $的两次连续扫描中，其中 $j,l,m\in \overline{\mathcal{P} }_k$。所以关键就是这三个点要怎么找，只有找到这三个点之后才能确定一个面，进而才能做点面匹配。</p><p>同样参考点线匹配，这段代码也是首先通过kd-tree最近点查找，找到点$j $，然后在选择同一线号上的距离最近的点$l$ 以及不同线号上的距离最近的点$ m$。</p><p>找到三个点之后，求解点到面的距离。这里的公式就不赘述了。上图：</p><p><img src="/images/LOAM源代码解析/image-20220415200837885.png" alt="image-20220415200837885" style="zoom:50%;" /></p><p>所以：</p><script type="math/tex; mode=display">\begin{align*}d_\mathcal{H}&=\frac{\begin{vmatrix}(\tilde{X}^L_{(k+1,i)}-\overline{X}^L_{(k,j)})·((\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)})×(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,m)}))\end{vmatrix}}{\begin{vmatrix}(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)})×(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,m)})\end{vmatrix} }\\&=\frac{|\overrightarrow{OA}·(\overrightarrow{AB}×\overrightarrow{AC})|}{|\overrightarrow{AB}×\overrightarrow{AC}|}\end{align*}</script><p>【 <span style="color:red;">雅可比求解</span> 解析】：</p><p><img src="/images/LOAM源代码解析/image-20220416090513137.png" alt="image-20220416090513137"></p><p>这里由于距离通过体积除以面积计算，而体积的梯度方向就是地面对应的法向量，所以面特征的梯度方向就是平面的法向量方向。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向量AB AC的向量积（即叉乘），得到的是法向量</span></span><br><span class="line"><span class="comment">// x轴方向分向量i</span></span><br><span class="line"><span class="keyword">float</span> pa = (tripod2.y - tripod1.y) * (tripod3.z - tripod1.z) - (tripod3.y - tripod1.y) * (tripod2.z - tripod1.z);</span><br><span class="line"><span class="comment">// y轴方向分向量j</span></span><br><span class="line"><span class="keyword">float</span> pb = (tripod2.z - tripod1.z) * (tripod3.x - tripod1.x) - (tripod3.z - tripod1.z) * (tripod2.x - tripod1.x);</span><br><span class="line"><span class="comment">// z轴方向分向量k</span></span><br><span class="line"><span class="keyword">float</span> pc = (tripod2.x - tripod1.x) * (tripod3.y - tripod1.y) - (tripod3.x - tripod1.x) * (tripod2.y - tripod1.y);</span><br><span class="line"><span class="keyword">float</span> pd = -(pa * tripod1.x + pb * tripod1.y + pc * tripod1.z);</span><br></pre></td></tr></table></figure><h4 id="③L-M运动估计求解"><a href="#③L-M运动估计求解" class="headerlink" title="③L-M运动估计求解"></a>③L-M运动估计求解</h4><p>假设：雷达的运动是连续的。将所有<strong>对应到的点求到直线的距离到面的距离之和最短然后按照 Levenberg-Marquardt 算法迭代计算</strong>，得到两帧之间的变换$T$，最后通过累计计算里程计。在这里，需要得到的是距离对坐标变换的偏导数。</p><p>具体查看之前的文章，已经说的非常清楚了：<br><a href="https://lukeyalvin.top/2022/04/11/loam%E8%AE%BA%E6%96%87%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/#B-%E8%BF%90%E5%8A%A8%E4%BC%B0%E8%AE%A1">B.运动估计</a></p><p><a href="https://lukeyalvin.top/2022/04/11/loam%E8%AE%BA%E6%96%87%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/#C-%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%E6%B1%82%E8%A7%A3">C.雅可比矩阵求解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 3. L-M运动估计求解 *****/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region</span></span><br><span class="line"><span class="keyword">int</span> pointSelNum = laserCloudOri-&gt;points.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//满足要求的特征点至少10个，特征匹配数量太少弃用此帧数据</span></span><br><span class="line"><span class="keyword">if</span> (pointSelNum &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">cv::Mat <span class="title">matA</span><span class="params">(pointSelNum, <span class="number">6</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">cv::Mat <span class="title">matAt</span><span class="params">(<span class="number">6</span>, pointSelNum, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">cv::Mat <span class="title">matAtA</span><span class="params">(<span class="number">6</span>, <span class="number">6</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">cv::Mat <span class="title">matB</span><span class="params">(pointSelNum, <span class="number">1</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">cv::Mat <span class="title">matAtB</span><span class="params">(<span class="number">6</span>, <span class="number">1</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">cv::Mat <span class="title">matX</span><span class="params">(<span class="number">6</span>, <span class="number">1</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算matA,matB矩阵</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointSelNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    pointOri = laserCloudOri-&gt;points[i];</span><br><span class="line">    coeff = coeffSel-&gt;points[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> s = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> srx = <span class="built_in">sin</span>(s * transform[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">float</span> crx = <span class="built_in">cos</span>(s * transform[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">float</span> sry = <span class="built_in">sin</span>(s * transform[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">float</span> cry = <span class="built_in">cos</span>(s * transform[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">float</span> srz = <span class="built_in">sin</span>(s * transform[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">float</span> crz = <span class="built_in">cos</span>(s * transform[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">float</span> tx = s * transform[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">float</span> ty = s * transform[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">float</span> tz = s * transform[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> arx = (-s * crx * sry * srz * pointOri.x + s * crx * crz * sry * pointOri.y + s * srx * sry * pointOri.z + s * tx * crx * sry * srz - s * ty * crx * crz * sry - s * tz * srx * sry) * coeff.x + (s * srx * srz * pointOri.x - s * crz * srx * pointOri.y + s * crx * pointOri.z + s * ty * crz * srx - s * tz * crx - s * tx * srx * srz) * coeff.y + (s * crx * cry * srz * pointOri.x - s * crx * cry * crz * pointOri.y - s * cry * srx * pointOri.z + s * tz * cry * srx + s * ty * crx * cry * crz - s * tx * crx * cry * srz) * coeff.z;</span><br><span class="line">    <span class="keyword">float</span> ary = ((-s * crz * sry - s * cry * srx * srz) * pointOri.x + (s * cry * crz * srx - s * sry * srz) * pointOri.y - s * crx * cry * pointOri.z + tx * (s * crz * sry + s * cry * srx * srz) + ty * (s * sry * srz - s * cry * crz * srx) + s * tz * crx * cry) * coeff.x + ((s * cry * crz - s * srx * sry * srz) * pointOri.x + (s * cry * srz + s * crz * srx * sry) * pointOri.y - s * crx * sry * pointOri.z + s * tz * crx * sry - ty * (s * cry * srz + s * crz * srx * sry) - tx * (s * cry * crz - s * srx * sry * srz)) * coeff.z;</span><br><span class="line">    <span class="keyword">float</span> arz = ((-s * cry * srz - s * crz * srx * sry) * pointOri.x + (s * cry * crz - s * srx * sry * srz) * pointOri.y + tx * (s * cry * srz + s * crz * srx * sry) - ty * (s * cry * crz - s * srx * sry * srz)) * coeff.x + (-s * crx * crz * pointOri.x - s * crx * srz * pointOri.y + s * ty * crx * srz + s * tx * crx * crz) * coeff.y + ((s * cry * crz * srx - s * sry * srz) * pointOri.x + (s * crz * sry + s * cry * srx * srz) * pointOri.y + tx * (s * sry * srz - s * cry * crz * srx) - ty * (s * crz * sry + s * cry * srx * srz)) * coeff.z;</span><br><span class="line">    <span class="keyword">float</span> atx = -s * (cry * crz - srx * sry * srz) * coeff.x + s * crx * srz * coeff.y - s * (crz * sry + cry * srx * srz) * coeff.z;</span><br><span class="line">    <span class="keyword">float</span> aty = -s * (cry * srz + crz * srx * sry) * coeff.x - s * crx * crz * coeff.y - s * (sry * srz - cry * crz * srx) * coeff.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> atz = s * crx * sry * coeff.x - s * srx * coeff.y - s * crx * cry * coeff.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> d2 = coeff.intensity;</span><br><span class="line"></span><br><span class="line">    matA.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">0</span>) = arx;</span><br><span class="line">    matA.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">1</span>) = ary;</span><br><span class="line">    matA.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">2</span>) = arz;</span><br><span class="line">    matA.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">3</span>) = atx;</span><br><span class="line">    matA.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">4</span>) = aty;</span><br><span class="line">    matA.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">5</span>) = atz;</span><br><span class="line">    matB.at&lt;<span class="keyword">float</span>&gt;(i, <span class="number">0</span>) = <span class="number">-0.05</span> * d2;</span><br><span class="line">&#125;</span><br><span class="line">cv::<span class="built_in">transpose</span>(matA, matAt);</span><br><span class="line">matAtA = matAt * matA;</span><br><span class="line">matAtB = matAt * matB;</span><br><span class="line"><span class="comment">//求解matAtA * matX = matAtB</span></span><br><span class="line">cv::<span class="built_in">solve</span>(matAtA, matAtB, matX, cv::DECOMP_QR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (iterCount == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//特征值1*6矩阵</span></span><br><span class="line">    <span class="function">cv::Mat <span class="title">matE</span><span class="params">(<span class="number">1</span>, <span class="number">6</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="comment">//特征向量6*6矩阵</span></span><br><span class="line">    <span class="function">cv::Mat <span class="title">matV</span><span class="params">(<span class="number">6</span>, <span class="number">6</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line">    <span class="function">cv::Mat <span class="title">matV2</span><span class="params">(<span class="number">6</span>, <span class="number">6</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求解特征值/特征向量</span></span><br><span class="line">    cv::<span class="built_in">eigen</span>(matAtA, matE, matV);</span><br><span class="line">    matV.<span class="built_in">copyTo</span>(matV2);</span><br><span class="line"></span><br><span class="line">    isDegenerate = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//特征值取值门槛</span></span><br><span class="line">    <span class="keyword">float</span> eignThre[<span class="number">6</span>] = &#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123; <span class="comment">//从小到大查找</span></span><br><span class="line">        <span class="keyword">if</span> (matE.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, i) &lt; eignThre[i])</span><br><span class="line">        &#123; <span class="comment">//特征值太小，则认为处在兼并环境中，发生了退化</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">            &#123; <span class="comment">//对应的特征向量置为0</span></span><br><span class="line">                matV2.at&lt;<span class="keyword">float</span>&gt;(i, j) = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            isDegenerate = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算P矩阵</span></span><br><span class="line">    matP = matV.<span class="built_in">inv</span>() * matV2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDegenerate)</span><br><span class="line">&#123; <span class="comment">//如果发生退化，只使用预测矩阵P计算</span></span><br><span class="line">    <span class="function">cv::Mat <span class="title">matX2</span><span class="params">(<span class="number">6</span>, <span class="number">1</span>, CV_32F, cv::Scalar::all(<span class="number">0</span>))</span></span>;</span><br><span class="line">    matX.<span class="built_in">copyTo</span>(matX2);</span><br><span class="line">    matX = matP * matX2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//累加每次迭代的旋转平移量</span></span><br><span class="line">transform[<span class="number">0</span>] += matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">transform[<span class="number">1</span>] += matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">transform[<span class="number">2</span>] += matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">transform[<span class="number">3</span>] += matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">transform[<span class="number">4</span>] += matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">transform[<span class="number">5</span>] += matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isnan</span>(transform[i])) <span class="comment">//判断是否非数字</span></span><br><span class="line">        transform[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算旋转平移量，如果很小就停止迭代</span></span><br><span class="line"><span class="keyword">float</span> deltaR = <span class="built_in">sqrt</span>(</span><br><span class="line">    <span class="built_in">pow</span>(<span class="built_in">rad2deg</span>(matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>)), <span class="number">2</span>) +</span><br><span class="line">    <span class="built_in">pow</span>(<span class="built_in">rad2deg</span>(matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>, <span class="number">0</span>)), <span class="number">2</span>) +</span><br><span class="line">    <span class="built_in">pow</span>(<span class="built_in">rad2deg</span>(matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">0</span>)), <span class="number">2</span>));</span><br><span class="line"><span class="keyword">float</span> deltaT = <span class="built_in">sqrt</span>(</span><br><span class="line">    <span class="built_in">pow</span>(matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">0</span>) * <span class="number">100</span>, <span class="number">2</span>) +</span><br><span class="line">    <span class="built_in">pow</span>(matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">4</span>, <span class="number">0</span>) * <span class="number">100</span>, <span class="number">2</span>) +</span><br><span class="line">    <span class="built_in">pow</span>(matX.at&lt;<span class="keyword">float</span>&gt;(<span class="number">5</span>, <span class="number">0</span>) * <span class="number">100</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (deltaR &lt; <span class="number">0.1</span> &amp;&amp; deltaT &lt; <span class="number">0.1</span>)</span><br><span class="line">&#123; <span class="comment">//迭代终止条件</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br></pre></td></tr></table></figure><p>这段代码对应公式部分真的看的一团麻…….一点点看：</p><p>【解析】：首先作者定义了几个矩阵：$A,A^T,A^TA,B,A^TB,X$，然后定义一串变量，代码中的$T$是前三项是旋转角，后三项是平移向量，即$[ θ_x， θ_y， θ_z,t_x, t_y, t_z]^T$，所以定义：</p><script type="math/tex; mode=display">srx=sin\theta_x=s_x\\crx=cos\theta_x=c_x\\sry=sin\theta_y=s_y\\cry=cos\theta_y=c_y\\srz=sin\theta_z=s_z\\crz=cos\theta_z=c_z\\</script><p>然后结合之前推导的公式，读者自己对应（这是基于欧拉角的，现在并不常用，现在基本上使用李代数……）</p><p><img src="/images/LOAM源代码解析/image-20220415204826886.png" alt="image-20220415204826886"></p><h3 id="3-坐标变换"><a href="#3-坐标变换" class="headerlink" title="3.坐标变换"></a>3.坐标变换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> rx, ry, rz, tx, ty, tz;</span><br><span class="line"><span class="comment">//求相对于原点的旋转量,垂直方向上1.05倍修正?</span></span><br><span class="line"><span class="built_in">AccumulateRotation</span>(transformSum[<span class="number">0</span>], transformSum[<span class="number">1</span>], transformSum[<span class="number">2</span>],</span><br><span class="line">                   -transform[<span class="number">0</span>], -transform[<span class="number">1</span>] * <span class="number">1.05</span>, -transform[<span class="number">2</span>], rx, ry, rz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> x1 = <span class="built_in">cos</span>(rz) * (transform[<span class="number">3</span>] - imuShiftFromStartX) - <span class="built_in">sin</span>(rz) * (transform[<span class="number">4</span>] - imuShiftFromStartY);</span><br><span class="line"><span class="keyword">float</span> y1 = <span class="built_in">sin</span>(rz) * (transform[<span class="number">3</span>] - imuShiftFromStartX) + <span class="built_in">cos</span>(rz) * (transform[<span class="number">4</span>] - imuShiftFromStartY);</span><br><span class="line"><span class="keyword">float</span> z1 = transform[<span class="number">5</span>] * <span class="number">1.05</span> - imuShiftFromStartZ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> x2 = x1;</span><br><span class="line"><span class="keyword">float</span> y2 = <span class="built_in">cos</span>(rx) * y1 - <span class="built_in">sin</span>(rx) * z1;</span><br><span class="line"><span class="keyword">float</span> z2 = <span class="built_in">sin</span>(rx) * y1 + <span class="built_in">cos</span>(rx) * z1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求相对于原点的平移量</span></span><br><span class="line">tx = transformSum[<span class="number">3</span>] - (<span class="built_in">cos</span>(ry) * x2 + <span class="built_in">sin</span>(ry) * z2);</span><br><span class="line">ty = transformSum[<span class="number">4</span>] - y2;</span><br><span class="line">tz = transformSum[<span class="number">5</span>] - (-<span class="built_in">sin</span>(ry) * x2 + <span class="built_in">cos</span>(ry) * z2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据IMU修正旋转量</span></span><br><span class="line"><span class="built_in">PluginIMURotation</span>(rx, ry, rz, imuPitchStart, imuYawStart, imuRollStart,</span><br><span class="line">                  imuPitchLast, imuYawLast, imuRollLast, rx, ry, rz);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到世界坐标系下的转移矩阵</span></span><br><span class="line">transformSum[<span class="number">0</span>] = rx;</span><br><span class="line">transformSum[<span class="number">1</span>] = ry;</span><br><span class="line">transformSum[<span class="number">2</span>] = rz;</span><br><span class="line">transformSum[<span class="number">3</span>] = tx;</span><br><span class="line">transformSum[<span class="number">4</span>] = ty;</span><br><span class="line">transformSum[<span class="number">5</span>] = tz;</span><br><span class="line"></span><br><span class="line"><span class="comment">//欧拉角转换成四元数</span></span><br><span class="line">geometry_msgs::Quaternion geoQuat = tf::<span class="built_in">createQuaternionMsgFromRollPitchYaw</span>(rz, -rx, -ry);</span><br><span class="line"></span><br><span class="line"><span class="comment">// publish四元数和平移量</span></span><br><span class="line">laserOdometry.header.stamp = ros::<span class="built_in">Time</span>().<span class="built_in">fromSec</span>(timeSurfPointsLessFlat);</span><br><span class="line">laserOdometry.pose.pose.orientation.x = -geoQuat.y;</span><br><span class="line">laserOdometry.pose.pose.orientation.y = -geoQuat.z;</span><br><span class="line">laserOdometry.pose.pose.orientation.z = geoQuat.x;</span><br><span class="line">laserOdometry.pose.pose.orientation.w = geoQuat.w;</span><br><span class="line">laserOdometry.pose.pose.position.x = tx;</span><br><span class="line">laserOdometry.pose.pose.position.y = ty;</span><br><span class="line">laserOdometry.pose.pose.position.z = tz;</span><br><span class="line">pubLaserOdometry.<span class="built_in">publish</span>(laserOdometry);</span><br><span class="line"></span><br><span class="line"><span class="comment">//广播新的平移旋转之后的坐标系(rviz)</span></span><br><span class="line">laserOdometryTrans.stamp_ = ros::<span class="built_in">Time</span>().<span class="built_in">fromSec</span>(timeSurfPointsLessFlat);</span><br><span class="line">laserOdometryTrans.<span class="built_in">setRotation</span>(tf::<span class="built_in">Quaternion</span>(-geoQuat.y, -geoQuat.z, geoQuat.x, geoQuat.w));</span><br><span class="line">laserOdometryTrans.<span class="built_in">setOrigin</span>(tf::<span class="built_in">Vector3</span>(tx, ty, tz));</span><br><span class="line">tfBroadcaster.<span class="built_in">sendTransform</span>(laserOdometryTrans);</span><br></pre></td></tr></table></figure><p>【解析】：得到帧间点云的相对运动之后，由于它们是在这两帧点云的局部坐标系下的，所以需要进行转换，把它转换到世界坐标系下。</p><h1 id="Ⅳ-laserMapping"><a href="#Ⅳ-laserMapping" class="headerlink" title="Ⅳ.laserMapping"></a>Ⅳ.laserMapping</h1><p><img src="/images/LOAM源代码解析/image-20220416150539893.png" alt="image-20220416150539893"></p><h2 id="A-mian函数"><a href="#A-mian函数" class="headerlink" title="A.mian函数"></a>A.mian函数</h2><p><img src="/images/LOAM源代码解析/image-20220416145505400.png" alt="image-20220416145505400"></p><p>开始定义了ROS节点及其发布的消息，通过思维导图可以作为观察，代码类似第二节。然后来吧，痛苦并快乐着…..</p><h3 id="1-坐标变换"><a href="#1-坐标变换" class="headerlink" title="1.坐标变换"></a>1.坐标变换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** ①坐标转换 *****/</span></span><br><span class="line"><span class="keyword">if</span> (frameCount &gt;= stackFrameNum) &#123;</span><br><span class="line">    <span class="comment">//获取世界坐标系转换矩阵，将相关坐标转移到世界坐标系下-&gt;得到可用于建图的Lidar坐标</span></span><br><span class="line">    <span class="built_in">transformAssociateToMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将最新接收到的平面点和边沿点进行旋转平移转换到世界坐标系下(这里和后面的逆转换应无必要)</span></span><br><span class="line">    <span class="comment">// 将上一时刻所有边特征转到世界坐标系下</span></span><br><span class="line">    <span class="keyword">int</span> laserCloudCornerLastNum = laserCloudCornerLast-&gt;points.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; laserCloudCornerLastNum; i++) &#123;</span><br><span class="line">        <span class="built_in">pointAssociateToMap</span>(&amp;laserCloudCornerLast-&gt;points[i], &amp;pointSel);</span><br><span class="line">        laserCloudCornerStack2-&gt;<span class="built_in">push_back</span>(pointSel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将上一时刻所有面特征转到世界坐标系下</span></span><br><span class="line">    <span class="keyword">int</span> laserCloudSurfLastNum = laserCloudSurfLast-&gt;points.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; laserCloudSurfLastNum; i++) &#123;</span><br><span class="line">        <span class="built_in">pointAssociateToMap</span>(&amp;laserCloudSurfLast-&gt;points[i], &amp;pointSel);</span><br><span class="line">        laserCloudSurfStack2-&gt;<span class="built_in">push_back</span>(pointSel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【解析】：这部分就是坐标变换，把点和面特征全部都转换到世界坐标系$\left\{W \right\}$下，具体转换函数调用的是<code>pointAssociateToMap</code>，并且转换用的是欧拉角表示的位姿。</p><h3 id="2-优化处理"><a href="#2-优化处理" class="headerlink" title="2.优化处理"></a>2.优化处理</h3><h4 id="①定义Cube"><a href="#①定义Cube" class="headerlink" title="①定义Cube"></a>①定义Cube</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> laserCloudCenWidth = <span class="number">10</span>;    <span class="comment">// cube宽度, cm为单位</span></span><br><span class="line"><span class="keyword">int</span> laserCloudCenHeight = <span class="number">5</span>;    <span class="comment">// cube高度</span></span><br><span class="line"><span class="keyword">int</span> laserCloudCenDepth = <span class="number">10</span>;    <span class="comment">// cube深度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> laserCloudWidth = <span class="number">21</span>; <span class="comment">// 子cube沿宽方向的分割个数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> laserCloudHeight = <span class="number">11</span>;<span class="comment">// 子cube沿高方向个数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> laserCloudDepth = <span class="number">21</span>; <span class="comment">// 子cube沿深度方向个数</span></span><br><span class="line"><span class="comment">// 子cube总数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> laserCloudNum = laserCloudWidth * laserCloudHeight * laserCloudDepth;<span class="comment">//4851</span></span><br></pre></td></tr></table></figure><p>cube相关操作的代码还不是特别明白……</p><h4 id="②迭代优化"><a href="#②迭代优化" class="headerlink" title="②迭代优化"></a>②迭代优化</h4><ul><li>迭代边缘点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代边缘点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; laserCloudCornerStackNum; i++) &#123;</span><br><span class="line">    pointOri = laserCloudCornerStack-&gt;points[i];</span><br><span class="line">    <span class="comment">//转换回世界坐标系</span></span><br><span class="line">    <span class="built_in">pointAssociateToMap</span>(&amp;pointOri, &amp;pointSel);</span><br><span class="line">    kdtreeCornerFromMap-&gt;<span class="built_in">nearestKSearch</span>(pointSel, <span class="number">5</span>, pointSearchInd, pointSearchSqDis);<span class="comment">//寻找最近距离五个点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pointSearchSqDis[<span class="number">4</span>] &lt; <span class="number">1.0</span>) &#123;<span class="comment">//5个点中最大距离不超过1才处理</span></span><br><span class="line">        <span class="comment">//将五个最近点的坐标加和求平均</span></span><br><span class="line">        <span class="keyword">float</span> cx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> cy = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">float</span> cz = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            cx += laserCloudCornerFromMap-&gt;points[pointSearchInd[j]].x;</span><br><span class="line">            cy += laserCloudCornerFromMap-&gt;points[pointSearchInd[j]].y;</span><br><span class="line">            cz += laserCloudCornerFromMap-&gt;points[pointSearchInd[j]].z;</span><br><span class="line">        &#125;</span><br><span class="line">        cx /= <span class="number">5</span>;</span><br><span class="line">        cy /= <span class="number">5</span>; </span><br><span class="line">        cz /= <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求均方差</span></span><br><span class="line">        <span class="keyword">float</span> a11 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> a12 = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">float</span> a13 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> a22 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> a23 = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">float</span> a33 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">float</span> ax = laserCloudCornerFromMap-&gt;points[pointSearchInd[j]].x - cx;</span><br><span class="line">            <span class="keyword">float</span> ay = laserCloudCornerFromMap-&gt;points[pointSearchInd[j]].y - cy;</span><br><span class="line">            <span class="keyword">float</span> az = laserCloudCornerFromMap-&gt;points[pointSearchInd[j]].z - cz;</span><br><span class="line"></span><br><span class="line">            a11 += ax * ax;</span><br><span class="line">            a12 += ax * ay;</span><br><span class="line">            a13 += ax * az;</span><br><span class="line">            a22 += ay * ay;</span><br><span class="line">            a23 += ay * az;</span><br><span class="line">            a33 += az * az;</span><br><span class="line">        &#125;</span><br><span class="line">        a11 /= <span class="number">5</span>;</span><br><span class="line">        a12 /= <span class="number">5</span>; </span><br><span class="line">        a13 /= <span class="number">5</span>;</span><br><span class="line">        a22 /= <span class="number">5</span>;</span><br><span class="line">        a23 /= <span class="number">5</span>; </span><br><span class="line">        a33 /= <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建矩阵</span></span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>) = a11;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>) = a12;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">2</span>) = a13;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>, <span class="number">0</span>) = a12;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>, <span class="number">1</span>) = a22;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>, <span class="number">2</span>) = a23;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">0</span>) = a13;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">1</span>) = a23;</span><br><span class="line">        matA1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>, <span class="number">2</span>) = a33;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//特征值分解</span></span><br><span class="line">        cv::<span class="built_in">eigen</span>(matA1, matD1, matV1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matD1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>) &gt; <span class="number">3</span> * matD1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>)) &#123;<span class="comment">//如果最大的特征值大于第二大的特征值三倍以上</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> x0 = pointSel.x;</span><br><span class="line">            <span class="keyword">float</span> y0 = pointSel.y;</span><br><span class="line">            <span class="keyword">float</span> z0 = pointSel.z;</span><br><span class="line">            <span class="keyword">float</span> x1 = cx + <span class="number">0.1</span> * matV1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">float</span> y1 = cy + <span class="number">0.1</span> * matV1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">float</span> z1 = cz + <span class="number">0.1</span> * matV1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">float</span> x2 = cx - <span class="number">0.1</span> * matV1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">float</span> y2 = cy - <span class="number">0.1</span> * matV1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">float</span> z2 = cz - <span class="number">0.1</span> * matV1.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> a012 = <span class="built_in">sqrt</span>(((x0 - x1)*(y0 - y2) - (x0 - x2)*(y0 - y1))</span><br><span class="line">                              * ((x0 - x1)*(y0 - y2) - (x0 - x2)*(y0 - y1)) </span><br><span class="line">                              + ((x0 - x1)*(z0 - z2) - (x0 - x2)*(z0 - z1))</span><br><span class="line">                              * ((x0 - x1)*(z0 - z2) - (x0 - x2)*(z0 - z1)) </span><br><span class="line">                              + ((y0 - y1)*(z0 - z2) - (y0 - y2)*(z0 - z1))</span><br><span class="line">                              * ((y0 - y1)*(z0 - z2) - (y0 - y2)*(z0 - z1)));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> l12 = <span class="built_in">sqrt</span>((x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2) + (z1 - z2)*(z1 - z2));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> la = ((y1 - y2)*((x0 - x1)*(y0 - y2) - (x0 - x2)*(y0 - y1)) </span><br><span class="line">                        + (z1 - z2)*((x0 - x1)*(z0 - z2) - (x0 - x2)*(z0 - z1))) / a012 / l12;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> lb = -((x1 - x2)*((x0 - x1)*(y0 - y2) - (x0 - x2)*(y0 - y1)) </span><br><span class="line">                         - (z1 - z2)*((y0 - y1)*(z0 - z2) - (y0 - y2)*(z0 - z1))) / a012 / l12;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> lc = -((x1 - x2)*((x0 - x1)*(z0 - z2) - (x0 - x2)*(z0 - z1)) </span><br><span class="line">                         + (y1 - y2)*((y0 - y1)*(z0 - z2) - (y0 - y2)*(z0 - z1))) / a012 / l12;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> ld2 = a012 / l12;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//权重系数计算</span></span><br><span class="line">            <span class="keyword">float</span> s = <span class="number">1</span> - <span class="number">0.9</span> * <span class="built_in">fabs</span>(ld2);</span><br><span class="line"></span><br><span class="line">            coeff.x = s * la;</span><br><span class="line">            coeff.y = s * lb;</span><br><span class="line">            coeff.z = s * lc;</span><br><span class="line">            coeff.intensity = s * ld2;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s &gt; <span class="number">0.1</span>) &#123;<span class="comment">//距离足够小才使用</span></span><br><span class="line">                laserCloudOri-&gt;<span class="built_in">push_back</span>(pointOri);</span><br><span class="line">                coeffSel-&gt;<span class="built_in">push_back</span>(coeff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【解析】：</p><p><strong>首先解释一下这里使用最近邻的方法找到了五个点的做法起什么作用？</strong></p><p>我们这一对应代码部分做推导，设五个点分别是：$(x_1,y_1,z_1),(x_2,y_2,z_2),(x_3,y_3,z_3),(x_4,y_4,z_4),(x_5,y_5,z_5),$</p><p>求平均值：</p><script type="math/tex; mode=display">\begin{align*}\overline{x}&=\frac{x_1+x_2+x_3+x_4+x_5}{5}\\\overline{y}&=\frac{y_1+y_2+y_3+y_4+y_5}{5}\\\overline{z}&=\frac{z_1+z_2+z_3+z_4+z_5}{5}\\\end{align*}</script><p>求协方差：</p><script type="math/tex; mode=display">\begin{align*}Cov(x,x)&=\sigma_{x}^2=E[(x-\overline{x})]^2\\Cov(y,y)&=\sigma_{y}^2=E[(y-\overline{y})]^2\\Cov(z,z)&=\sigma_{z}^2=E[(z-\overline{z})]^2\\Cov(x,y)&=\sigma_{x}\sigma_{y}=E[(x-\overline{x})(y-\overline{y})]\\Cov(x,z)&=\sigma_{x}\sigma_{z}=E[(x-\overline{x})(z-\overline{z})]\\Cov(y,z)&=\sigma_{y}\sigma_{z}=E[(y-\overline{y})(z-\overline{z})]\end{align*}</script><p>得到协方差矩阵：</p><script type="math/tex; mode=display">A=\begin{bmatrix}\sigma_{x}^2&\sigma_{x}\sigma_{y}&\sigma_{x}\sigma_{z}\\\sigma_{y}\sigma_{x}&\sigma_{y}^2&\sigma_{y}\sigma_{z}\\\sigma_{z}\sigma_{x}&\sigma_{z}\sigma_{y}&\sigma_{z}^2\end{bmatrix}</script><p>对$A$矩阵进行特征值分解：</p><p>如果这五个点<strong>共线</strong>的话，则分解出来的最大的特征值是另外两个的三倍以上；</p><p>如果这五个点<strong>共面</strong>的话，则分解出来的两个比较大的特征值是第三大的三倍以上；</p><p>总结为一句话就是：<span style="color:red;"><strong>线特征的特征值是一大两小，面特征的特征值是两大一小</strong></span></p><p>对于边缘点来说，当我们确定这五个点是共线的，则进行<code>if (matD1.at&lt;float&gt;(0, 0) &gt; 3 * matD1.at&lt;float&gt;(0, 1))&#123;....&#125;</code>内容下的操作；</p><p>与之前的点线匹配类似，这里用点$(x_0,y_0,z_0)$以及使用最大的特征值生成的两个虚拟点，利用这三个点，求得梯度方向向量：</p><p>参考链接：<a href="https://lukeyalvin.top/2022/04/11/loam%E8%AE%BA%E6%96%87%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/#C-%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%E6%B1%82%E8%A7%A3">LOAM-SLAM深度剖析-C.雅可比矩阵求解</a></p><script type="math/tex; mode=display">\frac{\partial D(\tilde{X}^L_{(k+1,i)})}{\partial \tilde{X}^L_{(k+1,i)} }=[a_\mathcal{H},b_\mathcal{H},c_\mathcal{H}]^T=[la,lb,lc]^T</script><p>这里和之前的里程计一致。</p><ul><li>迭代平面点</li></ul><p>平面点的代码就不贴了，与边缘点大同小异，不同的地方就是特征值的要求不一样，还有就是梯度方向的对应里程计中梯度方向的求法。</p><p>到此为止，我们得到了$\frac{\partial D(\tilde{X}^L_{(k+1,i)})}{\partial \tilde{X}^L_{(k+1,i)} }$（损失函数对点云的偏导）的求解。</p><h1 id="Ⅴ-参考文献"><a href="#Ⅴ-参考文献" class="headerlink" title="Ⅴ.参考文献"></a>Ⅴ.参考文献</h1><p><a href="https://zhuanlan.zhihu.com/p/29719106">LOAM:3D激光里程计及环境建图的方法和实现（一）</a></p><p><a href="https://blog.csdn.net/nksjc/article/details/76401092">3D 激光 SLAM -&gt;loam_velodyne 论文与代码解析</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;对于LOAM的论文以及原理清晰之后，我们还需要对论文算法的具体实现做深度剖析，做到将论文的每一部分与代码相对应，并学习LOAM实现的方式。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="SLAM项目实践" scheme="https://lukeyalvin.top/categories/SLAM%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="LOAM" scheme="https://lukeyalvin.top/tags/LOAM/"/>
    
  </entry>
  
  <entry>
    <title>LOAM&amp;&amp;ALOAM源码编译与数据集运行</title>
    <link href="https://lukeyalvin.top/posts/15478.html"/>
    <id>https://lukeyalvin.top/posts/15478.html</id>
    <published>2022-04-12T12:54:24.570Z</published>
    <updated>2022-04-30T02:20:10.833Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>本文主要把loam_velodyne与aloam_velodyne源码进行编译运行，感受一下在数据集下两者的运行效果。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><blockquote><p> 基本环境:ubuntu20.04; ROS1:noetic;你首先得熟悉十四讲吧……</p></blockquote><h1 id="LOAM"><a href="#LOAM" class="headerlink" title="LOAM"></a>LOAM</h1><p><img src="https://github.com/laboshinl/loam_velodyne/raw/master/capture.bmp" alt="Screenshot"></p><p>由于LOAM在机器人操作系统上进行搭建，所以需要构建工作空间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作空间</span></span><br><span class="line">mkdir -p LOAM_WS/src</span><br><span class="line"><span class="built_in">cd</span> src &amp;&amp; catkin_init_workspace </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/laboshinl/loam_velodyne.git</span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; catkin_make</span><br><span class="line"><span class="comment"># 编译和运行</span></span><br><span class="line">catkin_make -DCMAKE_BUILD_TYPE=Release </span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">source</span> ./devel/setup.bash</span><br></pre></td></tr></table></figure><p>如果你是用的vscode记得把引用放入<code>c_cpp_properties.json</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/opt/ros/noetic/include/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/home/alvin/workspace/slam_ws/LOAM/LOAM_WS/src/loam_velodyne/include/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/usr/include/**&quot;</span></span><br><span class="line">                ],</span><br></pre></td></tr></table></figure><p>LOAM_WS/src下运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 窗口1 </span></span><br><span class="line"><span class="built_in">source</span> ./devel/setup.bash</span><br><span class="line">roslaunch loam_velodyne loam_velodyne.launch</span><br><span class="line"><span class="comment"># 窗口2 </span></span><br><span class="line"><span class="built_in">source</span> ./devel/setup.bash</span><br><span class="line">rosbag play nsh_indoor_outdoor.bag <span class="comment"># 这里下载的数据集放在了工作空间下</span></span><br></pre></td></tr></table></figure><p><img src="/images/loam-velodyne源码编译与数据集运行/image-20220412211213586.png" alt="image-20220412211213586" style="zoom:50%;" /></p><p>错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] [1628642694.176070835]: Error transforming odometry <span class="string">&#x27;Odometry&#x27;</span> from frame <span class="string">&#x27;/camera_init&#x27;</span> to frame <span class="string">&#x27;camera_init&#x27;</span></span><br><span class="line">[ERROR] [1628642694.509388228]: Error transforming odometry <span class="string">&#x27;Odometry&#x27;</span> from frame <span class="string">&#x27;/camera_init&#x27;</span> to frame <span class="string">&#x27;camera_init&#x27;</span></span><br></pre></td></tr></table></figure><p>解决办法参考：<a href="https://link.zhihu.com/?target=https%3A//github.com/laboshinl/loam_velodyne/issues/157">https://github.com/laboshinl/lo</a></p><p>修改LaserMapping.cpp, LaserOdomertyr.cpp, TransformMaintenance.cpp这三个文件中的“/camera_int”为“camera_init”</p><p><img src="/images/loam-velodyne源码编译与数据集运行/image-20220412212407985.png" alt="image-20220412212407985"></p><h1 id="ALOAM"><a href="#ALOAM" class="headerlink" title="ALOAM"></a>ALOAM</h1><p>源代码地址：<a href="https://github.com/HKUST-Aerial-Robotics/A-LOAM">https://github.com/HKUST-Aerial-Robotics/A-LOAM</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作空间</span></span><br><span class="line">mkdir -p ALOAM_WS/src</span><br><span class="line"><span class="built_in">cd</span> src &amp;&amp; catkin_init_workspace </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/HKUST-Aerial-Robotics/A-LOAM</span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; catkin_make</span><br><span class="line"><span class="comment"># 编译和运行</span></span><br><span class="line">catkin_make -DCMAKE_BUILD_TYPE=Release </span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">source</span> ./devel/setup.bash</span><br></pre></td></tr></table></figure><p>当然会遇到一些问题</p><p>①把你的CMakeLists.txt文件中的C++11声明改成C++14</p><p>ALOAM_WS/src/A-LOAM/CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## set(CMAKE_CXX_FLAGS &quot;-std=c++11&quot;)</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14&quot;</span>)</span><br></pre></td></tr></table></figure><p>②同LOAM，由于rviz版本问题，修改src下文件中的“/camera_int”为“camera_init”</p><p>③将<code>ALOAM_WS/src/A-LOAM/src/kittiHelper.cpp</code>下的<code>CV_LOAD_IMAGE_GRAYSCALE</code>修改为<code>cv::IMREAD_GRAYSCALE</code></p><p>这是由于pencv2 和 3 的命名规范产生了出入，具体查看 <a href="https://blog.csdn.net/qq_28660035/article/details/80772071"><strong>opencv3 与 opencv2 代码区别总结</strong></a></p><p>然后重新编译运行即可：</p><p><img src="/images/loam-velodyne源码编译与数据集运行/image-20220418094922467.png" alt="image-20220418094922467"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;本文主要把loam_velodyne与aloam_velodyne源码进行编译运行，感受一下在数据集下两者的运行效果。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="SLAM项目实践" scheme="https://lukeyalvin.top/categories/SLAM%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="ALOAM" scheme="https://lukeyalvin.top/tags/ALOAM/"/>
    
    <category term="LOAM" scheme="https://lukeyalvin.top/tags/LOAM/"/>
    
  </entry>
  
  <entry>
    <title>LOAM论文深度剖析</title>
    <link href="https://lukeyalvin.top/posts/33314.html"/>
    <id>https://lukeyalvin.top/posts/33314.html</id>
    <published>2022-04-11T03:06:44.036Z</published>
    <updated>2022-05-03T11:35:49.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>LOAM这篇论文是发表于2014年RSS的文章，全称为：LOAM: Lidar Odometry and Mapping in Real-time . LOAM是基于激光雷达而搭建的在ROS平台下的SLAM系统。之后许多激光SLAM算法借鉴了LOAM中的一些思想，可以说学习LOAM对学习3D激光SLAM很有帮助。本文对LOAM原论文进行了解析。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="Ⅰ-概述"><a href="#Ⅰ-概述" class="headerlink" title="Ⅰ.概述"></a>Ⅰ.概述</h1><p>如图所示，整个<code>LOAM</code>的流程为：<code>Lidar</code>接收数据，首先进行<code>Point Cloud Registration</code>，<code>Lidar Odometry</code>以$10Hz$的频率进行运动估计和坐标转换，<code>Lidar Mapping</code>以$1Hz$的频率构建三维地图。这样做主要是为了保证系统的实时性。</p><p><img src="/images/loam论文深度解析/image-20220410153142890.png" alt="image-20220410153142890"></p><p>本文的核心主要在于两个部分：<strong>特征提取（Lidar Registration）</strong>和<strong>里程计解算（Odometry and Mapping）</strong>。<br>当提取出特征后，通过高频率的里程计（Odometry）实现<strong>粗定位</strong>，即为高频低精度；低频率的里程计（Mapping）实现<strong>精定位</strong>，即为低频高精度。 </p><h1 id="Ⅱ-符号约定"><a href="#Ⅱ-符号约定" class="headerlink" title="Ⅱ.符号约定"></a>Ⅱ.符号约定</h1><ul><li><p>一个sweep代表了一次扫描周期，$k$表示第$k$次扫描周期，$k\in Z^+$</p></li><li><p>一个扫描周期内获取到的所有点云记作 $P_k$， 代表了第$k$个扫描周期的点云</p></li><li><p>激光雷达坐标系$\left\{L\right\}$是一个以激光雷达几何中心为原点的三维坐标系。$x$轴是向左的，$y$轴是向上的，$z$轴是向前的。点$i, i\in P_k$在$\left\{L\right\}$中的坐标表示为$X^L_{(k,i)}$。</p></li><li><p>世界坐标系$\left\{W\right\}$是在初始位置与$\left\{L\right\}$重合的三维坐标系。点$i, i\in P_k$在$\left\{W\right\}$中的坐标为$X^W_{(k,i)}$。</p></li></ul><p><strong>已知一段点云序列$P_k,k\in Z^+$ ，计算在前$k$个时期内的雷达位姿以及构建全局地图。</strong></p><h1 id="Ⅲ-特征提取（点云注册）"><a href="#Ⅲ-特征提取（点云注册）" class="headerlink" title="Ⅲ.特征提取（点云注册）"></a>Ⅲ.特征提取（点云注册）</h1><h2 id="A-线束模型"><a href="#A-线束模型" class="headerlink" title="A.线束模型"></a>A.线束模型</h2><p>要读懂代码中特征提取中的一些处理，需要弄清楚<code>VLP16</code>扫描时的运动模型,论文中称单个线束为一个<code>Scan</code>，对全部$16$线组成的一帧点云称为一个<code>Sweep</code>，虽然是用的多线激光雷达,但是LOAM是针对单个<code>Scan</code>提取特征点的，这里主要考虑到线束间角分辨率(竖直分辨率)与单个线内点间角分辨率(水平分辨率)存在的差异。以VLP$16$为例, 竖直分辨率约为$2^\circ$，而水平分辨率最大为$0.4^\circ$。</p><p>角分辨率越大， 代表越远的物体，反射的两点距离越大，中间丢失的信息越多。因此， LOAM没有针对Scan和<code>Scan</code>之间的点的关联性提取和描述特征， 而是直接针对单个<code>Scan</code>提取特征。</p><p><img src="/images/loam论文深度解析/image-20220413152223146.png" alt="image-20220413152223146" style="zoom:50%;" /></p><p><strong>一个Sweep数据的采集如何完成的？</strong></p><p>一帧内所有的点， 都是按顺序穿行扫描的，比如开始的时候水平的第一个角度为$0^\circ$左右，扫描水平角度为$0^\circ$上的竖直方向所有$16$个点（对应$16$个<code>Scan</code>）的深度，并且这$16$个点也是串行按顺序排列的，然后转到下一个水平角度；设水平分辨率为$0.4^\circ$，则下一个水平角度为$0.4^\circ$，其次水平角度为$0.8^\circ$，依次顺时针扫完一圈(论文中是$[-\pi,\pi]$)，这就完成了一个<code>Sweep</code>数据的采集。</p><p><img src="/images/loam论文深度解析/image-20220413162337900.png" alt="image-20220413162337900" style="zoom:50%;" /></p><p>由于从驱动得到的一个<code>Sweep</code>是以点云的形式输出（也就是一堆点，每个点有$XYZ$的信息，点和点之间无其他关系信息），因此我们并不知道每个点属于哪个<code>Scan</code>， 对应哪个水平角度。因此，我们需要根据上面的扫描模型去计算每个点的竖直角度和水平角度。点坐标与竖直角度/水平角度的换算关系如下图所示。[详细翻阅<a href="https://velodynelidar.com/wp-content/uploads/2019/12/63-9243-Rev-E-VLP-16-User-Manual.pdf">vlp-16 sensor coordinate system文档</a>]</p><p><img src="/images/loam论文深度解析/image-20220413151359585.png" alt="image-20220413151359585" style="zoom:50%;" /></p><p>通过这个图很容易就能理解如何确定某个点属于哪个<code>Scan</code>，我们使用激光点的垂直距离除以它的水平距离，就可以得到雷达到该点的射线和水平面的夹角，用过这个夹角我们就可以很容易的判断该点属于哪个<code>Scan</code>。但是，实际上，在多线雷达（比如$32$线，$64$线），由于竖直方向的点更密集，<code>Scan</code>与<code>Scan</code>之间的距离很小，很容易出现把<code>Scan10</code>分配到<code>Scan13</code>这样的误差。当然，如果有条件，可以修改数据存储格式，建议把某个点属于哪个<code>Scan</code>直接保存的该点对应的数据中去。</p><p>摘取对应代码（src/loam_velodyne/src/scanRegistration.cpp）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cloudSize; i++) &#123;</span><br><span class="line">    <span class="comment">//坐标轴交换，velodyne lidar的坐标系也转换到z轴向前，x轴向左的右手坐标系</span></span><br><span class="line">    point.x = laserCloudIn.points[i].y;</span><br><span class="line">    point.y = laserCloudIn.points[i].z;</span><br><span class="line">    point.z = laserCloudIn.points[i].x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算点的仰角(根据lidar文档垂直角计算公式),根据仰角排列激光线号，velodyne每两个scan之间间隔2度</span></span><br><span class="line">    <span class="keyword">float</span> angle = <span class="built_in">atan</span>(point.y / <span class="built_in">sqrt</span>(point.x * point.x + point.z * point.z)) * <span class="number">180</span> / M_PI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-区分边缘点和平面点"><a href="#B-区分边缘点和平面点" class="headerlink" title="B.区分边缘点和平面点"></a>B.区分边缘点和平面点</h2><p>常见的特征点提取方法：特征向量、直方图、旋转图片等。这些方法虽然能很精准的涵盖一帧数据的大部分信息，但是由于计算量大，很难在激光slam的相邻帧的匹配中使用。 因此，需要想一些更好的方法。</p><p>LOAM的特征提取基于曲率，只提取两种特征点：边缘点和平面点，分别对应场景的平面区域和曲折区域。作者根据点的曲率来计算<strong>平面光滑度</strong>作为提取当前帧的特征信息的指标。如下图所示，边缘点的矢量和的模一般较大，矢量<strong>和不为零</strong>向量，而对应平面点的矢量和的模一般较小，矢量<strong>和为零</strong>向量。</p><ul><li>平面点：在三维空间中处于平滑平面上的点，其和周围点的大小差距不大，曲率较低，平滑度较低。</li><li>边缘点：在三维空间中处于尖锐边缘上的点，其和周围点的大小差距较大，曲率较高，平滑度较高。</li></ul><p><img src="/images/loam论文深度解析/image-20220411152638255.png" alt="image-20220411152638255" style="zoom:33%;" /></p><p>可以发现，LOAM没有使用特征描述子(连曲率都没有参与后续的匹配)。从代码中的边缘点与平面点的曲率判断阈值可以看出，LOAM提取的边缘点和平面点特征点的曲率，并没有特别大的差别，这使得LOAM有较强的场景适应性，在场景中比较曲折的区域，边缘点点会占据主导,而在较为平缓的区域，平面点点占据主导。 在激光扫描到的一块区域，总会提取出几个特征点。</p><hr><p>定义<strong>平面光滑度</strong>$c$：</p><script type="math/tex; mode=display">c=\frac{1}{|S|·\parallel X^L_{(k,i)}\parallel} \sum_{j\in S,j\ne i} \parallel (X^L_{(k,i)}-X^L_{(k,j)}) \parallel \tag{1}</script><p>根据$c$值对扫描中的点进行排序，选择$c$值最大的点为边缘点，$c$值最小的点为平面点的特征点。论文中为了在环境中均匀分布特征点，将扫描分割成四个相同的子区域。每个子区域最多可提供$2$个边缘点和$4$个平面点。只有当点$i$的$c$值大于或小于一个阈值，且所选点的个数不超过最大值时，才能将点$i$选择为边缘点或平面点。</p><p>通过代码可以知道这四个相同的子区域分别为：</p><ul><li>曲率特别大的点（sharp）</li><li>曲率大的点（less_sharp）</li><li>曲率特别小的点（flat）</li><li>曲率小的点（less_flat）</li></ul><p>代码中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点分类标号:2-代表曲率很大，1-代表曲率比较大,-1-代表曲率很小，0-曲率比较小(其中1包含了2,0包含了1,0和1构成了点云全部的点)</span></span><br><span class="line"><span class="keyword">int</span> cloudLabel[<span class="number">40000</span>];</span><br></pre></td></tr></table></figure><blockquote><p>这样操作的主要作用是，在进行后面的优化的时候，我们能根据这样的“等级”划分获得更明显</p></blockquote><h2 id="C-不可靠点的删除"><a href="#C-不可靠点的删除" class="headerlink" title="C.不可靠点的删除"></a>C.不可靠点的删除</h2><p>如图所示，对位于平行于激光束的表面上的点，以及被遮挡区域(虚线橙线段)的边界上的点，可以被检测为边缘点。它们都是不可靠的。</p><p><img src="/images/loam论文深度解析/image-20220410153159251.png" alt="image-20220410153159251" style="zoom:50%;" /></p><p>选取点的三要素：</p><ul><li>选择的边缘点或平面点的数量不能超过子区域的最大值</li><li>它周围的点都没有被选中</li><li>它不能在大致平行于激光束的表面上，也不能在被遮挡区域的边界上。</li></ul><p>经过特征点的提取，就可以得到论文中的帧数据对应的特征信息（边缘点和平面点分别用黄色和红色标记。）：</p><p><img src="/images/loam论文深度解析/image-20220410153221345.png" alt="image-20220410153221345" style="zoom:50%;" /></p><h1 id="Ⅳ-特征点匹配"><a href="#Ⅳ-特征点匹配" class="headerlink" title="Ⅳ.特征点匹配"></a>Ⅳ.特征点匹配</h1><p>将点云重新投影到扫描的末端。蓝色线段表示扫描$k$时感知到的点云 $P_k$，在$k$次扫描结束时，经过<strong>畸变校正</strong>之后将$P_k$重新投影到时间戳$t_{k+1}$，得到绿色线段$\overline{P}_k$。然后，在$k+1$次扫描时，重投影点云数据(经过畸变校正)$\overline{P}_k$和新感知的点云$P_{k+1}$(橙色线段)一起估计激光雷达运动。</p><p><img src="/images/loam论文深度解析/image-20220410153230555.png" alt="image-20220410153230555" style="zoom:50%;" /></p><p>我们根据论文中的描述：</p><ul><li><p>$P_k$是$k$时刻激光雷达感知的点云集合， 根据上文的特征提取规则，得到边缘点的集合$\xi_{k}$和平面点的集合$H_{k}$；</p></li><li><p>$\overline{P}_k$是将$k$时刻激光雷达感知的点云集合$P_k$，经过畸变校正得到的点云集合；</p></li><li>$P_{k+1}$是$k+1$时刻激光雷达感知的点云集合， 类似$P_k$，边缘点的集合$\xi_{k+1}$以及平面点的集合$H_{k+1}$；</li><li>在每次迭代中，使用当前估计的变换将$\xi_{k+1}$和$H_{k+1}$重新投影到扫描的开始，记$\tilde{\xi}_{k+1}$和$\tilde{H}_{k+1}$为重投影的点集。</li></ul><blockquote><p>这里我们将$k$时刻的扫描点云$P_k$经过畸变校正，得到了$\overline{P}_k$，然后$k+1$时刻的扫描点云$P_{k+1}$的$\xi_{k+1}$和$H_{k+1}$重投影到了扫描的开始，得到$\tilde{\xi}_{k+1}$和$\tilde{H}_{k+1}$，这样就使得$\overline{P}_k$与$\tilde{\xi}_{k+1}$和$\tilde{H}_{k+1}$统一在同一坐标系下，进而我们才可以计算下面的距离。</p></blockquote><hr><h2 id="A-激光雷达数据的畸变"><a href="#A-激光雷达数据的畸变" class="headerlink" title="A.激光雷达数据的畸变"></a>A.激光雷达数据的畸变</h2><p>激光雷达数据产生的畸变又叫<strong>激光雷达自运动畸变</strong>，对于多数激光雷达而言，尽管激光的发射与接收很快，但构成点云的每一个点仍非同一时刻生成的。一般我们会将$100ms $(对应典型值$10Hz$) 内累积的数据作为一帧点云输出。若在这$100ms$内，激光雷达本体或安装所在的机体发生绝对位置的变化，那么<strong>此帧点云中每一个点的坐标系就是不同的。</strong>直观上看，这一帧点云数据就会发生一定的“变形”，不能真实对应所探测到的环境信息，类似于拍照时手抖了，拍出来的照片就会糊。这便是激光雷达的自运动畸变。</p><p>举一个例子，激光雷达对面有一面平行的墙面，理想状况下激光处于位置A或者位置B位置墙面的点云应该一样，但实际上，由于在这$100ms$内，激光雷达本身在运动，所以这一帧的墙面的点云中，某些点的坐标系就变得不同了，进而失去了原始平行墙面的特征，所以说，AB位置的差距必须要考虑，或者说激光在这期间的运动必须要考虑。</p><p><img src="/images/loam论文深度解析/image-20220411193701848.png" alt="image-20220411193701848" style="zoom:33%;" /></p><h2 id="B-将点与线和面匹配的原因"><a href="#B-将点与线和面匹配的原因" class="headerlink" title="B.将点与线和面匹配的原因"></a>B.将点与线和面匹配的原因</h2><p>理想情况下，没有畸变，激光雷达在短时间里获取的相邻帧数据是<strong>含有大量同一特征点</strong>的，也就是$P_k$和$P_{k+1}$中很多特征点只是雷达在不同位置下观察的同一个点。所以只要找到一个变化关系$T$使得$P_k$和$P_{k+1}$对应的点的匹配，这个$T$就是表示激光雷达的帧间运动。为了减少计算量，增加鲁棒性，不直接使用点与点的匹配，而是使用边缘点和对应的线特征，平面点和对应的面特征，这样也可以得到变换关系 $T$。</p><p>但是实际情况下，激光雷达的点云数据是含有畸变的，所以作者将矫正的$P_k$重新投影到时间戳$t_{k+1}$，得到$\overline{P}_k$。我们的目的就是：从$\overline{P}_k$中找到与$\xi_{k+1}$中的点对应的边线，从平面图中找到与$H_{k+1}$中的点对应的平面贴片(patch)。那么现在就是一边进行矫正，一边进行匹配，然后进行迭代。迭代过程中，$T$的值不断变化，直到寻找到一个$T$使得<strong>所有点和对应特征区域距离和最小</strong>。</p><h2 id="C-点和对应特征区域距离的计算"><a href="#C-点和对应特征区域距离的计算" class="headerlink" title="C.点和对应特征区域距离的计算"></a>C.点和对应特征区域距离的计算</h2><p><img src="/images/loam论文深度解析/image-20220411202023128.png" alt="image-20220411202023128" style="zoom:50%;" /></p><p>其中：$i\in \tilde{\xi}_{k+1}$，$j,l,m\in \overline{P}_k$</p><p>图$7(a)$给出了寻找边缘点对应的边线的过程。设$i$是属于$\tilde{\xi}_{k+1}$的点，即$ i \in \tilde{\xi}_{k+1}$。边线由两个点表示。设$j$是$i$在$\overline{P}_k$中的最近邻，$j\in \overline{P}_k$，设$l$是$i$在连续两次扫描$j$时的最近邻，$(j, l)$构成$i$的对应关系。然后，为了验证$j$和$l$都是边缘点，我们根据公式$(1)$来检查局部表面的平滑度。这里，我们特别要求$j$和$l$来自不同的扫描，考虑到一次扫描不能包含来自同一边线的多个点。</p><p>图$7(b)$显示了寻找平面贴片(patch)作为平面点对应的过程。设$ i$ 为$\tilde{H}_{k+1}$中的一个点，即$i \in  \tilde{H}_{k+1}$。平面贴片(patch)由三个点表示。与上一段类似，我们在$\overline{P}_k$中找到$ i $的最近邻，记为$j$。 然后，我们找到另外两个点 $l$ 和$ m$，作为$ i $的最近邻，一个在$j $的同一扫描中，另一个在 $j $的两次连续扫描中。 这保证了三个点是非共线的。 为了验证 $j$、$l$和 $m$ 都是平面点，我们根据$ (1) $再次检查局部表面的平滑度。</p><p>根据匹配的原理，可以构造优化问题：求解变换关系$T$，使边缘点和边缘线距离最短，平面点和平面距离最短</p><ul><li><p>$\tilde{X}^L_{(k+1,i)}$    ：表示$i， i \in \tilde{\xi}_{k+1}$在$\left\{L\right\}$中的坐标;</p></li><li><p>$\overline{X}^L_{(k,j)}$：表示$j， j \in \overline{P}_k$在$\left\{L\right\}$中的坐标;</p></li><li><p>$\overline{X}^L_{(k,l)}$：表示$l， l\in \overline{P}_k$在$\left\{L\right\}$中的坐标;</p></li><li><p>$\overline{X}^L_{(k,m)}$：表示$m， m\in \overline{P}_k$在$\left\{L\right\}$中的坐标;</p></li></ul><h3 id="a-点到线的距离"><a href="#a-点到线的距离" class="headerlink" title="a.点到线的距离"></a>a.点到线的距离</h3><p>主要原理是利用“<strong>两向量叉积的模等于以这两个向量为边形成的平行四边形的面积</strong>”这条定理。</p><p>如下图：</p><script type="math/tex; mode=display">S=OD·AB=|\overrightarrow{OA}×\overrightarrow {OB}|=|\overrightarrow{OA}|·|\overrightarrow{OB}|·sin\theta</script><p>如果我们需要求高：</p><script type="math/tex; mode=display">OD = \frac{S}{|\overrightarrow{AB}|}=\frac{|\overrightarrow{OA}×\overrightarrow {OB}|}{|\overrightarrow{AB}|}</script><p><img src="/images/loam论文深度解析/image-20220411204216656.png" alt="image-20220411204216656" style="zoom: 25%;" /></p><p>所以对于：</p><p><img src="/images/loam论文深度解析/image-20220411204829280.png" alt="image-20220411204829280" style="zoom: 50%;" /></p><p>得到点到线的距离$d_\xi$为：</p><script type="math/tex; mode=display">d_{\xi}=\frac{|(\tilde{X}^L_{(k+1,i)}-\overline{X}^L_{(k,j)})×(\tilde{X}^L_{(k+1,i)}-\overline{X}^L_{(k,l)})|}{|\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)}|}. \tag{2}</script><h3 id="b-点到面的距离"><a href="#b-点到面的距离" class="headerlink" title="b.点到面的距离"></a>b.点到面的距离</h3><p> 主要原理是<strong>点与平面内一点形成的向量与该平面的单位法向量的点积的模即为该点到平面的距离</strong>。</p><p><img src="/images/loam论文深度解析/image-20220411210656962.png" alt="image-20220411210656962" style="zoom:50%;" /></p><script type="math/tex; mode=display">d_\mathcal{H}=\frac{\begin{vmatrix}(\tilde{X}^L_{(k+1,i)}-\overline{X}^L_{(k,j)})·((\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)})×(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,m)}))\end{vmatrix}}{\begin{vmatrix}(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)})×(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,m)})\end{vmatrix} }. \tag{3}</script><h1 id="Ⅴ-运动估计"><a href="#Ⅴ-运动估计" class="headerlink" title="Ⅴ.运动估计"></a>Ⅴ.运动估计</h1><h2 id="A-线性插值"><a href="#A-线性插值" class="headerlink" title="A.线性插值"></a>A.线性插值</h2><p><img src="/images/loam论文深度解析/Linear_interpolation.png" alt="Linear interpolation.png"></p><p>假设我们已知坐标 $(x_0,y_0)$ 与$(x_1,y_1)$，要得到$[x_0.x_1]$区间内某一位置 $x$ 在直线上的值。根据图中所示，我们得到:</p><script type="math/tex; mode=display">\frac{y-y_0}{x-x_0}=\frac{y_1-y_0}{x_1-x_0}</script><p>由于 $x$值已知，所以可以从公式得到 $y $的值:</p><script type="math/tex; mode=display">y=y_0+\frac{y_1-y_0}{x_1-x_0}(x-x_0)</script><p>线性插值经常用于已知函数$ f $在两点的值要近似获得其它点数值的方法，这种近似方法的误差定义为:</p><script type="math/tex; mode=display">R_T=f(x)-p(x)</script><p>其中 $p$ 表示上面定义的线性插值多项式</p><script type="math/tex; mode=display">p(x)=f(x_0)+\frac{f(x_1)-f(x_0)}{x_1-x_0}(x-x_0). \tag{4}</script><p>根据罗尔定理，我们可以证明：如果 f 有二阶连续导数，那么误差范围是：</p><script type="math/tex; mode=display">|R_T|\leq \frac{(x_1-x_0)^2}{8}\underset{x_0\leq x\leq x_1}{max}|f^{\prime\prime}(x)|</script><h2 id="B-运动估计"><a href="#B-运动估计" class="headerlink" title="B.运动估计"></a>B.运动估计</h2><p>激光雷达运动在扫描期间以<strong>恒定的角速度和线速度建模</strong>。这允许我们在一个扫描中对在不同时间接收到的点进行线性插值。</p><p>假设$t$是当前的时间戳，$t_{k+1}$是扫描$k+1$的开始时间。</p><p>设$T^L_{k+1}$为$[t_{k+1}, t]$之间的激光雷达位姿变换。$T^L_{k+1}$包含$6$自由度激光雷达的刚性运动，$T^L_{k+1} = [t_x, t_y, t_z， θ_x， θ_y， θ_z]^T$，其中我们用$T^L_{k+1}(1:3)$表示 $t_x$、$t_y$和$t_z$，它们分别是$\left\{L\right\}$沿$x-$、$y-$和$z-$轴的平移，我们用$T^L_{k+1}(4:6)$表示$θ_x$、$θ_y$和$θ_z$，它们是旋转角度，遵循右手规则。</p><p>给定点$i，i \in P_k$，设$t_i$为其时间戳，设为$[t_{k+1}, t_i]$之间的$T^L_{(k+1,i)}$位姿变换。</p><p><img src="/images/loam论文深度解析/image-20220429100816545.png" alt="image-20220429100816545" style="zoom:67%;" /></p><p>$T^L_{(k+1,i)}$可以通过$T^L_{k+1}$的线性插值得到：</p><script type="math/tex; mode=display">\begin{align}\frac{T^L_{(k+1,i)} }{t_i-t_{k+1} }&=\frac{ T^L_{k+1}}{t-t_{k+1} }.\end{align}</script><p>整理一下即为论文中的公式:</p><script type="math/tex; mode=display">T^L_{(k+1,i)}=\frac{t_i-t_{k+1} }{t-t_{k+1} }T^L_{k+1}. \tag{5}</script><p>由前文：在每次迭代中，使用当前估计的变换将$\xi_{k+1}$和$H_{k+1}$重新投影到扫描的开始，记$\tilde{\xi}_{k+1}$和$\tilde{H}_{k+1}$为重投影的点集。由于激光雷达位姿的变化，设旋转矩阵为$R$，平移向量$t=T^L_{(k+1,i)}(1:3)$我们可以得到：</p><script type="math/tex; mode=display">X^L_{(k+1,i)}=R\tilde X^L_{(k+1,i)}+T^L_{(k+1,i)}(1:3). \tag{6}</script><p>由罗德里格斯公式：</p><script type="math/tex; mode=display">R=e^{\hat{w} \theta}=I + \hat{w}sin\theta+\hat{w}^2(1-cos\theta).\tag{7}</script><p>在上式中，$θ$为旋转的大小，</p><script type="math/tex; mode=display">\theta = \parallel T^L_{(k+1,i)}(4:6) \parallel. \tag{8}</script><p>$w$是表示旋转方向的单位向量，</p><script type="math/tex; mode=display">w=\frac{T^L_{(k+1,i)}(4:6)}{\parallel T^L_{(k+1,i)}(4:6) \parallel}. \tag{9}</script><p>$\hat{w}$为$w$的斜对称矩阵[25]。</p><p>忆$(2)$和$(3)$计算属于$\tilde \xi_{k+1} $ 和$\tilde H_{k+1}$ 的点之间的距离及其对应关系。结合$(2)$和$(5)-(8)$，我们可以推导出$\xi_{k+1}$中的一个边点与相应的边线之间的几何关系，</p><script type="math/tex; mode=display">f_{\xi}(X^L_{(k+1,i)},T^L_{k+1})=d_\xi,i\in \xi_{k+1}.\tag{10}</script><p>合$(3)(5)-(8)$，我们可以在$H_{k+1}$中的一个平面点与对应的平面贴片(patch)建立另一个几何关系，</p><script type="math/tex; mode=display">f_H(X^L_{(k+1,i)},T^L_{k+1})=d_H,i\in H_{k+1}.\tag{11}</script><p>最后，我们用<code>Levenberg-Marquardt</code>方法[26]求解激光雷达运动。将$\xi_{k+1}$和$H_{k+1}$中每个特征点$(10)$和$(11)$叠加，得到一个非线性函数:</p><script type="math/tex; mode=display">f(T^L_{k+1})=d,\tag{12}</script><p>其中每一行$f$对应一个特征点，$d$包含相应的距离。我们计算$f$关于$T^L_{k+1}$的雅可比矩阵，记作$J$，其中$J =\partial f /\partial T^L_{k+1}$。然后，$(12)$通过非线性迭代，使$d$趋近于$0$，</p><script type="math/tex; mode=display">T^L_{k+1}\gets T^L_{k+1}-(J^TJ+\lambda diag(J^TJ))^{-1}J^Td.\tag{13}</script><p>$\lambda$是由<code>Levenberg-Marquardt</code>方法确定的因子</p><h2 id="C-雅可比矩阵求解"><a href="#C-雅可比矩阵求解" class="headerlink" title="C.雅可比矩阵求解"></a>C.雅可比矩阵求解</h2><p>LOAM中代价函数主要由两部分组成，即点到面的距离与点到线的距离，因此LOAM的代价函数不难写出：</p><script type="math/tex; mode=display">loss= \sum^{N_{\xi} }_{i=1}d_{\xi_i}+\sum^{N_{H} }_{i=1}d_{H_i}=D(\tilde{X}^L_{(k+1,i)}).\tag{14}</script><blockquote><p>我们的目的就是残差对位姿求偏导，进而求得一个使得残差最小的最优位姿。</p></blockquote><p>定义$t+1$时刻的位姿：$T^L_{k+1} = [t_x, t_y, t_z， θ_x， θ_y， θ_z]^T$，其中我们用$t=T^L_{k+1}(1:3)=[t_x, t_y, t_z]^T$表示位移 $t_x$、$t_y$和$t_z$，同时$R$也可以通过$T^L_{k+1}$经罗德里格斯公式求解。</p><p>特征点从当前雷达坐标系投影到目标坐标系：</p><script type="math/tex; mode=display">\tilde X^L_{(k+1,i)}=R X^L_{(k+1,i)}+t=G(X^L_{(k+1,i)},T^L_{k+1})</script><blockquote><p>这里与论文略有不同，这里$t_{k+1}$时刻的点经过位姿变化投影到$t_{k}$时刻，进而将两帧的点云统一在一个坐标系下，论文中是相反的（公式6），但是含义是一样的。</p></blockquote><p>将旋矩阵转换成欧拉角：</p><script type="math/tex; mode=display">\begin{align*}R &= R_yR_xR_z\\&=\begin{bmatrix}c_yc_z+s_ys_xs_z &c_zs_ys_x-c_ys_z &c_xs_y\\c_xs_z&c_xc_z&-s_x\\c_ys_xs_z-c_zs_y&c_yc_zs_x+s_ys_z&c_yc_x\end{bmatrix}\end{align*}.\tag{15}</script><p>其中$c_x=cos(\theta_x),c_y=cos(\theta_y),c_z=cos(\theta_z),s_x=sin(\theta_x),s_y=sin(\theta_y),s_z=sin(\theta_z)$</p><p>将$(14)(15)$合并：</p><script type="math/tex; mode=display">loss=F(X^L_{(k+1,i)},T^L_{k+1})=D(G(X^L_{(k+1,i)},T^L_{k+1})).\tag{16}</script><p>损失函数建立之后，我们就可以优化位姿，求损失对于位姿的偏导：</p><script type="math/tex; mode=display">\begin{align*}J&=\frac{\partial F(X^L_{(k+1,i)},T^L_{k+1}) }{\partial T^L_{k+1} }\\&=\frac{\partial D(G(X^L_{(k+1,i)},T^L_{k+1})) }{\partial T^L_{k+1} }\\&=\frac{\partial D(\tilde{X}^L_{(k+1,i)})}{\partial \tilde{X}^L_{(k+1,i)} }·\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial T^L_{k+1} }\end{align*}.\tag{17}</script><p>我们分别对这两部分进行推导：</p><ul><li>$\frac{\partial D(\tilde{X}^L_{(k+1,i)})}{\partial \tilde{X}^L_{(k+1,i)} }$的求解</li></ul><p>这部分表示的是损失函数对点云的偏导，这部分没有必要通过变量求导的方式去推导，我们知道求偏导就是求梯度方向，梯度方向就是使得残差减小的最快的方向；对于点云来说，残差减小最快的方向就是垂直于特征区域的方向：</p><p>​    ①对于线特征，梯度方向为通过特征点的垂直于直线的方向：</p><script type="math/tex; mode=display">\frac{\partial D(\tilde{X}^L_{(k+1,i)})}{\partial \tilde{X}^L_{(k+1,i)} }=[a_\xi,b_\xi,c_\xi]^T</script><p>​    ②对于面特征，梯度方向为通过特征点的垂直于平面的方向：</p><script type="math/tex; mode=display">\frac{\partial D(\tilde{X}^L_{(k+1,i)})}{\partial \tilde{X}^L_{(k+1,i)} }=[a_\mathcal{H},b_\mathcal{H},c_\mathcal{H}]^T</script><ul><li>$\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial T^L_{k+1} }$的求解</li></ul><p>这部分表示的是点云对位姿的偏导，主要是对平移和旋转的求导：</p><p>​    ①对平移求导</p><script type="math/tex; mode=display">\begin{align*}\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial t_x}=\frac{\partial G(R X^L_{(k+1,i)}+t)}{\partial t_x}=\begin{bmatrix} 1\\0\\0 \end{bmatrix}\end{align*}</script><script type="math/tex; mode=display">\begin{align*}\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial t_y}=\frac{\partial G(R X^L_{(k+1,i)}+t)}{\partial t_y}=\begin{bmatrix} 0\\1\\0 \end{bmatrix}\end{align*}</script><script type="math/tex; mode=display">\begin{align*}\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial t_z}=\frac{\partial G(R X^L_{(k+1,i)}+t)}{\partial t_z}=\begin{bmatrix} 0\\0\\1 \end{bmatrix}\end{align*}</script><p>​    ②对角度求导</p><script type="math/tex; mode=display">\begin{align*}\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial \theta_x }&=\frac{\partial G(R X^L_{(k+1,i)}+t)}{\partial \theta_x }=\frac{\partial G(R X^L_{(k+1,i)})}{\partial \theta_x }\\&=\begin{bmatrix}s_yc_xs_z&c_zs_yc_x &-s_xs_y\\-s_xs_z &-s_xc_z&-c_x\\c_yc_xs_z&c_yc_zc_x&-c_ys_x\end{bmatrix}\begin{bmatrix}x_{(k+1,i)}\\y_{(k+1,i)}\\z_{(k+1,i)}\end{bmatrix}\end{align*}</script><script type="math/tex; mode=display">\begin{align*}\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial \theta_y }&=\frac{\partial G(R X^L_{(k+1,i)}+t)}{\partial \theta_y }=\frac{\partial G(R X^L_{(k+1,i)})}{\partial \theta_y }\\&=\begin{bmatrix}-s_yc_z+c_ys_xs_z&c_zc_ys_x+s_ys_z &c_xc_y\\0&0&0\\-s_ys_xs_z-c_zc_y&-s_yc_zs_x+c_ys_z&-s_yc_x\end{bmatrix}\begin{bmatrix}x_{(k+1,i)}\\y_{(k+1,i)}\\z_{(k+1,i)}\end{bmatrix}\end{align*}</script><script type="math/tex; mode=display">\begin{align*}\frac{\partial G(X^L_{(k+1,i)},T^L_{k+1})}{\partial \theta_z }&=\frac{\partial G(R X^L_{(k+1,i)}+t)}{\partial \theta_z}=\frac{\partial G(R X^L_{(k+1,i)})}{\partial \theta_z }\\&=\begin{bmatrix}-c_ys_z+s_ys_xc_z&-s_zs_ys_x &0\\c_xc_z &-c_xs_z&0\\c_ys_xc_z+s_zs_y&-c_ys_zs+s_yc_z&0\end{bmatrix}\begin{bmatrix}x_{(k+1,i)}\\y_{(k+1,i)}\\z_{(k+1,i)}\end{bmatrix}\end{align*}</script><h1 id="Ⅵ-构建地图"><a href="#Ⅵ-构建地图" class="headerlink" title="Ⅵ.构建地图"></a>Ⅵ.构建地图</h1><h2 id="A-概览"><a href="#A-概览" class="headerlink" title="A.概览"></a>A.概览</h2><p><strong>①为什么使用建图节点？</strong></p><p>通过前面的步骤，我们计算出了帧间的里程计，可以对激光雷达的运动做粗略的估计，但是由于收到噪声的影响，位姿估计并不是准确，经过长时间的累积漂移会直接导致最终拼接的地图不成样子，因此，我们还需要依靠其他的方式对位姿进行估计进一步优化。</p><p>在SLAM领域，一般会采用与地图匹配的方式来优化这一结果。其实道理也很简单，我们始终认为后一时刻的观测较前一时刻带有更多的误差，换而言之，我们更加信任前一时刻结果。因此我们对已经构建地图的信任程度远高于临帧点云配准后的Lidar运动估计。所以我们可以利用已构建地图对位姿估计结果进行修正。</p><p>因此建图的作用就是 <span style="color:red;">优化Lidar里程计的位姿估计结果</span></p><p><strong>②建图节点如何工作的？</strong></p><p>如何利用地图进行优化呢？在文章的开始，我们就说里程计部分是高频率低精度，而地图部分是低频率高精度，所以才说里程计估计的位姿仅仅是粗略的估计，而利用地图的优化则是高精度的，但考虑资源消耗，所以调用频率相对于里程计的十分之一。</p><ul><li><p>首先，假设激光雷达在第一帧的时候得到数万个点云，此时Lidar的位置我们把它作为$(0,0,0)$，（此时记雷达位姿为$T^W_k$，地图 $ Q_k$），此时如果不考虑测量误差，则这数万个点都是精确的，我们把这数万个点所构成的环境作为此时的地图。</p></li><li><p>然后，假如激光雷达运动了一小段，得到了第二帧的点云，我们通过激光雷达里程计的方法估计了帧间的相对运动（就是$T^L_{k+1}$），但我们说了里程计的位姿估计是一个粗略的、低精度的、高频率的，因此我们做下一步操作。</p></li><li>最后，我们利用里程计得到的粗略的位姿估计，把第二帧的点云转换到第一帧（建立地图时的坐标系）的坐标系下，很显然，由于里程计不准确，就会导致地图拼歪了（就是论文中的$ \overline{Q}_{k+1}$），而建图节点的作用就是把歪的地图扶正后完整的拼上去，这就从另一个角度优化的雷达的位姿。</li></ul><p>但是，我们要清楚，拿当前的点云和地图中所有的点云去配准，这个计算量十分巨大，消耗也非常大，但是又要保证算法的实时性，所以调用建图节点的频率仅为调用里程计节点频率的十分之一。</p><p><img src="/images/loam论文深度解析/image-20220416101236496.png" alt="image-20220416101236496"></p><p>建图过程如右图示意。 蓝色曲线表示地图上的激光雷达位姿$T^W_k$ ，由建图算法在扫描 $k $处生成。 橙色曲线表示扫描 $k + 1$期间的激光雷达运动$T^L_{k+1}$，由里程计算法计算得出。 使用$ T^W_k$和$T^L_{k+1}$，将里程计算法发布的未失真点云投影到地图上，表示为（绿色线段）$\overline{Q}_{k+1}$，并与地图上现有的云$ Q_k$（黑色线段）进行匹配。</p><h2 id="B-合并地图点"><a href="#B-合并地图点" class="headerlink" title="B.合并地图点"></a>B.合并地图点</h2><p>合并地图点并没有在论文中提及，但是在代码中体现出来了，它更多的是一种工程实验的手段。在上文，我们知道第二帧的地图点在往第一帧做匹配然后去合并到第一帧，这样就能够形成一个地图，但是应该如何合并这是一个问题。</p><p>合并的规则：就是把场景看成一个立方体，然后划分成一定的小网格，将落入小网格的特征点进行合并，等下一帧的点云进来的时候，找对应的栅格即可。</p><ul><li>把关键帧的特征点按照位姿转到地图坐标系中</li><li>按照位置和<code>cube</code>尺寸划分到对应的<code>cube</code>中</li></ul><h2 id="C-优化位姿"><a href="#C-优化位姿" class="headerlink" title="C.优化位姿"></a>C.优化位姿</h2><p>优化位姿与里程计相同。</p><h1 id="Ⅶ-参考链接"><a href="#Ⅶ-参考链接" class="headerlink" title="Ⅶ.参考链接"></a>Ⅶ.参考链接</h1><p><a href="https://zhuanlan.zhihu.com/p/111388877/">LOAM-SLAM原理深度解析</a></p><p><a href="https://zhuanlan.zhihu.com/p/260012025/">LOAM SLAM原理之论文原理解读</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI5MTM1MTQwMw==&amp;mid=2247530490&amp;idx=1&amp;sn=7d1c84b1a4b338887d9c9061da1bd0e3&amp;chksm=ec13c9fedb6440e87aeec427609c2c8592590353565c307e6bd046b1f168af75918871b457b4&amp;scene=132#wechat_redirect">【泡泡点云时空LOAM专题-3】LOAM 代价函数设计与雅可比求解详细推导（上）</a></p><p><a href="https://zhuanlan.zhihu.com/p/57351961">LOAM细节分析</a></p><p><a href="https://www.bilibili.com/video/BV1744y1J7ov/?spm_id_from=333.788.recommend_more_video.1">任务4 前端里程计LOAM系列</a></p><p><a href="https://zhuanlan.zhihu.com/p/29939195">LOAM:3D激光里程计及环境建图的方法和实现（三）</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;LOAM这篇论文是发表于2014年RSS的文章，全称为：LOAM: Lidar Odometry and Mapping in Real-time . LOAM是基于激光雷达而搭建的在ROS平台下的SLAM系统。之后许多激光SLAM算法借鉴了LOAM中的一些思想，可以说学习LOAM对学习3D激光SLAM很有帮助。本文对LOAM原论文进行了解析。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="LOAM" scheme="https://lukeyalvin.top/tags/LOAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/tags/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>LOAM论文翻译</title>
    <link href="https://lukeyalvin.top/posts/36439.html"/>
    <id>https://lukeyalvin.top/posts/36439.html</id>
    <published>2022-04-10T07:29:00.883Z</published>
    <updated>2022-04-30T02:18:45.490Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>LOAM是Ji Zhang于2014年提出的使用激光雷达完成定位与三维建图的算法，即Lidar Odometry and Mapping。之后许多激光SLAM算法借鉴了LOAM中的一些思想，可以说学习LOAM对学习3D激光SLAM很有帮助。本文对LOAM原论文进行了翻译。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>我们提出了一种实时里程测量和地图绘制方法，该方法使用$ 6$ 自由度移动的$ 2$ 轴激光雷达的距离测量。这个问题很难解决，因为距离测量是在不同的时间接收的，运动估计中的错误可能会导致结果点云的错误配准。迄今为止，我们可以通过离线批处理方法构建连贯的 $3D$ 地图，通常使用循环闭合来校正随时间的漂移。我们的方法实现了低漂移和低计算复杂度，无需高精度测距或惯性测量。获得这一性能水平的关键思想是通过两种算法来划分同时定位和建图的复杂问题，该问题寻求同时优化大量变量。一种算法以高频但低保真度进行里程测量，以估计激光雷达的速度。另一种算法以较低数量级的频率运行，用于点云的精细匹配和配准。这两种算法的结合允许该方法实时建图。该方法已通过大量实验以及 KITTI 里程计基准进行了评估。结果表明，该方法可以达到离线批处理方法的精度水平。</p><h1 id="I-介绍"><a href="#I-介绍" class="headerlink" title="I. 介绍"></a>I. 介绍</h1><p>$3D$ 建图仍然是一种流行的技术 [1]–[3]。使用激光雷达进行建图是常见的，因为激光雷达可以提供高频范围测量，无论测量的距离如何，误差都相对恒定。在激光雷达的唯一运动是旋转激光束的情况下，点云的配准很简单。然而，如果激光雷达本身在许多环境的应用中都在移动，则精确建图需要在连续激光测距期间了解激光雷达的位姿。解决这个问题的一种常见方法是使用独立的位置估计(例如通过GPS/INS)将激光点注册到一个固定的坐标系中。另一组方法使用里程计测量，如从轮编码器或视觉里程计系统[4]，[5]记录激光点。由于里程计集成了随时间推移的微小增量运动，它必然会发生漂移，因此人们非常关注如何减少漂移(例如使用环路闭合)。</p><p>在这里，我们考虑使用$6$自由度移动的$2$轴激光雷达创建低漂移里程计地图的情况。使用激光雷达的一个关键优势是它对场景中的环境光线和光学纹理不敏感。随着激光雷达的发展，它们的尺寸和重量缩小了很多。激光雷达在人手持的情况下穿越环境 [6]，也可以连接到微型飞行器 [7]。由于我们的方法旨在推动里程计估计中的最小化漂移相关的问题，因此目前不涉及回环问题。</p><p><img src="/images/loam论文翻译/image-20220410153023132.png" alt="image-20220410153023132"></p><blockquote><p>图1所示。该方法的目标是利用移动两轴激光雷达进行运动估计和建图。由于接收激光点的时间不同，激光雷达的运动导致点云出现失真(如图左侧的激光雷达云所示)。我们提出的方法是将问题分解为两个并行运行的算法。里程计算法估计激光雷达的速度和校正点云中的失真，然后建图算法匹配并注册点云以创建地图。两种算法的结合保证了问题的实时可行性。</p></blockquote><p>该方法实现了低漂移和低计算复杂度，无需高精度测距惯性测量。获得这一性能水平的关键思想是用两种算法将通常复杂的同时定位与建图(SLAM)[8]问题分割开来，该问题旨在同时优化大量变量。其中一种算法采用高频但保真度较低的里程计来估计激光雷达的速度。另一种算法以较低数量级的频率运行，用于点云的精细匹配和配准。虽然没有必要，但如果IMU可用，可以提供一个运动先验来帮助描述高频运动。两种算法分别提取尖锐边缘和平面表面上的特征点，并将其分别与边缘线段和平面表面斑块进行匹配。里程计算法在保证快速计算的前提下，找到特征点的对应关系。在建图算法中，通过相关特征值和特征向量检查局部点簇的几何分布来确定对应关系。</p><p>通过对原问题的分解，首先解决了一个简单的问题，即在线运动估计。之后，建图作为批量优化（类似于迭代最近点（ICP）方法 [9]）进行，以生成高精度运动估计和地图。并行算法结构保证了问题实时求解的可行性。此外，由于运动估计是在更高的频率下进行的，因此给建图足够的时间来提高精度。当以较低的频率运行时，建图算法能够包含大量的特征点，并使用足够多的迭代进行收敛。</p><h1 id="II-相关工作"><a href="#II-相关工作" class="headerlink" title="II.相关工作"></a>II.相关工作</h1><p>激光雷达已经成为机器人导航中应用广泛的传感器 [10]。对于定位和建图，大多数都使用 $2D $激光雷达[11]。当激光雷达扫描速率远高于其外部运动时，扫描中的运动失真通常可以忽略。在这种情况下，标准$ICP $方法[12] 可用于匹配不同扫描之间的激光数据。此外，提出了一种两步法来消除失真[13]:基于$ICP$的速度估计步骤，然后使用计算的速度进行失真补偿步骤。类似的技术也用于补偿单轴 $3D$激光雷达引入的失真[14]。然而，如果扫描运动相对缓慢，则运动失真可能严重。这也是为什么使用两轴激光雷达，因为一个轴通常比另一个轴慢得多。通常，其他传感器用于提供速度测量，通过这些测量，可以消除运动失真。例如，激光雷达点云可以通过与 IMU[15] 集成的视觉里程计的状态估计来注册。当多个传感器（如 GPS/INS 和车轮编码器）同时可用时，问题通常通过扩展卡尔曼滤波器[16] 或粒子滤波器 [1] 解决。这些方法可以实现实时建图，以辅助机器人导航中的路径规划和避障。</p><p>如果在不借助其他传感器的情况下使用双轴激光雷达，运动估计和失真校正将成为一个问题。Barfoot 等人使用的一种方法是从返回激光强度创建视觉图像，并在图像之间匹配视觉上不同的特征 [17]，以恢复地面车辆的运动[18]–[21]。在[18]、[19] 中，车辆运动被建模为恒定速度，在 [20]、[21] 中，车辆运动被建模为高斯过程。我们的方法使用了与 [18]、[19] 中类似的里程计算法线性运动模型，但具有不同类型的特征。方法 [18]–[21] 涉及强度图像的视觉特征，需要稠密点云。该方法在笛卡尔空间中提取和匹配几何特征，对点云密度要求较低。最接近我们的方法是Bosse和Zlot的[3]、[6]、[22]。利用两轴激光雷达获取点云，通过匹配局部点簇[22]的几何结构进行配准。此外，他们使用多个 2 轴激光雷达绘制地下矿井地图 [3]。此方法融合了 IMU，并使用回环检测构建大型地图。由同一作者提出的Zebedee是一个由2D激光雷达和IMU组成的建图设备，IMU通过弹簧[6]连接到手杆上。通过手动操作装置进行建图。采用批量优化方法对分段数据集进行处理，并在分段数据集之间添加边界约束。该方法利用IMU的测量值对激光点进行配准，并通过优化来校正IMU的偏差。从本质上说，Bosse和Zlot的方法需要批处理来开发精确的地图，因此不适用于需要实时地图的应用。相比之下，该方法在实时生成的地图在定性上与Bosse和Zlot的方法相似。区别在于，我们的方法可以为自动驾驶汽车的引导提供运动估计。此外，该方法利用了激光雷达扫描模式和点云分布。在里程计和建图算法中，分别实现了保证计算速度和精度的特征匹配。</p><h1 id="III-符号和任务描述"><a href="#III-符号和任务描述" class="headerlink" title="III.符号和任务描述"></a>III.符号和任务描述</h1><p>本文所要解决的问题是利用三维激光雷达感知的点云进行自动估计，并建立所经过环境的地图。我们假设激光雷达是预先校准的。我们还假设激光雷达的角速度和线速度随时间的变化是平滑和连续的，没有突变。第二个假设将在第VII-B节中通过使用IMU来释放。</p><p>在本文中，我们习惯用大写右标来表示坐标系。我们定义扫描(a sweep)为激光雷达完成一次扫描覆盖，我们使用正确的订阅$k,k\in Z^+$表示扫描，$P_k$表示扫描为$k$时感知的点云。让我们如下定义两个坐标系。</p><ul><li><p>激光雷达坐标系$\left\{L\right\}$是一个以激光雷达几何中心为原点的三维坐标系。$x$轴是向左的，$y$轴是向上的，$z$轴是向前的。点$i, i\in P_k$在$\left\{L\right\}$中的坐标表示为$X^L_{(k,i)}$。</p></li><li><p>世界坐标系$\left\{W\right\}$是在初始位置与$\left\{L\right\}$重合的三维坐标系。点$i, i\in P_k$在$\left\{W\right\}$中的坐标为$X^W_{(k,i)}$。</p></li></ul><p>有了假设和符号，我们的激光雷达里程测量和建图问题可以定义为:</p><p>​    <strong>问题:</strong>给定一个激光雷达云序列$i, i\in P_k$，计算每次扫描$k$时激光雷达的帧间运动(ego-motion)，用$P_k$构建遍历环境的地图。</p><h1 id="IV-系统总览"><a href="#IV-系统总览" class="headerlink" title="IV.系统总览"></a>IV.系统总览</h1><h2 id="A-激光雷达硬件"><a href="#A-激光雷达硬件" class="headerlink" title="A.激光雷达硬件"></a>A.激光雷达硬件</h2><p>本文的研究是在基于Hokuyo UTM-30LX激光扫描仪的定制3D激光雷达上进行验证的，但并不限于此。通过本文，我们将使用从激光雷达收集的数据来说明该方法。该激光扫描仪的视场为$180^◦$，分辨率为$0.25^◦$以及$40$行/秒扫描速率。所述激光扫描仪与电机相连，电机被控制以$180^◦/s$的角速度旋转，在$−90^◦$和$90^◦$之间，激光扫描仪的水平方向为零。对于这个特定的单位，扫描是从$−90^◦$旋转到$90^◦$或在相反的方向(持续1秒)。这里，请注意，对于一个连续旋转的激光雷达，扫描只是一个简单的半球面旋转。板载编码器以$0.25^◦$的分辨率测量电机旋转角度，利用该分辨率将激光点投影到激光雷达坐标$\left\{L\right\}$中。</p><p><img src="/images/loam论文翻译/image-20220410153045839.png" alt="image-20220410153045839" style="zoom:33%;" /></p><blockquote><p> 图$2$所示。三维激光雷达在本研究中使用的是一个由马达驱动旋转运动的Hokuyo激光扫描仪，以及一个测量旋转角度的编码器。该激光扫描仪的视场为$180^◦$的分辨率为$0.25^◦$。扫描速度为$40$行/秒。电机被控制从$−90^◦$旋转到$90^◦$与激光扫描仪的水平方向为零。</p></blockquote><p><img src="/images/loam论文翻译/image-20220410153142890.png" alt="image-20220410153142890"></p><blockquote><p>图$3$所示。激光雷达测程与建图软件系统框图。</p></blockquote><h2 id="B-软件系统概述"><a href="#B-软件系统概述" class="headerlink" title="B.软件系统概述"></a>B.软件系统概述</h2><p>图$3$显示了软件系统的示意图。设$\hat{P}$为激光扫描接收到的点。在每次扫描期间，$\hat{P}$在$\left\{L\right\}$中注册。扫描$k$时合并的点云形成$P_k$，然后用两种算法处理$P_k$。激光雷达里程计取点云并计算激光雷达在两次连续扫描之间的运动。在$P_k$中使用估计的运动来校正失真，算法运行在$10Hz$左右的频率。激光雷达建图进一步处理输出，以$1Hz$的频率匹配并将未失真的云注册到地图上。最后，将两种算法发布的位姿变换集成在一起，生成一个关于激光雷达相对于地图的位姿的约$10Hz$的变换输出。第V、VI节详细介绍了软件框图中的模块</p><h1 id="V-激光雷达里程计"><a href="#V-激光雷达里程计" class="headerlink" title="V.激光雷达里程计"></a>V.激光雷达里程计</h1><h2 id="A-特征点提取"><a href="#A-特征点提取" class="headerlink" title="A.特征点提取"></a>A.特征点提取</h2><p>我们首先从激光雷达云$P_k$中提取特征点，如图$3$所示的激光雷达在$P_k$中自然地产生了分布不均匀的点。在一个扫描中，从激光扫描仪返回的分辨率为$0.25^◦$，这些点位于扫描平面上。然而，当激光扫描仪以$180^◦/s$的角速度旋转，并产生40Hz的扫描，在垂直方向的扫描平面的分辨率是$180^◦/40 = 4.5^◦$。考虑到这一事实，在$P_k$中提取特征点时，仅使用单个扫描的信息，且具有共面几何关系。</p><p>我们选择尖锐边缘上的特征点和平面表面的特征点。设$i$是$P_k$中的一个点，$i\in P_k$，设$S$是激光扫描仪在同一次扫描中返回的$i$的连续点的集合。由于激光扫描器以$CW$或$CCW$顺序生成点返回，$S$包含一半位于$i$和两点之间$0.25^◦$间隔的每一边上的点。定义一个术语来评估局部表面的平滑度，</p><script type="math/tex; mode=display">c=\frac{1}{|S|·\parallel X^L_{(k,i)}\parallel} \sum_{j\in S,j\ne i} \parallel (X^L_{(k,i)}-X^L_{(k,j)}) \parallel \tag{1}</script><p>根据$c$值对扫描中的点进行排序，选择$c$值最大的点为边缘点，$c$值最小的点为平面点的特征点。为了在环境中均匀分布特征点，我们将扫描分割成四个相同的子区域。每个子区域最多可提供$2$个边缘点和$4$个平面点。只有当点$i$的$c$值大于或小于一个阈值，且所选点的个数不超过最大值时，才能将点$i$选择为边或平面点。</p><p><img src="/images/loam论文翻译/image-20220410153159251.png" alt="image-20220410153159251" style="zoom:50%;" /></p><blockquote><p>图4所示。$(a)$实线段表示局部表面贴片。点$A$位于与激光束有一定角度的表面上(虚线橙色线段)。点$B$在一个大致平行于激光束的表面上。我们将$B$作为一个不可靠的激光返回点，不选择它作为特征点。$(b)$实线段是激光的可观测对象。点$A$位于被遮挡区域(虚线橙线段)的边界上，可以被检测为边缘点。然而，如果从不同的角度看，被遮挡的区域会发生变化，变得可以观察到。我们不把$A$作为显著边缘点，也不选择它作为特征点。</p></blockquote><p>在选择特征点时，我们希望避免选择周围点被选择的点，或者大致平行于激光束的局部平面上的点(图$4(a)$中的点$B$)。这些观点通常被认为是不可靠的。此外，我们希望避免在被遮挡区域边界上的点[23]。如图$4(b)$所示为一个例子。点$A$是激光雷达云中的边缘点，因为它的连接面(虚线段)被另一个物体遮挡。然而，如果激光雷达移动到另一个视点，被遮挡区域就会发生变化，成为可观测的。为了避免前面提到的待选点，我们再次找到点$S$的集合。只有当$S$它不能在大致平行于激光束的表面上，也不能在被遮挡区域的边界上。不形成一个大致平行于激光束的表面贴片时，点$i$才能被选择。在$S$中，没有一个点在激光束方向上通过间隙与$i$断开，同时比$i$更靠近激光雷达(如图$4(b)$中的B点)。</p><p>综上所述，从$c$值的最大值开始选取特征点作为边缘点，从$c$值的最小值开始选取特征点作为平面点，如果选取一个点，</p><ul><li>选择的边缘点或平面点的数量不能超过子区域的最大值</li><li>它周围的点都没有被选中</li><li>它不能在大致平行于激光束的表面上，也不能在被遮挡区域的边界上。</li></ul><p>从走廊场景中提取特征点的示例如图$5$所示。边缘点和平面点分别用黄色和红色标记。</p><p><img src="/images/loam论文翻译/image-20220410153221345.png" alt="image-20220410153221345" style="zoom:50%;" /></p><blockquote><p>图$5$所示。从走廊的激光雷达云中提取边缘点(黄色)和平面点(红色)的例子。同时，激光雷达以$0.5m/s$的速度向图左侧的壁面移动，导致壁面运动失真。</p></blockquote><h2 id="B-寻找特征点对应"><a href="#B-寻找特征点对应" class="headerlink" title="B.寻找特征点对应"></a>B.寻找特征点对应</h2><p>里程计算法估计激光雷达在扫描范围内的运动。设$t_k$为扫描$k$的起始时间。在每次扫描结束时，将扫描过程中感知到的点云$P_k$重新投影到时间戳$t_{k+1}$，如图$6$所示。我们将重新投影的点云表示为$\overline{P}_k$。在下一次扫描$k+1$时，$\overline{P}_k$和新接收到的点云$P_{k+1}$一起使用，来估计激光雷达的运动。</p><p><img src="/images/loam论文翻译/image-20220410153230555.png" alt="image-20220410153230555" style="zoom:50%;" /></p><blockquote><p>图$6$所示。将点云重新投影到扫描的末端。蓝色线段表示扫描$k$时感知到的点云 $P_k$，在扫描$k$结束时，将$P_k$重新投影到时间戳$t_{k+1}$，得到绿色线段$\overline{P}_k$。然后，在扫描$k+1$时，$\overline{P}_k$和新感知的点云$P_{k+1}$(橙色线段)一起估计激光雷达运动。</p></blockquote><p>让我们假设$\overline{P}_k$和$P_{k+1}$现在都是可用的，然后从找到两个激光雷达云之间的对应关系开始。对于$P_{k+1}$，我们使用上一节讨论的方法从激光雷达云中找到边缘点和平面点。设$\xi_{k+1}$和$H_{k+1}$分别为边点和平面点的集合。我们将从$\overline{P}_k$中找到与$\xi_{k+1}$中的点对应的边线，从平面图中找到与$H_{k+1}$中的点对应的平面贴片(patch)。</p><p>请注意，在扫描$k+1$开始时，$P_{k+1}$是一个空集，它在扫描过程中随着接收到更多点数而增长。激光雷达里程计递归地估计了扫描期间的$6-DOF$运动，并随着$P_{k+1}$的增加逐渐包含更多的点。在每次迭代中，使用当前估计的变换将$\xi_{k+1}$和$H_{k+1}$重新投影到扫描的开始，记$\tilde{\xi}_{k+1}$和$\tilde{H}_{k+1}$为重投影的点集。对于每个点在$\xi_{k+1}$和$H_{k+1}$，我们将在$\overline{P}_k$中找到最近的邻居点。在这里，$\overline{P}_k$被存储在$3D$  $ KD-tree$[24]中，用于快速索引。</p><p>图$7(a)$给出了寻找边缘点对应的边线的过程。设$i$是属于$\tilde{\xi}_{k+1}$的点，即$ i \in \tilde{\xi}_{k+1}$。边线由两个点表示。设$j$是$i$在$\overline{P}_k$中的最近邻，$j\in \overline{P}_k$，设$l$是$i$在连续两次扫描$j$时的最近邻，$(j, l)$构成$i$的对应关系。然后，为了验证$j$和$l$都是边缘点，我们根据公式$(1)$来检查局部表面的平滑度。这里，我们特别要求$j$和$l$来自不同的扫描，考虑到一次扫描不能包含来自同一边线的多个点。只有一个例外，即边缘线在扫描平面上。然而，如果是这样，边缘线就会退化且<br>在扫描平面上显示为一条直线，并且特征点在边缘线上不应该首先被提取。</p><p><img src="/images/loam论文翻译/image-20220410153242817.png" alt="image-20220410153242817" style="zoom:50%;" /></p><blockquote><p>图7所示。在$\tilde{\xi}_{k+1}$中找到一条边缘线作为边缘点的对应关系，如图$(a)$，以及作为$\tilde{H}_{k+1}$中平面点的对应关系的平面贴片(patch)，如图$(b)$。在$(a)$和$(b)$中，$j $是距离特征点最近的点，在$\overline{P}_k$中找到。橙色的线表示对j的相同扫描，蓝色的线表示连续的两次扫描。为了找出$(a)$中的边线对应关系，我们在蓝色的直线上找到另一个点$l$，对应关系用$(j, l)$表示。为了找到$(b)$中的平面贴片(patch)对应关系，我们发现另外两个点，$l $和 $m$，分别位于橙色和蓝色线上。对应关系为$(j, l, m)$。</p></blockquote><p>图$7(b)$显示了寻找平面贴片(patch)作为平面点对应的过程。设$ i$ 为$\tilde{H}_{k+1}$中的一个点，即$i \in  \tilde{H}_{k+1}$。平面贴片(patch)由三个点表示。与上一段类似，我们在$\overline{P}_k$中找到$ i $的最近邻，记为$j$。 然后，我们找到另外两个点 $l$ 和$ m$，作为$ i $的最近邻，一个在$j $的同一扫描中，另一个在 $j $的两次连续扫描中。 这保证了三个点是非共线的。 为了验证 $j$、$l$和 $m$ 都是平面点，我们根据$ (1) $再次检查局部表面的平滑度。</p><p>根据特征点的对应关系，推导出特征点到对应关系的距离表达式。在下一节中，我们将通过最小化特征点的整体距离来恢复激光雷达运动。我们从边点开始。对于点$ i \in \tilde{\xi}_{k+1}$，如果$(j, l)$是对应的边线，$j,l \in \overline{P}_k$，则点到线的距离可以计算为</p><script type="math/tex; mode=display">d_{\xi}=\frac{|(\tilde{X}^L_{(k+1,i)}-\overline{X}^L_{(k,j)})×(\tilde{X}^L_{(k+1,i)}-\overline{X}^L_{(k,l)})|}{|\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)}|},\tag{2}</script><p>其中$\tilde{X}^L_{(k+1,i)},\overline{X}^L_{(k,j)}$， 和$\overline{X}^L_{(k,l)}$分别是点$i, j, l$在$\left\{L\right\}$中的坐标。那么，对于点$i \in  \tilde{H}_{k+1}$，如果$(j, l, m)$是对应的平面贴片(patch),$j,l,m \in \overline{P}_k$，则点到平面的距离为</p><script type="math/tex; mode=display">d_H=\frac{\begin{vmatrix}(\tilde{X}^L_{(k+1,i)}-\overline{X}^L_{(k,j)})\\((\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)})×(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,m)}))\end{vmatrix}}{\begin{vmatrix}(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,l)})×(\overline{X}^L_{(k,j)}-\overline{X}^L_{(k,m)})\end{vmatrix} },\tag{3}</script><p>其中$\overline{X}^L_{(k,m)}$是点$m$在$\left\{L\right\}$中的坐标。</p><h2 id="C-运动估计"><a href="#C-运动估计" class="headerlink" title="C.运动估计"></a>C.运动估计</h2><p>激光雷达运动在扫描期间以恒定的角速度和线速度建模。这允许我们在一个扫描中对在不同时间接收到的点进行线性插值。假设$t$是当前的时间戳，$t_{k+1}$是扫描$k+1$的开始时间。设$T^L_{k+1}$为$[t_{k+1}, t]$之间的激光雷达位姿变换。$T^L_{k+1}$包含$6$自由度激光雷达的刚性运动，$T^L_{k+1} = [t_x, t_y, t_z， θ_x， θ_y， θ_z]^T$，其中$t_x$、$t_y$和$t_z$分别是$\left\{L\right\}$沿$x-$、$y-$和$z-$轴的平移，$θ_x$、$θ_y$和$θ_z$是旋转角度，遵循右手规则。给定点$i，i \in P_k$，设$t_i$为其时间戳，设为$[t_{k+1}, t_i]$之间的$T^L_{(k+1,i)}$位姿变换。$T^L_{(k+1,i)}$可以通过$T^L_{k+1}$的线性插值得到，</p><script type="math/tex; mode=display">T^L_{(k+1,i)}=\frac{t_i-t_{k+1} }{t-t_{k+1} }T^L_{k+1}.\tag{4}</script><p>回想一下，$\xi_{k+1} $和 $H_{k+1}$ 是从 $P_{k+1}$ 中提取的边缘点和平面点的集合，$\tilde \xi_{k+1} $ 和$\tilde H_{k+1}$ 是重新投影到扫描开始$ t_{k+1}$的点集合 。为了解决激光雷达运动，我们需要建立$\xi_{k+1} $和$\tilde \xi_{k+1} $或$H_{k+1}$ 和$\tilde H_{k+1}$ 之间的几何关系。利用$(4)$中的变换，我们可以推导，</p><script type="math/tex; mode=display">X^L_{(k+1,i)}=R\tilde X^L_{(k+1,i)}+T^L_{(k+1,i)}(1:3),\tag{5}</script><p>其中$X^L_{(k+1,i)}$是$\xi_{k+1} $或$H_{k+1}$中的点$i$的坐标，$\tilde X^L_{(k+1,i)}$是$\tilde \xi_{k+1} $或$\tilde H_{k+1}$中的点$i$的坐标，$(a:b)$是$T^L_{(k+1,i)}$的第$a$到$b$个项，$R$是由$Rodrigues$公式[25]定义的旋转矩阵。</p><script type="math/tex; mode=display">R=e^{\hat{w} \theta}=I + \hat{w}sin\theta+\hat{w}^2(1-cos\theta).\tag{6}</script><p>在上式中，$θ$为旋转的大小，</p><script type="math/tex; mode=display">\theta = \parallel T^L_{(k+1,i)}(4:6) \parallel,\tag{7}</script><p>$w$是表示旋转方向的单位向量，</p><script type="math/tex; mode=display">w=\frac{T^L_{(k+1,i)}(4:6)}{\parallel T^L_{(k+1,i)}(4:6) \parallel},\tag{8}</script><p>$\hat{w}$为$w$的斜对称矩阵[25]。</p><p>回忆$(2)$和$(3)$计算属于$\tilde \xi_{k+1} $ 和$\tilde H_{k+1}$ 的点之间的距离及其对应关系。结合$(2)$和$(4)-(8)$，我们可以推导出$\xi_{k+1}$中的一个边点与相应的边线之间的几何关系，</p><script type="math/tex; mode=display">f_{\xi}(X^L_{(k+1,i)},T^L_{k+1})=d_\xi,i\in \xi_{k+1}.\tag{9}</script><p>同样，结合$(3)(4)-(8)$，我们可以在$H_{k+1}$中的一个平面点与对应的平面贴片(patch)建立另一个几何关系，</p><script type="math/tex; mode=display">f_H(X^L_{(k+1,i)},T^L_{k+1})=d_H,i\in H_{k+1}.\tag{10}</script><p>最后，我们用<code>Levenberg-Marquardt</code>方法[26]求解激光雷达运动。将$\xi_{k+1}$和$H_{k+1}$中每个特征点$(9)$和$(10)$叠加，得到一个非线性函数:</p><script type="math/tex; mode=display">f(T^L_{k+1})=d,\tag{11}</script><p>其中每一行$f$对应一个特征点，$d$包含相应的距离。我们计算$f$关于$T^L_{k+1}$的雅可比矩阵，记作$J$，其中$J =\partial f /\partial T^L_{k+1}$。然后，$(11)$通过非线性迭代，使$d$趋近于$0$，</p><script type="math/tex; mode=display">T^L_{k+1}\gets T^L_{k+1}-(J^TJ+\lambda diag(J^TJ))^{-1}J^Td.\tag{12}</script><p>$\lambda$是由<code>Levenberg-Marquardt</code>方法确定的因子。</p><h2 id="D-激光雷达里程计算法"><a href="#D-激光雷达里程计算法" class="headerlink" title="D.激光雷达里程计算法"></a>D.激光雷达里程计算法</h2><p><img src="/images/loam论文翻译/%E5%9B%BE%E7%89%871.png" alt="图片1"></p><p>激光雷达里程计算法如算法1所示。该算法以上次扫描的点云$\overline{P}_k$、当前扫描的增长点云$P_{k+1}$和上次递归的位姿变换$T^L_{k+1}$作为输入。如果启动了新的扫描，$T^L_{k+1}$将被设置为零(第$4-6$行)。然后，算法从$P_{k+1}$中提取特征点构造第$7$行$\xi_{k+1}$和$H_{k+1}$。对于每个特征点，我们可以在$\overline{P}_k$(第$9-19$行)中找到对应。运动估计适应于鲁棒拟合[27]。在第$ 15 $行，该算法为每个特征点分配一个平方权值。 与其对应的距离较大的特征点被分配较小的权重，距离大于阈值的特征点被视为异常值并分配零权重。然后，在第$ 16 $行，为一次迭代更新位姿变换。 当发现收敛或满足最大迭代次数时，非线性优化终止。 如果算法到达扫描结束，则使用扫描期间估计的运动将$P_{k+1}$重新投影到时间戳 $t_{k+2}$。 否则，仅返回变换$T^L_{k+1}$ 用于下一轮递归。</p><h1 id="VI-激光雷达建图"><a href="#VI-激光雷达建图" class="headerlink" title="VI.激光雷达建图"></a>VI.激光雷达建图</h1><p><img src="/images/loam论文翻译/image-20220410153350151.png" alt="image-20220410153350151" style="zoom:50%;" /></p><blockquote><p>图 8. 建图过程示意图。 蓝色曲线表示地图上的激光雷达位姿$T^W_k$ ，由建图算法在扫描 $k $处生成。 橙色曲线表示扫描 $k + 1$ 期间的激光雷达运动$T^L_{k+1}$，由里程计算法计算得出。 使用$ T^W_k$和$T^L_{k+1}$，将里程计算法发布的未失真点云投影到地图上，表示为（绿色线段）$\overline{Q}_{k+1}$，并与地图上现有的云$ Q_k$（黑色线段）进行匹配。</p></blockquote><p>建图算法运行的频率比里程计算法低，并且每次扫描只调用一次。在扫描 $k + 1$结束时，即介于$ [t_{k+1}, t_{k+2 }]$，激光雷达里程计生成一个未失真的点云$\overline{P}_{k+1}$，同时生成一个激光雷达的位姿变换$T^L_{k+1}$。建图算法在世界坐标$\left\{W\right\}$中匹配并注册$\overline{P}_{k+1}$，如图$8$所示。为了解释这个过程，让我们将$ Q_k$ 定义为累积到扫描 $k$的地图上的点云，设 $T^W_k$是扫描 $k $在$t_{k+1}$结束时，激光雷达在地图上的位姿。利用激光雷达里程计的输出，建图算法将 $T^W_k$扩展到从$t_{k+1}$到 $t_{k+2}$的一次扫描，以获得$T^W_{k+1}$，并将 $\overline{P}_{k+1}$投影到世界坐标$\left\{W\right\}$中，表示为$\overline{Q}_{k+1}$。 接下来，该算法通过优化激光雷达位姿$T^W_{k+1}$，将$\overline{Q}_{k+1}$ 与$ Q_k$ 匹配。</p><p>特征点的提取方法与第$V-A$节相同，但使用了$ 10 $倍的特征点。 为了找到特征点的对应关系，我们将点云存储在地图上$ Q_k$，在 $10$ 立方米区域中。立方体中与$\overline{Q}_{k+1}$相交的点被提取并存储在 $3D$  $KD-tree$ [24] 中。 我们发现$ Q_k$中的点在特征点周围的某一区域内。令$ S^\prime $为一组周围点。 对于边缘点，我们只在 $ S^\prime $中保留边缘线上的点，对于平面点，我们只保留平面上的点。然后，计算 $ S^\prime $的协方差矩阵，记为$M$, $M$的特征值和特征向量，分别记为$V$和$E$。如果$ S^\prime $分布在一条边线上，$V$包含的一个特征值明显大于其他两个特征值，$E$中与最大特征值相关联的特征向量表示边缘线的方向。另一方面，如果$ S^\prime $分布在一个平面贴片(patch)上，$V$包含两个较大的特征值，第三个特征值明显较小，$E$中最小的特征值对应的特征向量表示该平面贴片(patch)的方位。通过$ S^\prime $的几何中心确定边缘线或平面贴片(patch)的位置。</p><p>为了计算特征点与其对应点的距离，我们在边缘线上选择两个点，在平面贴片(patch)上选择三个点。这允许使用$(2)$和$(3)$相同的公式来计算距离。然后，为每个特征点推导出一个方程为$(9)$ 或 $(10)$，但不同之处在于$\overline{Q}_{k+1}$ 中的所有点共享相同的时间戳$t_{k+2}$。 非线性优化通过 <code>Levenberg-Marquardt</code>方法 [26] 通过鲁棒拟合 [27] 再次求解，并在$\overline{Q}_{k+1}$被注册在地图上。为了均匀分布这些点，地图云通过体素网格过滤器 [28] 缩小尺寸，体素大小为 5 厘米立方体。</p><p><img src="/images/loam论文翻译/image-20220410153401364.png" alt="image-20220410153401364" style="zoom:50%;" /></p><blockquote><p>图 9. 位姿变换的集成。 蓝色区域说明了建图算法 $T^W_k$ 的激光雷达位姿，每次扫描生成一次。 橙色区域是当前扫描 $T^L_{k+1} $内的激光雷达运动，由里程计算法计算得出。 激光雷达的运动估计是两种变换的组合，频率与 $T^L_{k+1} $相同。</p></blockquote><p>位姿变换的集成如图 $9 $所示。蓝色区域代表激光雷达映射 $T^W_k$ 的位姿输出，每次扫描生成一次。 橙色区域表示来自激光雷达里程计的变换输出$T^L_{k+1} $，频率约为$ 10Hz$。 相对于地图的激光雷达姿态是两种变换的组合，频率与激光雷达里程计相同。</p><h1 id="VII-实验"><a href="#VII-实验" class="headerlink" title="VII.实验"></a>VII.实验</h1><p>在实验期间，在$2.5GHz$四核$6Gib$内存的笔记本电脑上，在Linux下的机器人操作系统$(ROS)$[29]上对激光雷达数据进行了处理。 该方法总共消耗两个核心，里程计和建图程序在两个独立的核心上运行。 我们的软件代码和数据集是公开的$^{1,2}$。</p><blockquote><p>1wiki.ros.org/loam_back_and_forth<br>2wiki.ros.org/loam_continuous</p></blockquote><h2 id="A-室内和室外测试"><a href="#A-室内和室外测试" class="headerlink" title="A.室内和室外测试"></a>A.室内和室外测试</h2><p>该方法已在室内和室外环境中进行了测试。在室内测试中，激光雷达与电池和笔记本电脑一起放置在一个推车上。一个人推着手推车走。图$10(a)$和图$10(c)$展示了两种典型的室内环境，一个狭长走廊和一个大厅的地图。图$10(b)$和图$10(d)$为同一场景拍摄的两张照片。</p><p><img src="/images/loam论文翻译/image-20220410153413911.png" alt="image-20220410153413911"></p><blockquote><p>图10所示。$(a)-(b)$狭长的走廊，$(c)-(d)$大厅，$(e)-(f)$植被覆盖的道路和$(g)-(h)$两行树木之间的果园生成的地图。激光雷达在室内测试中放置在手推车上，在室外测试中安装在地面车辆上。所有测试使用$0.5m/s$的速度。</p></blockquote><p>为了评估地图的局部准确性，我们从相同的环境中收集了第二组激光雷达云。在数据选择过程中，激光雷达保持静止，并放置在每个环境中的几个不同的位置。使用点对面$ICP$方法[9]对两个点云进行匹配和比较。 匹配完成后，将一个点云与第二个点云中对应的平面块之间的距离视为匹配误差。 图 $11 $显示了误差分布的密度。室内匹配误差小于室外匹配误差。结果是合理的，因为在自然环境中特征匹配不如在人造环境中精确。</p><p><img src="/images/loam论文翻译/image-20220410153427498.png" alt="image-20220410153427498" style="zoom:50%;" /></p><blockquote><p>图11所示。廊道(红色)、大堂(绿色)、绿化路(蓝色)、果园(黑色)的匹配误差，对应图$10$中的四个场景。</p></blockquote><p><img src="/images/loam论文翻译/image-20220410153545569.png" alt="image-20220410153545569" style="zoom: 33%;" /></p><p>此外，我们还对运动估计的累积漂移进行了测试。我们选择包含闭环的走廊进行室内实验。这使得我们可以在同一个地方开始和结束。运动估计在起始位置和结束位置之间产生一个间隙，该间隙表明了漂移量。对于户外实验，我们选择果园环境。 携带激光雷达的地面车辆配备了高精度 $GPS/INS$，用于获取地面实况。 将测得的漂移与行进距离作为相对精度进行比较，并列于表$ I$。具体来说，测试$ 1 $使用与图 $10(a)$ 和图 $10(g) $相同的数据集。 一般来说，室内测试的相对准确度在$ 1\% $左右，室外测试的相对准确度在 $2.5\% $左右。</p><h2 id="B-融合IMU"><a href="#B-融合IMU" class="headerlink" title="B.融合IMU"></a>B.融合IMU</h2><p>我们将<code>Xsens MTi-10 IMU</code> 连接到激光雷达以应对快速的速度变化。 点云在发送到所提出的方法之前以两种方式进行预处理，$1)$ 使用来自 $IMU$ 的方向，在一次扫描中接收到的点云被旋转，使得与该扫描中激光雷达的初始方向对齐，$2)$ 使用加速度测量 ，运动失真被部分消除，就好像激光雷达在扫描过程中以恒定速度移动一样。 然后由激光雷达里程计和建图程序处理点云。</p><p>$IMU $定位是通过在卡尔曼滤波器 [1] 中集成来自陀螺仪的角速率和来自加速度计的读数来获得的。 图 $12(a) $显示了一个示例结果。 一个人拿着激光雷达走在楼梯上。 在计算红色曲线时，我们使用 IMU 提供的方向，我们的方法只估计平移。 在 $5 $分钟的数据收集过程中，方向漂移超过 $25°$。 假设没有可用的$ IMU$，绿色曲线仅依赖于我们方法中的优化。 蓝色曲线使用$ IMU $数据进行预处理，然后采用本文方法。 我们观察到绿色和蓝色曲线之间的微小差异。 图 $12(b) $给出了对应于蓝色曲线的图。 在图$ 12(c)$中，我们比较了图 $12(b)$中黄色矩形中地图的两个闭合视图。 上图和下图分别对应蓝色和绿色曲线。 仔细对比发现，上图的边缘更加清晰。</p><p><img src="/images/loam论文翻译/image-20220410153604781.png" alt="image-20220410153604781" style="zoom:50%;" /></p><p><img src="/images/loam论文翻译/image-20220410153615690.png" alt="image-20220410153615690" style="zoom:50%;" /></p><blockquote><p>图 $12$所示。有/无$IMU$ 辅助的结果比较。 一个人拿着激光雷达走在楼梯上。 黑点是起点。 在$(a)$中，红色曲线使用来自$ IMU $的方向和我们的方法估计的平移来计算，绿色曲线仅依赖于我们方法中的优化，蓝色曲线使用$ IMU$数据进行预处理，然后再进行该方法。 $(b)$是对应于蓝色曲线的地图。 在$(c)$中，上图和下图分别对应于蓝色和绿色曲线，使用$(b)$中黄色矩形标记的区域。 上图中的边缘更清晰，表明地图上的准确性更高。</p></blockquote><p>表 $II$ 比较了使用和不使用$ IMU $的运动估计的相对误差。 激光雷达由一个人以$0.5m/s $的速度行走并以$ 0.5m $左右的幅度上下移动激光雷达。 地面实况(ground truth)是由卷尺手动测量的。 在所有四个测试中，在$ IMU $的帮助下使用所提出的方法可以获得最高的准确度，而使用 $IMU$ 定位只会导致最低的准确度。 结果表明，$IMU$有效地消除了非线性运动，所提出的方法利用它来处理线性运动。</p><h2 id="C-使用-KITTI-数据集进行测试"><a href="#C-使用-KITTI-数据集进行测试" class="headerlink" title="C.使用 KITTI 数据集进行测试"></a>C.使用 KITTI 数据集进行测试</h2><p><img src="/images/loam论文翻译/image-20220410153653541.png" alt="image-20220410153653541"></p><blockquote><p>图 13. $(a) $KITTI 基准测试使用的传感器配置和车辆。该车辆安装有 Velodyne 激光雷达、立体摄像头和用于获取地面实况的高精度 GPS/INS。我们的方法仅使用来自 Velodyne 激光雷达的数据。$(b)$ 来自城市场景的示例激光雷达云（上图）和相应的视觉图像（下图）。</p></blockquote><p>我们还使用来自 KITTI 里程计基准 [30]、[31] 的数据集评估了我们的方法。数据集仔细地与安装在结构化道路上行驶的乘用车顶部的传感器相注册（图 $13(a)$）。车辆配备$ 360° $Velodyne 激光雷达、彩色/单色立体摄像头、以及用于地面实况(ground truth)的高精度 GPS/INS，激光雷达数据以 $10Hz $记录，并由我们的方法用于里程计估计。由于篇幅问题，我们无法将结果包括在内。但是，我们鼓励读者在评估(benchmark)网站上查看我们的结果$^3$。</p><blockquote><p>3www.cvlibs.net/datasets/kitti/eval_odometry.php</p></blockquote><p>数据集主要涵盖三类环境：周围有建筑物的“城市”、场景中有植被的小路上的“乡村”以及道路较宽且周围环境相对干净的“高速公路”。图 13$(b)$ 显示了一个示例激光雷达云和来自城市环境的相应视觉图像。数据集中包含的总行驶距离为$ 39.2 $公里。上传车辆轨迹后，评估(benchmark)服务器会自动计算准确性和排名。我们的方法在评估(benchmark)的所有方法中排名第一，无论传感方式如何，包括最先进的立体视觉里程计 [32]、[33]。平均位置误差是行进距离的 $0.88\%$，使用 $3D $坐标中 $100m、200m、…、800m $长度的轨迹段生成。</p><h1 id="VIII-结论和未来的工作"><a href="#VIII-结论和未来的工作" class="headerlink" title="VIII. 结论和未来的工作"></a>VIII. 结论和未来的工作</h1><p>使用来自旋转激光扫描仪的点云进行运动估计和建图可能很困难，因为该问题涉及激光雷达云中运动的恢复和运动失真的校正。所提出的方法通过并行运行的两种算法来划分和解决问题：激光雷达里程计进行粗略处理以估计较高频率的速度，而激光雷达建图执行精细处理以在较低频率创建地图。两种算法的合作允许实时准确的运动估计和建图。此外，该方法可以利用激光雷达扫描模式和点云分布。进行特征匹配以确保里程计算法中的快速计算，并增建图算法的准确性。该方法已在室内和室外以及 KITTI 里程计评估(benchmark)上进行了测试。</p><p>由于当前的方法不能识别闭环，我们未来的工作包括开发一种通过闭环来修复运动估计漂移的方法。此外，我们将我们方法的输出与卡尔曼滤波器中的 IMU 集成，以进一步减少运动估计漂移。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;LOAM是Ji Zhang于2014年提出的使用激光雷达完成定位与三维建图的算法，即Lidar Odometry and Mapping。之后许多激光SLAM算法借鉴了LOAM中的一些思想，可以说学习LOAM对学习3D激光SLAM很有帮助。本文对LOAM原论文进行了翻译。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/categories/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="激光SLAM" scheme="https://lukeyalvin.top/tags/%E6%BF%80%E5%85%89SLAM/"/>
    
    <category term="LOAM" scheme="https://lukeyalvin.top/tags/LOAM/"/>
    
    <category term="文献阅读" scheme="https://lukeyalvin.top/tags/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>ch11_实践位姿图优化</title>
    <link href="https://lukeyalvin.top/posts/40808.html"/>
    <id>https://lukeyalvin.top/posts/40808.html</id>
    <published>2022-04-07T08:57:07.783Z</published>
    <updated>2022-05-02T13:20:42.650Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>我们可以构建一个只有轨迹的图优化，而位姿节点之间的边，可以由两个关键帧之间通过特征匹配之后得到的运动估计来给定初始值。不同的是，一旦初始估计完成，我们就不再优化那些路标点的位置，而只关心所有的相机位姿之间的联系了。通过这种方式，我们省去了大量的特征点优化的计算，只保留了关键帧的轨迹，从而构建了所谓的位姿图（Pose Graph）。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p>我们将带有相机位姿和空间点的图优化称为 BA，能够有效地求解大规模的定位与建图问题。但是考虑大场景以及实时性的要求，我们不得不想办法缩减计算量，这就是引入位姿图的意义。</p><p><img src="/images/实践位姿图优化/image-20220407170107621.png" alt="image-20220407170107621"></p><h1 id="g2o-原生位姿图"><a href="#g2o-原生位姿图" class="headerlink" title="g2o 原生位姿图"></a>g2o 原生位姿图</h1><p>Pose Graph 图优化的<strong>节点</strong>表示相机位姿，以 $\xi_1,\xi_2,…,\xi_n$来表达。而<strong>边</strong>，则是两个位姿节点之间相对运动的估计，该估计可能来自于特征点法或直接法。</p><p><img src="/images/实践位姿图优化/image-20220408092815957.png" alt="image-20220408092815957" style="zoom:50%;" /></p><p><code>g2o</code>仿真产生的位姿图，由 <code>g2o</code>自带的 create sphere 程序仿真生成的。它的真实轨迹为一个球，由从下往上的多个层组成。每层为一个正圆形，很多个大小不一的圆形层组成了一个完整的球体，共包含 2500 个位姿节点，可以看成一个转圈上升的过程。然后，仿真程序生成了$ t − 1 $到 $t$ 时刻的边，称为<code>odometry</code><strong>边（里程计）</strong>。此外，又生成层与层之间的边，称为 <strong>loop closure（回环）</strong>。</p><p>sphere.g2o 也是一个文本文件，可以用文本编辑器打开，查看它里面的内容。文件前半部分由节点组成，后半部分则是边：</p><p><img src="/images/实践位姿图优化/image-20220408093444275.png" alt="image-20220408093444275"></p><p>可以看到，节点类型是 VERTEX_SE3，表达一个相机位姿。 g2o 默认使用四元数和平移向量表达位姿，所以后面的字段意义为：$ ID， t_x , t_y , t_z , q_x , q_y , q_z , q_w $。前三个为平移向量元素，后四个为表示旋转的单位四元数。同样，边的信息为：两个节点的 $ID， t _x , t _y , t _z , q _x , q _y , q _z , q _w$ ，信息矩阵的右上角（由于信息矩阵为对称阵，只需保存一半即可）。可以看到这里把信息矩阵设成了对角阵。</p><p>为了优化该位姿图，我们可以使用 g2o 默认的顶点和边，它们是由四元数表示的。由于仿真数据也是 g2o 生成的，所以用 g2o 本身优化就无需我们多做什么工作了，只需配置一下优化参数即可。</p><p><code>pose_graph_g2o_SE3.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/types/slam3d/types_slam3d.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/block_solver.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/optimization_algorithm_levenberg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/core/optimization_algorithm_gauss_newton.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/solvers/dense/linear_solver_dense.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;g2o/solvers/cholmod/linear_solver_cholmod.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> * 本程序演示如何用g2o solver进行位姿图优化</span></span><br><span class="line"><span class="comment"> * sphere.g2o是人工生成的一个Pose graph，我们来优化它。</span></span><br><span class="line"><span class="comment"> * 尽管可以直接通过load函数读取整个图，但我们还是自己来实现读取代码，以期获得更深刻的理解</span></span><br><span class="line"><span class="comment"> * 这里使用g2o/types/slam3d/中的SE3表示位姿，它实质上是四元数而非李代数.</span></span><br><span class="line"><span class="comment"> * **********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 传入待优化的信息</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入文件 sphere.g2o&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!fin)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件&quot;</span> &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择了 6×6 的块求解器</span></span><br><span class="line">    <span class="keyword">typedef</span> g2o::BlockSolver&lt;g2o::BlockSolverTraits&lt;<span class="number">6</span>, <span class="number">6</span>&gt;&gt; Block;</span><br><span class="line">    <span class="comment">// 1.线性方程求解器（LinearSolverCholmod使用sparse cholesky分解法。继承自LinearSolverCCS）</span></span><br><span class="line">    Block::LinearSolverType *linearSolver = <span class="keyword">new</span> g2o::LinearSolverCholmod&lt;Block::PoseMatrixType&gt;();</span><br><span class="line">    <span class="comment">// 2.矩阵块求解器</span></span><br><span class="line">    Block *solver_ptr = <span class="keyword">new</span> <span class="built_in">Block</span>(unique_ptr&lt;Block::LinearSolverType&gt;(linearSolver));</span><br><span class="line">    <span class="comment">// 3.创建总求解器solver。（梯度下降方法，从GN, LM, DogLeg 中选）</span></span><br><span class="line">    g2o::OptimizationAlgorithmLevenberg *solver = <span class="keyword">new</span> g2o::<span class="built_in">OptimizationAlgorithmLevenberg</span>(unique_ptr&lt;Block&gt;(solver_ptr));</span><br><span class="line">    <span class="comment">// 4、创建稀疏优化器</span></span><br><span class="line">    g2o::SparseOptimizer optimizer; <span class="comment">// 创建稀疏优化器</span></span><br><span class="line">    optimizer.<span class="built_in">setAlgorithm</span>(solver); <span class="comment">// 用前面定义好的求解器作为求解方法：（使用LM方法）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> vertexCnt = <span class="number">0</span>, edgeCnt = <span class="number">0</span>; <span class="comment">// 顶点和边的数量</span></span><br><span class="line">    <span class="keyword">while</span> (!fin.<span class="built_in">eof</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读文件 sphere.g2o</span></span><br><span class="line">        string name;</span><br><span class="line">        fin &gt;&gt; name;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="string">&quot;VERTEX_SE3:QUAT&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SE3 顶点</span></span><br><span class="line">            g2o::VertexSE3 *v = <span class="keyword">new</span> g2o::<span class="built_in">VertexSE3</span>();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            fin &gt;&gt; index;</span><br><span class="line">            v-&gt;<span class="built_in">setId</span>(index);</span><br><span class="line">            v-&gt;<span class="built_in">read</span>(fin);</span><br><span class="line">            optimizer.<span class="built_in">addVertex</span>(v);</span><br><span class="line">            vertexCnt++;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">                v-&gt;<span class="built_in">setFixed</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;EDGE_SE3:QUAT&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SE3-SE3 边</span></span><br><span class="line">            g2o::EdgeSE3 *e = <span class="keyword">new</span> g2o::<span class="built_in">EdgeSE3</span>();</span><br><span class="line">            <span class="keyword">int</span> idx1, idx2;</span><br><span class="line">            fin &gt;&gt; idx1 &gt;&gt; idx2;</span><br><span class="line">            e-&gt;<span class="built_in">setId</span>(edgeCnt++);</span><br><span class="line">            e-&gt;<span class="built_in">setVertex</span>(<span class="number">0</span>, optimizer.<span class="built_in">vertices</span>()[idx1]);</span><br><span class="line">            e-&gt;<span class="built_in">setVertex</span>(<span class="number">1</span>, optimizer.<span class="built_in">vertices</span>()[idx2]);</span><br><span class="line">            e-&gt;<span class="built_in">read</span>(fin);</span><br><span class="line">            optimizer.<span class="built_in">addEdge</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fin.<span class="built_in">good</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;读到&quot;</span> &lt;&lt; vertexCnt &lt;&lt; <span class="string">&quot;个点，&quot;</span> &lt;&lt; edgeCnt &lt;&lt; <span class="string">&quot;个边&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;准备优化......&quot;</span> &lt;&lt; endl;</span><br><span class="line">    optimizer.<span class="built_in">setVerbose</span>(<span class="literal">true</span>);</span><br><span class="line">    optimizer.<span class="built_in">initializeOptimization</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行优化......&quot;</span> &lt;&lt; endl;</span><br><span class="line">    optimizer.<span class="built_in">optimize</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;保存优化结果......&quot;</span> &lt;&lt; endl;</span><br><span class="line">    optimizer.<span class="built_in">save</span>(<span class="string">&quot;result.g2o&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CMakeLists.txt</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>( VERSION <span class="number">2.8</span> )</span><br><span class="line"><span class="keyword">project</span>( pose_graph )</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>( CMAKE_BUILD_TYPE <span class="string">&quot;Release&quot;</span> )</span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++14 -O3&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>( APPEND CMAKE_MODULE_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/cmake_modules )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Eigen</span></span><br><span class="line"><span class="keyword">include_directories</span>( <span class="string">&quot;/usr/include/eigen3&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># sophus </span></span><br><span class="line"><span class="keyword">find_package</span>( Sophus REQUIRED )</span><br><span class="line"><span class="comment"># Sophus链接错误</span></span><br><span class="line"><span class="keyword">set</span>(Sophus_LIBRARIES libSophus.so)</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;Sophus_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># g2o </span></span><br><span class="line"><span class="keyword">find_package</span>( G2O REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;G2O_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>( Cholmod REQUIRED )</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;CHOLMOD_INCLUDE_DIR&#125;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>( pose_graph_g2o_SE3 pose_graph_g2o_SE3.cpp )</span><br><span class="line"><span class="keyword">target_link_libraries</span>( pose_graph_g2o_SE3</span><br><span class="line">    g2o_core g2o_stuff g2o_types_slam3d <span class="variable">$&#123;CHOLMOD_LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>优化结束执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行文件</span></span><br><span class="line">./build/pose_graph_g2o_SE3 ../sphere.g2o  </span><br><span class="line"><span class="comment"># 查看优化够的位姿图</span></span><br><span class="line">g2o_viewer result.g2o </span><br></pre></td></tr></table></figure><p><img src="/images/实践位姿图优化/image-20220408142818313.png" alt="image-20220408142818313" style="zoom:50%;" /></p><h1 id="李代数上的位姿图优化"><a href="#李代数上的位姿图优化" class="headerlink" title="李代数上的位姿图优化"></a>李代数上的位姿图优化</h1><p>把 Sophus 用到 g2o 中，定义自己的顶点和边吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定误差求J_R^&#123;-1&#125;的近似</span></span><br><span class="line"><span class="keyword">typedef</span> Eigen::Matrix&lt;<span class="keyword">double</span>, <span class="number">6</span>, <span class="number">6</span>&gt; Matrix6d;</span><br><span class="line"><span class="function">Matrix6d <span class="title">JRInv</span><span class="params">(SE3 e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix6d J;</span><br><span class="line">    J.<span class="built_in">block</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>) = SO3::<span class="built_in">hat</span>(e.<span class="built_in">so3</span>().<span class="built_in">log</span>());</span><br><span class="line">    J.<span class="built_in">block</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>) = SO3::<span class="built_in">hat</span>(e.<span class="built_in">translation</span>());</span><br><span class="line">    J.<span class="built_in">block</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>) = Eigen::Matrix3d::<span class="built_in">Zero</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    J.<span class="built_in">block</span>(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>) = SO3::<span class="built_in">hat</span>(e.<span class="built_in">so3</span>().<span class="built_in">log</span>());</span><br><span class="line">    J = J * <span class="number">0.5</span> + Matrix6d::<span class="built_in">Identity</span>();</span><br><span class="line">    <span class="keyword">return</span> J;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义李代数顶点"><a href="#定义李代数顶点" class="headerlink" title="定义李代数顶点"></a>定义李代数顶点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 李代数顶点</span></span><br><span class="line"><span class="keyword">typedef</span> Eigen::Matrix&lt;<span class="keyword">double</span>, <span class="number">6</span>, <span class="number">1</span>&gt; Vector6d;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VertexSE3LieAlgebra</span> :</span> <span class="keyword">public</span> g2o::BaseVertex&lt;<span class="number">6</span>, SE3&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">EIGEN_MAKE_ALIGNED_OPERATOR_NEW</span></span><br><span class="line"><span class="function">    <span class="keyword">bool</span> <span class="title">read</span><span class="params">(istream &amp;is)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> data[<span class="number">7</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">            is &gt;&gt; data[i];</span><br><span class="line">        <span class="built_in">setEstimate</span>(<span class="built_in">SE3</span>(Eigen::<span class="built_in">Quaterniond</span>(data[<span class="number">6</span>], data[<span class="number">3</span>], data[<span class="number">4</span>], data[<span class="number">5</span>]),</span><br><span class="line">                        Eigen::<span class="built_in">Vector3d</span>(data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">write</span><span class="params">(ostream &amp;os)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        os &lt;&lt; <span class="built_in">id</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        Eigen::Quaterniond q = _estimate.<span class="built_in">unit_quaternion</span>();</span><br><span class="line">        os &lt;&lt; _estimate.<span class="built_in">translation</span>().<span class="built_in">transpose</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        os &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">3</span>] &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setToOriginImpl</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _estimate = Sophus::<span class="built_in">SE3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左乘更新</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">oplusImpl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> *update)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Sophus::SE3 <span class="title">up</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            Sophus::SO3(update[<span class="number">3</span>], update[<span class="number">4</span>], update[<span class="number">5</span>]),</span></span></span><br><span class="line"><span class="params"><span class="function">            Eigen::Vector3d(update[<span class="number">0</span>], update[<span class="number">1</span>], update[<span class="number">2</span>]))</span></span>;</span><br><span class="line">        _estimate = up * _estimate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="定义李代数节点之边"><a href="#定义李代数节点之边" class="headerlink" title="定义李代数节点之边"></a>定义李代数节点之边</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个李代数节点之边</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EdgeSE3LieAlgebra</span> :</span> <span class="keyword">public</span> g2o::BaseBinaryEdge&lt;<span class="number">6</span>, SE3, VertexSE3LieAlgebra, VertexSE3LieAlgebra&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">EIGEN_MAKE_ALIGNED_OPERATOR_NEW</span></span><br><span class="line"><span class="function">    <span class="keyword">bool</span> <span class="title">read</span><span class="params">(istream &amp;is)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> data[<span class="number">7</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">            is &gt;&gt; data[i];</span><br><span class="line">        <span class="function">Eigen::Quaterniond <span class="title">q</span><span class="params">(data[<span class="number">6</span>], data[<span class="number">3</span>], data[<span class="number">4</span>], data[<span class="number">5</span>])</span></span>;</span><br><span class="line">        q.<span class="built_in">normalize</span>();</span><br><span class="line">        <span class="built_in">setMeasurement</span>(Sophus::<span class="built_in">SE3</span>(q, Eigen::<span class="built_in">Vector3d</span>(data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>])));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">information</span>().<span class="built_in">rows</span>() &amp;&amp; is.<span class="built_in">good</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; <span class="built_in">information</span>().<span class="built_in">cols</span>() &amp;&amp; is.<span class="built_in">good</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                is &gt;&gt; <span class="built_in">information</span>()(i, j);</span><br><span class="line">                <span class="keyword">if</span> (i != j)</span><br><span class="line">                    <span class="built_in">information</span>()(j, i) = <span class="built_in">information</span>()(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">write</span><span class="params">(ostream &amp;os)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        VertexSE3LieAlgebra *v1 = <span class="keyword">static_cast</span>&lt;VertexSE3LieAlgebra *&gt;(_vertices[<span class="number">0</span>]);</span><br><span class="line">        VertexSE3LieAlgebra *v2 = <span class="keyword">static_cast</span>&lt;VertexSE3LieAlgebra *&gt;(_vertices[<span class="number">1</span>]);</span><br><span class="line">        os &lt;&lt; v1-&gt;<span class="built_in">id</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v2-&gt;<span class="built_in">id</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        SE3 m = _measurement;</span><br><span class="line">        Eigen::Quaterniond q = m.<span class="built_in">unit_quaternion</span>();</span><br><span class="line">        os &lt;&lt; m.<span class="built_in">translation</span>().<span class="built_in">transpose</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        os &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">coeffs</span>()[<span class="number">3</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="comment">// information matrix</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">information</span>().<span class="built_in">rows</span>(); i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; <span class="built_in">information</span>().<span class="built_in">cols</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                os &lt;&lt; <span class="built_in">information</span>()(i, j) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        os &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 误差计算与书中推导一致</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">computeError</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Sophus::SE3 v1 = (<span class="keyword">static_cast</span>&lt;VertexSE3LieAlgebra *&gt;(_vertices[<span class="number">0</span>]))-&gt;<span class="built_in">estimate</span>();</span><br><span class="line">        Sophus::SE3 v2 = (<span class="keyword">static_cast</span>&lt;VertexSE3LieAlgebra *&gt;(_vertices[<span class="number">1</span>]))-&gt;<span class="built_in">estimate</span>();</span><br><span class="line">        _error = (_measurement.<span class="built_in">inverse</span>() * v1.<span class="built_in">inverse</span>() * v2).<span class="built_in">log</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 雅可比计算</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">linearizeOplus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Sophus::SE3 v1 = (<span class="keyword">static_cast</span>&lt;VertexSE3LieAlgebra *&gt;(_vertices[<span class="number">0</span>]))-&gt;<span class="built_in">estimate</span>();</span><br><span class="line">        Sophus::SE3 v2 = (<span class="keyword">static_cast</span>&lt;VertexSE3LieAlgebra *&gt;(_vertices[<span class="number">1</span>]))-&gt;<span class="built_in">estimate</span>();</span><br><span class="line">        Matrix6d J = <span class="built_in">JRInv</span>(SE3::<span class="built_in">exp</span>(_error));</span><br><span class="line">        <span class="comment">// 尝试把J近似为I？</span></span><br><span class="line">        _jacobianOplusXi = -J * v2.<span class="built_in">inverse</span>().<span class="built_in">Adj</span>();</span><br><span class="line">        _jacobianOplusXj = J * v2.<span class="built_in">inverse</span>().<span class="built_in">Adj</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定义文件传入</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请传入文件sphere.g2o&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ifstream fin;</span><br><span class="line">    <span class="keyword">if</span> (!fin)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件&quot;</span> &lt;&lt; argv[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择了 6×6 的块求解器</span></span><br><span class="line">    <span class="keyword">typedef</span> g2o::BlockSolver&lt;g2o::BlockSolverTraits&lt;<span class="number">6</span>, <span class="number">6</span>&gt;&gt; Block;</span><br><span class="line">    <span class="comment">// 1.线性方程求解器（LinearSolverCholmod使用sparse cholesky分解法。继承自LinearSolverCCS）</span></span><br><span class="line">    Block::LinearSolverType *linearSolver = <span class="keyword">new</span> g2o::LinearSolverCholmod&lt;Block::PoseMatrixType&gt;();</span><br><span class="line">    <span class="comment">// 2.矩阵块求解器</span></span><br><span class="line">    Block *solver_ptr = <span class="keyword">new</span> <span class="built_in">Block</span>(unique_ptr&lt;Block::LinearSolverType&gt;(linearSolver));</span><br><span class="line">    <span class="comment">// 3.创建总求解器solver。（梯度下降方法，从GN, LM, DogLeg 中选）</span></span><br><span class="line">    g2o::OptimizationAlgorithmLevenberg *solver = <span class="keyword">new</span> g2o::<span class="built_in">OptimizationAlgorithmLevenberg</span>(unique_ptr&lt;Block&gt;(solver_ptr));</span><br><span class="line">    <span class="comment">// 4、创建稀疏优化器</span></span><br><span class="line">    g2o::SparseOptimizer optimizer; <span class="comment">// 创建稀疏优化器</span></span><br><span class="line">    optimizer.<span class="built_in">setAlgorithm</span>(solver); <span class="comment">// 用前面定义好的求解器作为求解方法：（使用LM方法）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> vertexCnt = <span class="number">0</span>, edgeCnt = <span class="number">0</span>; <span class="comment">// 顶点和边的数量</span></span><br><span class="line">    vector&lt;VertexSE3LieAlgebra *&gt; vectices;</span><br><span class="line">    vector&lt;EdgeSE3LieAlgebra *&gt; edges;</span><br><span class="line">    <span class="keyword">while</span> (!fin.<span class="built_in">eof</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读文件 sphere.g2o</span></span><br><span class="line">        string name;</span><br><span class="line">        fin &gt;&gt; name;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="string">&quot;VERTEX_SE3:QUAT&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SE3 顶点</span></span><br><span class="line">            VertexSE3LieAlgebra *v = <span class="keyword">new</span> <span class="built_in">VertexSE3LieAlgebra</span>(); <span class="comment">// 使用自定义的顶点</span></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            fin &gt;&gt; index;</span><br><span class="line">            v-&gt;<span class="built_in">setId</span>(index);</span><br><span class="line">            v-&gt;<span class="built_in">read</span>(fin);</span><br><span class="line">            optimizer.<span class="built_in">addVertex</span>(v);</span><br><span class="line">            vertexCnt++;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">                v-&gt;<span class="built_in">setFixed</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;EDGE_SE3:QUAT&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SE3-SE3 边</span></span><br><span class="line">            EdgeSE3LieAlgebra *e = <span class="keyword">new</span> <span class="built_in">EdgeSE3LieAlgebra</span>(); <span class="comment">// 使用自定义的边</span></span><br><span class="line">            <span class="keyword">int</span> idx1, idx2;</span><br><span class="line">            fin &gt;&gt; idx1 &gt;&gt; idx2;</span><br><span class="line">            e-&gt;<span class="built_in">setId</span>(edgeCnt++);</span><br><span class="line">            e-&gt;<span class="built_in">setVertex</span>(<span class="number">0</span>, optimizer.<span class="built_in">vertices</span>()[idx1]);</span><br><span class="line">            e-&gt;<span class="built_in">setVertex</span>(<span class="number">1</span>, optimizer.<span class="built_in">vertices</span>()[idx2]);</span><br><span class="line">            e-&gt;<span class="built_in">read</span>(fin);</span><br><span class="line">            optimizer.<span class="built_in">addEdge</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fin.<span class="built_in">good</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;读到&quot;</span> &lt;&lt; vertexCnt &lt;&lt; <span class="string">&quot;个点，&quot;</span> &lt;&lt; edgeCnt &lt;&lt; <span class="string">&quot;个边&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;准备优化......&quot;</span> &lt;&lt; endl;</span><br><span class="line">    optimizer.<span class="built_in">setVerbose</span>(<span class="literal">true</span>);</span><br><span class="line">    optimizer.<span class="built_in">initializeOptimization</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;执行优化......&quot;</span> &lt;&lt; endl;</span><br><span class="line">    optimizer.<span class="built_in">optimize</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;保存优化结果......&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 因为用了自定义顶点且没有向g2o注册，这里保存自己来实现</span></span><br><span class="line">    <span class="comment">// 伪装成 SE3 顶点和边，让 g2o_viewer 可以认出</span></span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;result_lie.g2o&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (VertexSE3LieAlgebra *v : vectices)</span><br><span class="line">    &#123;</span><br><span class="line">        fout &lt;&lt; <span class="string">&quot;VERTEX_SE3:QUAT &quot;</span>;</span><br><span class="line">        v-&gt;<span class="built_in">write</span>(fout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (EdgeSE3LieAlgebra *e : edges)</span><br><span class="line">    &#123;</span><br><span class="line">        fout &lt;&lt; <span class="string">&quot;EDGE_SE3:QUAT &quot;</span>;</span><br><span class="line">        e-&gt;<span class="built_in">write</span>(fout);</span><br><span class="line">    &#125;</span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;我们可以构建一个只有轨迹的图优化，而位姿节点之间的边，可以由两个关键帧之间通过特征匹配之后得到的运动估计来给定初始值。不同的是，一旦初始估计完成，我们就不再优化那些路标点的位置，而只关心所有的相机位姿之间的联系了。通过这种方式，我们省去了大量的特征点优化的计算，只保留了关键帧的轨迹，从而构建了所谓的位姿图（Pose Graph）。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="SLAM十四讲" scheme="https://lukeyalvin.top/categories/SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/"/>
    
    
    <category term="后端优化" scheme="https://lukeyalvin.top/tags/%E5%90%8E%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
    <category term="SLAM实践" scheme="https://lukeyalvin.top/tags/SLAM%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="位姿图优化" scheme="https://lukeyalvin.top/tags/%E4%BD%8D%E5%A7%BF%E5%9B%BE%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>g2o-viewer安装</title>
    <link href="https://lukeyalvin.top/posts/15722.html"/>
    <id>https://lukeyalvin.top/posts/15722.html</id>
    <published>2022-04-05T13:00:25.324Z</published>
    <updated>2022-05-02T13:28:38.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">            <i class="fa fa-quote-left"></i>            <p>g2o_viewer是g2o提供的位姿图优化的仿真程序，该位姿图是由 g2o 自带的 create sphere 程序仿真生成的。它的真实轨迹为一个球，由从下往上的多个层组成。每层为一个正圆形，很多个大小不一的圆形层组成了一个完整的<br>球体，共包含 2500 个位姿节点，可以看成一个转圈上升的过程。然后，仿真程序生成了 t − 1 到 t 时刻的边，称为 odometry 边（里程计）。此外，又生成层与层之间的边，称为 loop closure。</p>            <i class="fa fa-quote-right"></i>          </blockquote><span id="more"></span><p>首先，你要下载$g2o$:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/RainerKuemmerle/g2o</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo apt-get install libqt4-dev qt4-qmake libqglviewer-dev libsuitesparse-dev libcxsparse3.1.2 libcholmod-dev</span><br><span class="line"><span class="comment"># g2o_viewer依赖</span></span><br><span class="line">sudo apt-get install libsuitesparse-dev qtdeclarative5-dev qt5-qmake libqglviewer-dev-qt5</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> g2o</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build </span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>文件结构已经提过了</p><p><img src="/images/g2o-viewer安装/image-20220405210455088.png" alt="image-20220405210455088"></p><p>我们的g2o_viewer源文件就在app里面：</p><p><img src="/images/g2o-viewer安装/image-20220405210828391.png" alt="image-20220405210828391" style="zoom:50%;" /></p><p>我们编译之后检查一下g2o源代码目录下<code>g2o\bin</code>下有没有生成g2o_viewer的可执行文件</p><p><img src="/images/g2o-viewer安装/image-20220405211004286.png" alt="image-20220405211004286" style="zoom:50%;" /></p><p>因为我们编译了，所以检查一下有没有在本地</p><p><img src="/images/g2o-viewer安装/image-20220405211129848.png" alt="image-20220405211129848" style="zoom:50%;" /></p><p>如果没有说明你没有<code>sudo make install</code>成功。</p><p>如果此时还不可以直接在终端打开g2o:</p><p><img src="/images/g2o-viewer安装/image-20220405211231692.png" alt="image-20220405211231692"></p><p>这就是没有链接成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>然后加入：<code>include /usr/local/lib</code>,当然如果你有就不加咯</p><p>然后执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>然后就可以使用了！</p><p><img src="/images/g2o-viewer安装/image-20220405211615903.png" alt="image-20220405211615903" style="zoom:50%;" /></p><p>如果还不可以，那你指定哪一步不对劲！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;
            &lt;i class=&quot;fa fa-quote-left&quot;&gt;&lt;/i&gt;
            &lt;p&gt;g2o_viewer是g2o提供的位姿图优化的仿真程序，该位姿图是由 g2o 自带的 create sphere 程序仿真生成的。它的真实轨迹为一个球，由从下往上的多个层组成。每层为一个正圆形，很多个大小不一的圆形层组成了一个完整的&lt;br&gt;球体，共包含 2500 个位姿节点，可以看成一个转圈上升的过程。然后，仿真程序生成了 t − 1 到 t 时刻的边，称为 odometry 边（里程计）。此外，又生成层与层之间的边，称为 loop closure。&lt;/p&gt;

            &lt;i class=&quot;fa fa-quote-right&quot;&gt;&lt;/i&gt;
          &lt;/blockquote&gt;</summary>
    
    
    
    <category term="安装" scheme="https://lukeyalvin.top/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="安装" scheme="https://lukeyalvin.top/tags/%E5%AE%89%E8%A3%85/"/>
    
    <category term="SLAM实践" scheme="https://lukeyalvin.top/tags/SLAM%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="g2o" scheme="https://lukeyalvin.top/tags/g2o/"/>
    
  </entry>
  
</feed>
